--Generated By msgid-gen-lua Do not Edit

local PBMessageDataOne = {}
local MsgCallBackNames = require("Net/MsgHandler/AutoGen/MsgCallBackNames")
local MsgDataNames = require("Net/MsgHandler/AutoGen/MsgDataNames")

--服务器返回的错误码
local function Get_S_Exception(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Exception, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Exception, msg)
end

--服务器端组装文字提示
local function Get_S_Exception_Server(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Exception_Server, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Exception_Server, msg)
end

--心跳  一分钟调用一次
local function Get_S_GetServerTime(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetServerTime, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetServerTime, msg)
end

--同步玩家属性
local function Get_S_SynPlayerProperty(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynPlayerProperty, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynPlayerProperty, msg)
end

--支付
local function Get_S_Pay(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Pay, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Pay, msg)
end

--获取已首冲过的商品id列表
local function Get_S_GetFristPayIdList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetFristPayIdList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetFristPayIdList, msg)
end

--完成发货的商品ID
local function Get_S_FinishPay(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_FinishPay, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_FinishPay, msg)
end

--玩家信息提示框
local function Get_S_QuickTips(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_QuickTips, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_QuickTips, msg)
end

--获取验证码
local function Get_S_GetValidateCode(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetValidateCode, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetValidateCode, msg)
end

--绑定
local function Get_S_BindPhone(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_BindPhone, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_BindPhone, msg)
end

--获取账号绑定信息
local function Get_S_GetBindInfo(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetBindInfo, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetBindInfo, msg)
end

--领取手机绑定奖励
local function Get_S_GetBindReward(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetBindReward, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetBindReward, msg)
end

--是否接受陌生人信息
local function Get_S_SetIsAcceptChat(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SetIsAcceptChat, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SetIsAcceptChat, msg)
end

--设置是否接受好友申请
local function Get_S_SetIsAcceptApply(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SetIsAcceptApply, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SetIsAcceptApply, msg)
end

--设置信息
local function Get_S_GetPlayerOptional(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetPlayerOptional, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetPlayerOptional, msg)
end

--同步玩家称谓信息
local function Get_S_SynPlayerTitle(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynPlayerTitle, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynPlayerTitle, msg)
end

--退出游戏（顶号或封号）
local function Get_S_ExitGame(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ExitGame, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ExitGame, msg)
end

--停服维护
local function Get_S_StopServer(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_StopServer, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_StopServer, msg)
end

--登录游戏
local function Get_S_LoginGame(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_LoginGame, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_LoginGame, msg)
end

--创建角色
local function Get_S_CreatePlayer(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_CreatePlayer, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_CreatePlayer, msg)
end

--进入游戏
local function Get_S_EnterGame(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_EnterGame, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_EnterGame, msg)
end

--进入游戏完成后拿取数据
local function Get_S_EnterComplete(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_EnterComplete, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_EnterComplete, msg)
end

--删除角色
local function Get_S_DeletePlayer(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_DeletePlayer, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_DeletePlayer, msg)
end

--进入场景
local function Get_S_EnterScene(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_EnterScene, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_EnterScene, msg)
end

--获取区域元素列表
local function Get_S_GetSceneElementList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetSceneElementList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetSceneElementList, msg)
end

--添加角色列表
local function Get_S_AddPlayerPuppets(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddPlayerPuppets, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddPlayerPuppets, msg)
end

--添加怪物列表
local function Get_S_AddMonsterPuppets(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddMonsterPuppets, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddMonsterPuppets, msg)
end

--移除玩家或怪物列表
local function Get_S_RemovePuppets(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_RemovePuppets, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_RemovePuppets, msg)
end

--添加掉落列表
local function Get_S_AddDropItemInfos(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddDropItemInfos, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddDropItemInfos, msg)
end

--移除掉落列表
local function Get_S_RemoveDropItemInfos(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_RemoveDropItemInfos, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_RemoveDropItemInfos, msg)
end

--添加地效列表
local function Get_S_AddWigSkillInfos(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddWigSkillInfos, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddWigSkillInfos, msg)
end

--移除地效列表
local function Get_S_RemoveWigSkillInfos(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_RemoveWigSkillInfos, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_RemoveWigSkillInfos, msg)
end

--添加采集物列表
local function Get_S_AddCollectItemInfos(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddCollectItemInfos, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddCollectItemInfos, msg)
end

--移除采集物列表
local function Get_S_RemoveCollectItemInfos(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_RemoveCollectItemInfos, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_RemoveCollectItemInfos, msg)
end

--同步位置状态
local function Get_S_SynPosition(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynPosition, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynPosition, msg)
end

--更新最新位置
local function Get_S_UpdatePosition(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_UpdatePosition, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_UpdatePosition, msg)
end

--拾取物品成功
local function Get_S_Pickup(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Pickup, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Pickup, msg)
end

--角色信息
local function Get_S_ShowPlayer(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ShowPlayer, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ShowPlayer, msg)
end

--添加召唤怪列表	
local function Get_S_AddBeckonPuppets(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddBeckonPuppets, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddBeckonPuppets, msg)
end

--同步场景内怪物状态
local function Get_S_SynMonsterState(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynMonsterState, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynMonsterState, msg)
end

--传送通知
local function Get_S_TransferNotice(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_TransferNotice, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_TransferNotice, msg)
end

--获取神境面板数据
local function Get_S_GetShenjingData(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetShenjingData, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetShenjingData, msg)
end

--副本结束包  （清掉剩余怪物）
local function Get_S_InstanceEnd(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_InstanceEnd, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_InstanceEnd, msg)
end

--取开启的副本列表
local function Get_S_GetOpenMapList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetOpenMapList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetOpenMapList, msg)
end

--多人副本通知
local function Get_S_SynTeamState(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynTeamState, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynTeamState, msg)
end

--大荒塔结算
local function Get_S_TowerEnd(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_TowerEnd, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_TowerEnd, msg)
end

--使用道具返回
local function Get_S_UseItem(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_UseItem, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_UseItem, msg)
end

--装备药品返回
local function Get_S_PutonDrug(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_PutonDrug, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_PutonDrug, msg)
end

--卸下药品返回
local function Get_S_PutdownDrug(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_PutdownDrug, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_PutdownDrug, msg)
end

--卸下药品返回
local function Get_S_SynBagItem(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynBagItem, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynBagItem, msg)
end

--物品合成
local function Get_S_FuseItem(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_FuseItem, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_FuseItem, msg)
end

--合成
local function Get_S_Compose(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Compose, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Compose, msg)
end

--分解
local function Get_S_Decompose(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Decompose, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Decompose, msg)
end

--一键分解
local function Get_S_AutoDecompose(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AutoDecompose, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AutoDecompose, msg)
end

--一键提炼
local function Get_S_AutoRefine(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AutoRefine, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AutoRefine, msg)
end

--提炼
local function Get_S_Refine(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Refine, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Refine, msg)
end

--获取装备信息
local function Get_S_ShowEquipment(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ShowEquipment, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ShowEquipment, msg)
end

--强化装备
local function Get_S_StrongEquip(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_StrongEquip, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_StrongEquip, msg)
end

--合成装备
local function Get_S_ComposeEquip(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ComposeEquip, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ComposeEquip, msg)
end

--传承装备
local function Get_S_InheritEquip(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_InheritEquip, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_InheritEquip, msg)
end

--同步技能返回
local function Get_S_SynSkill(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynSkill, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynSkill, msg)
end

--技能结果返回
local function Get_S_SkillResult(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SkillResult, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SkillResult, msg)
end

--复活同步
local function Get_S_Revive(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Revive, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Revive, msg)
end

--buff同步
local function Get_S_SynBuff(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynBuff, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynBuff, msg)
end

--新学习技能返回
local function Get_S_CreatePlayerSkill(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_CreatePlayerSkill, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_CreatePlayerSkill, msg)
end

--升级技能返回
local function Get_S_UpgradePlayerSkill(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_UpgradePlayerSkill, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_UpgradePlayerSkill, msg)
end

--同步熟练度
local function Get_S_SynPlayerSkill(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynPlayerSkill, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynPlayerSkill, msg)
end

--获取时装列表返回
local function Get_S_SynFashionList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynFashionList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynFashionList, msg)
end

--装备时装
local function Get_S_PutonFashion(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_PutonFashion, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_PutonFashion, msg)
end

--卸下时装
local function Get_S_PutdownFashion(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_PutdownFashion, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_PutdownFashion, msg)
end

--获得时装
local function Get_S_AddFashion(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AddFashion, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AddFashion, msg)
end

--申请添加好友返回
local function Get_S_ApplyAddFriend(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ApplyAddFriend, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ApplyAddFriend, msg)
end

--获取好友列表返回
local function Get_S_FriendList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_FriendList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_FriendList, msg)
end

--申请消息列表返回	
local function Get_S_ApplyMsgList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ApplyMsgList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ApplyMsgList, msg)
end

--删除好友返回	
local function Get_S_DeleteFriend(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_DeleteFriend, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_DeleteFriend, msg)
end

--搜索好友返回
local function Get_S_SerachFriend(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SerachFriend, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SerachFriend, msg)
end

--处理好友消息返回
local function Get_S_ApplyDeal(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ApplyDeal, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ApplyDeal, msg)
end

--通知有新邮件
local function Get_S_NewMail(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_NewMail, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_NewMail, msg)
end

--读取邮件
local function Get_S_ReadMail(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ReadMail, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ReadMail, msg)
end

--获取邮件列表 分页
local function Get_S_GetMailPageList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetMailPageList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetMailPageList, msg)
end

--领取附件
local function Get_S_ReceiveAttachment(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ReceiveAttachment, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ReceiveAttachment, msg)
end

--删除邮件
local function Get_S_DeleteMail(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_DeleteMail, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_DeleteMail, msg)
end

--聊天
local function Get_S_Chat(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Chat, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Chat, msg)
end

--公告
local function Get_S_SynNotic(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynNotic, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynNotic, msg)
end

--上传语音信息
local function Get_S_PostVoice(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_PostVoice, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_PostVoice, msg)
end

--获取语音信息
local function Get_S_GetVoice(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetVoice, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetVoice, msg)
end

--获取离线信息 
local function Get_S_GetOfflineInfo(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetOfflineInfo, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetOfflineInfo, msg)
end

--装备位注灵信息列表
local function Get_S_WakanList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_WakanList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_WakanList, msg)
end

--注灵
local function Get_S_TakeWakan(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_TakeWakan, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_TakeWakan, msg)
end

--提交任务返回
local function Get_S_SubmitTask(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SubmitTask, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SubmitTask, msg)
end

--同步任务追踪
local function Get_S_SynTaskTrack(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynTaskTrack, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynTaskTrack, msg)
end

--放弃任务返回
local function Get_S_AbandonTask(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AbandonTask, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AbandonTask, msg)
end

--同步每日任务列表
local function Get_S_SynDailyTaskList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynDailyTaskList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynDailyTaskList, msg)
end

--铭文
local function Get_S_Epigraph(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Epigraph, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Epigraph, msg)
end

--更新铭文效果信息
local function Get_S_SynPlayerWeaponEffect(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynPlayerWeaponEffect, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynPlayerWeaponEffect, msg)
end

--同步队伍
local function Get_S_SynTeam(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynTeam, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynTeam, msg)
end

--获取社交邀请列表
local function Get_S_GetInviteList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetInviteList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetInviteList, msg)
end

--发起邀请回复
local function Get_S_Invite(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_Invite, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_Invite, msg)
end

--有新邀请通知
local function Get_S_HasNewInvite(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_HasNewInvite, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_HasNewInvite, msg)
end

--组队大厅列表	
local function Get_S_GetTeamList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetTeamList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetTeamList, msg)
end

--踢除队员
local function Get_S_KickTeamPlayer(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_KickTeamPlayer, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_KickTeamPlayer, msg)
end

--退出队伍
local function Get_S_QuitTeam(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_QuitTeam, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_QuitTeam, msg)
end

--同步队员血量显示
local function Get_S_SynTeamPlayerHp(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynTeamPlayerHp, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynTeamPlayerHp, msg)
end

--申请加入队伍
local function Get_S_ApplyJoinTeam(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ApplyJoinTeam, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ApplyJoinTeam, msg)
end

--获取申请加入队伍消息
local function Get_S_GetTeamApplyList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetTeamApplyList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetTeamApplyList, msg)
end

--加入队伍信息处理
local function Get_S_ApplyJoinTeamDeal(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ApplyJoinTeamDeal, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ApplyJoinTeamDeal, msg)
end

--自动同意申请
local function Get_S_AutoAgreeApply(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_AutoAgreeApply, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_AutoAgreeApply, msg)
end

--获取队长位置信息	
local function Get_S_GetCaptainPostion(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetCaptainPostion, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetCaptainPostion, msg)
end

--开始采集
local function Get_S_StartCollect(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_StartCollect, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_StartCollect, msg)
end

--结束采集
local function Get_S_EndCollect(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_EndCollect, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_EndCollect, msg)
end

--扩展装备货架
local function Get_S_ExtendGrid(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ExtendGrid, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ExtendGrid, msg)
end

--装备下架
local function Get_S_OffShelf(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_OffShelf, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_OffShelf, msg)
end

--通知交易行信息	
local function Get_S_SynTradeList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynTradeList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynTradeList, msg)
end

--出售	
local function Get_S_TradeSell(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_TradeSell, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_TradeSell, msg)
end

--购买
local function Get_S_TradeBuy(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_TradeBuy, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_TradeBuy, msg)
end

--获取玩家交易行信息
local function Get_S_GetPlayerTradeList(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_GetPlayerTradeList, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_GetPlayerTradeList, msg)
end

--重新上架
local function Get_S_ReUpShelf(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_ReUpShelf, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_ReUpShelf, msg)
end

--同步家族信息
local function Get_S_SynFamilyInfo(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_SynFamilyInfo, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_SynFamilyInfo, msg)
end

--创建家族返回
local function Get_S_CreateFamily(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_CreateFamily, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_CreateFamily, msg)
end

--解散家族返回
local function Get_S_DisbandFamily(msg)
	--TODO:根据需要打开注释的代码，然后在对应的函数里面写处理逻辑)
	DataManager:GetInstance():Broadcast(MsgCallBackNames.S_DisbandFamily, msg)
	--DataManager:GetInstance():Broadcast(MsgDataNames.S_DisbandFamily, msg)
end

PBMessageDataOne.Get_S_Exception=Get_S_Exception
PBMessageDataOne.Get_S_Exception_Server=Get_S_Exception_Server
PBMessageDataOne.Get_S_GetServerTime=Get_S_GetServerTime
PBMessageDataOne.Get_S_SynPlayerProperty=Get_S_SynPlayerProperty
PBMessageDataOne.Get_S_Pay=Get_S_Pay
PBMessageDataOne.Get_S_GetFristPayIdList=Get_S_GetFristPayIdList
PBMessageDataOne.Get_S_FinishPay=Get_S_FinishPay
PBMessageDataOne.Get_S_QuickTips=Get_S_QuickTips
PBMessageDataOne.Get_S_GetValidateCode=Get_S_GetValidateCode
PBMessageDataOne.Get_S_BindPhone=Get_S_BindPhone
PBMessageDataOne.Get_S_GetBindInfo=Get_S_GetBindInfo
PBMessageDataOne.Get_S_GetBindReward=Get_S_GetBindReward
PBMessageDataOne.Get_S_SetIsAcceptChat=Get_S_SetIsAcceptChat
PBMessageDataOne.Get_S_SetIsAcceptApply=Get_S_SetIsAcceptApply
PBMessageDataOne.Get_S_GetPlayerOptional=Get_S_GetPlayerOptional
PBMessageDataOne.Get_S_SynPlayerTitle=Get_S_SynPlayerTitle
PBMessageDataOne.Get_S_ExitGame=Get_S_ExitGame
PBMessageDataOne.Get_S_StopServer=Get_S_StopServer
PBMessageDataOne.Get_S_LoginGame=Get_S_LoginGame
PBMessageDataOne.Get_S_CreatePlayer=Get_S_CreatePlayer
PBMessageDataOne.Get_S_EnterGame=Get_S_EnterGame
PBMessageDataOne.Get_S_EnterComplete=Get_S_EnterComplete
PBMessageDataOne.Get_S_DeletePlayer=Get_S_DeletePlayer
PBMessageDataOne.Get_S_EnterScene=Get_S_EnterScene
PBMessageDataOne.Get_S_GetSceneElementList=Get_S_GetSceneElementList
PBMessageDataOne.Get_S_AddPlayerPuppets=Get_S_AddPlayerPuppets
PBMessageDataOne.Get_S_AddMonsterPuppets=Get_S_AddMonsterPuppets
PBMessageDataOne.Get_S_RemovePuppets=Get_S_RemovePuppets
PBMessageDataOne.Get_S_AddDropItemInfos=Get_S_AddDropItemInfos
PBMessageDataOne.Get_S_RemoveDropItemInfos=Get_S_RemoveDropItemInfos
PBMessageDataOne.Get_S_AddWigSkillInfos=Get_S_AddWigSkillInfos
PBMessageDataOne.Get_S_RemoveWigSkillInfos=Get_S_RemoveWigSkillInfos
PBMessageDataOne.Get_S_AddCollectItemInfos=Get_S_AddCollectItemInfos
PBMessageDataOne.Get_S_RemoveCollectItemInfos=Get_S_RemoveCollectItemInfos
PBMessageDataOne.Get_S_SynPosition=Get_S_SynPosition
PBMessageDataOne.Get_S_UpdatePosition=Get_S_UpdatePosition
PBMessageDataOne.Get_S_Pickup=Get_S_Pickup
PBMessageDataOne.Get_S_ShowPlayer=Get_S_ShowPlayer
PBMessageDataOne.Get_S_AddBeckonPuppets=Get_S_AddBeckonPuppets
PBMessageDataOne.Get_S_SynMonsterState=Get_S_SynMonsterState
PBMessageDataOne.Get_S_TransferNotice=Get_S_TransferNotice
PBMessageDataOne.Get_S_GetShenjingData=Get_S_GetShenjingData
PBMessageDataOne.Get_S_InstanceEnd=Get_S_InstanceEnd
PBMessageDataOne.Get_S_GetOpenMapList=Get_S_GetOpenMapList
PBMessageDataOne.Get_S_SynTeamState=Get_S_SynTeamState
PBMessageDataOne.Get_S_TowerEnd=Get_S_TowerEnd
PBMessageDataOne.Get_S_UseItem=Get_S_UseItem
PBMessageDataOne.Get_S_PutonDrug=Get_S_PutonDrug
PBMessageDataOne.Get_S_PutdownDrug=Get_S_PutdownDrug
PBMessageDataOne.Get_S_SynBagItem=Get_S_SynBagItem
PBMessageDataOne.Get_S_FuseItem=Get_S_FuseItem
PBMessageDataOne.Get_S_Compose=Get_S_Compose
PBMessageDataOne.Get_S_Decompose=Get_S_Decompose
PBMessageDataOne.Get_S_AutoDecompose=Get_S_AutoDecompose
PBMessageDataOne.Get_S_AutoRefine=Get_S_AutoRefine
PBMessageDataOne.Get_S_Refine=Get_S_Refine
PBMessageDataOne.Get_S_ShowEquipment=Get_S_ShowEquipment
PBMessageDataOne.Get_S_StrongEquip=Get_S_StrongEquip
PBMessageDataOne.Get_S_ComposeEquip=Get_S_ComposeEquip
PBMessageDataOne.Get_S_InheritEquip=Get_S_InheritEquip
PBMessageDataOne.Get_S_SynSkill=Get_S_SynSkill
PBMessageDataOne.Get_S_SkillResult=Get_S_SkillResult
PBMessageDataOne.Get_S_Revive=Get_S_Revive
PBMessageDataOne.Get_S_SynBuff=Get_S_SynBuff
PBMessageDataOne.Get_S_CreatePlayerSkill=Get_S_CreatePlayerSkill
PBMessageDataOne.Get_S_UpgradePlayerSkill=Get_S_UpgradePlayerSkill
PBMessageDataOne.Get_S_SynPlayerSkill=Get_S_SynPlayerSkill
PBMessageDataOne.Get_S_SynFashionList=Get_S_SynFashionList
PBMessageDataOne.Get_S_PutonFashion=Get_S_PutonFashion
PBMessageDataOne.Get_S_PutdownFashion=Get_S_PutdownFashion
PBMessageDataOne.Get_S_AddFashion=Get_S_AddFashion
PBMessageDataOne.Get_S_ApplyAddFriend=Get_S_ApplyAddFriend
PBMessageDataOne.Get_S_FriendList=Get_S_FriendList
PBMessageDataOne.Get_S_ApplyMsgList=Get_S_ApplyMsgList
PBMessageDataOne.Get_S_DeleteFriend=Get_S_DeleteFriend
PBMessageDataOne.Get_S_SerachFriend=Get_S_SerachFriend
PBMessageDataOne.Get_S_ApplyDeal=Get_S_ApplyDeal
PBMessageDataOne.Get_S_NewMail=Get_S_NewMail
PBMessageDataOne.Get_S_ReadMail=Get_S_ReadMail
PBMessageDataOne.Get_S_GetMailPageList=Get_S_GetMailPageList
PBMessageDataOne.Get_S_ReceiveAttachment=Get_S_ReceiveAttachment
PBMessageDataOne.Get_S_DeleteMail=Get_S_DeleteMail
PBMessageDataOne.Get_S_Chat=Get_S_Chat
PBMessageDataOne.Get_S_SynNotic=Get_S_SynNotic
PBMessageDataOne.Get_S_PostVoice=Get_S_PostVoice
PBMessageDataOne.Get_S_GetVoice=Get_S_GetVoice
PBMessageDataOne.Get_S_GetOfflineInfo=Get_S_GetOfflineInfo
PBMessageDataOne.Get_S_WakanList=Get_S_WakanList
PBMessageDataOne.Get_S_TakeWakan=Get_S_TakeWakan
PBMessageDataOne.Get_S_SubmitTask=Get_S_SubmitTask
PBMessageDataOne.Get_S_SynTaskTrack=Get_S_SynTaskTrack
PBMessageDataOne.Get_S_AbandonTask=Get_S_AbandonTask
PBMessageDataOne.Get_S_SynDailyTaskList=Get_S_SynDailyTaskList
PBMessageDataOne.Get_S_Epigraph=Get_S_Epigraph
PBMessageDataOne.Get_S_SynPlayerWeaponEffect=Get_S_SynPlayerWeaponEffect
PBMessageDataOne.Get_S_SynTeam=Get_S_SynTeam
PBMessageDataOne.Get_S_GetInviteList=Get_S_GetInviteList
PBMessageDataOne.Get_S_Invite=Get_S_Invite
PBMessageDataOne.Get_S_HasNewInvite=Get_S_HasNewInvite
PBMessageDataOne.Get_S_GetTeamList=Get_S_GetTeamList
PBMessageDataOne.Get_S_KickTeamPlayer=Get_S_KickTeamPlayer
PBMessageDataOne.Get_S_QuitTeam=Get_S_QuitTeam
PBMessageDataOne.Get_S_SynTeamPlayerHp=Get_S_SynTeamPlayerHp
PBMessageDataOne.Get_S_ApplyJoinTeam=Get_S_ApplyJoinTeam
PBMessageDataOne.Get_S_GetTeamApplyList=Get_S_GetTeamApplyList
PBMessageDataOne.Get_S_ApplyJoinTeamDeal=Get_S_ApplyJoinTeamDeal
PBMessageDataOne.Get_S_AutoAgreeApply=Get_S_AutoAgreeApply
PBMessageDataOne.Get_S_GetCaptainPostion=Get_S_GetCaptainPostion
PBMessageDataOne.Get_S_StartCollect=Get_S_StartCollect
PBMessageDataOne.Get_S_EndCollect=Get_S_EndCollect
PBMessageDataOne.Get_S_ExtendGrid=Get_S_ExtendGrid
PBMessageDataOne.Get_S_OffShelf=Get_S_OffShelf
PBMessageDataOne.Get_S_SynTradeList=Get_S_SynTradeList
PBMessageDataOne.Get_S_TradeSell=Get_S_TradeSell
PBMessageDataOne.Get_S_TradeBuy=Get_S_TradeBuy
PBMessageDataOne.Get_S_GetPlayerTradeList=Get_S_GetPlayerTradeList
PBMessageDataOne.Get_S_ReUpShelf=Get_S_ReUpShelf
PBMessageDataOne.Get_S_SynFamilyInfo=Get_S_SynFamilyInfo
PBMessageDataOne.Get_S_CreateFamily=Get_S_CreateFamily
PBMessageDataOne.Get_S_DisbandFamily=Get_S_DisbandFamily

return PBMessageDataOne
package KKSG;

option optimize_for = LITE_RUNTIME;

enum KickType{
	KICK_NORMAL = 0;
	KICK_RELOGIN = 1;
	KICK_GMFORBID = 2;
	KICK_SERVER_SHUTDOWN = 3;
	KICK_DEL_ROLE = 4;
	KICK_CHANGE_PROFESSION = 5;
	KICK_HG = 6;
}

enum ErrorCode{
	ERR_SUCCESS = 0;
	ERR_UNKNOWN = 1;
	ERR_PASSWORD_ERROR = 2;
	ERR_RELOGIN = 3;
	ERR_ACCOUNT_NOT_EXIST = 4;
	ERR_NAME_EXIST = 5;
	ERR_INVALID_NAME = 6;
	ERR_STATE_ERROR = 7;
	ERR_PROFESSION_TYPE = 8;
	ERR_FAILED = 9;
	ERR_ACCOUNT_ROLE_FULL = 10;
	ERR_ACCOUNT_DATA_ERROR = 11;
	ERR_TIMEOUT = 12;
	ERR_SKILL_CONFIGERROR = 13;
	ERR_SKILL_LEVELREQ = 14;
	ERR_SKILL_ITEMREQ = 15;
	ERR_ACHIVE_NOTCOMPLETE = 16;
	ERR_ACHIVE_NOTCONFIG = 17;
	ERR_SKILL_POINT = 18;
	ERR_PROF_ERROR = 19;
	ERR_PROF_LEVELREQ = 20;
	ERR_PROF_LEVELREQ2 = 21;
	ERR_BIND_SKILL_OUTRANGE = 22;
	ERR_BIND_SKILL_NOT_LEARN = 23;
	ERR_BIND_SKILL_MISSSLOT = 24;
	ERR_ENHANCE_ERROR = 25;
	ERR_ENHANCE_LACKITEM = 26;
	ERR_ENHANCE_FAILED = 27;
	ERR_ENHANCE_SUCCEED = 28;
	ERR_ENHANCE_MAX = 29;
	ERR_ARENA_ERROR = 30;
	ERR_ARENA_COUNTLIMIT = 31;
	ERR_DECOMPOSE_FAILED = 32;
	ERR_DECOMPOSE_CANNOT = 33;
	ERR_DECOMPOSE_NOTFIND = 34;
	ERR_SCENE_LEVELREQ = 35;
	ERR_SCENE_NOFATIGUE = 36;
	ERR_SCENE_TODYCOUNTLIMIT = 37;
	ERR_SCENE_NEEDPREVCOMPLETE = 38;
	ERR_ITEM_NOTEXIST = 39;
	ERR_ITEM_LEVELLIMIT = 40;
	ERR_ITEM_CANNOTBEEQUIPED = 41;
	ERR_EMBLEM_NOEMPTYSLOT = 42;
	ERR_ITEM_NOT_ENOUGH = 43;
	ERR_EMBLEM_MAXLEVEL = 44;
	ERR_JADE_MAXLEVEL = 45;
	ERR_JADECOMPOSE_NOTFIND = 46;
	ERR_JADEATTACH_NOEMPTYSLOT = 47;
	ERR_JADE_COUNTNOTENOUGH = 48;
	ERR_CHECKIN_FULL = 49;
	ERR_CHECKIN_LACKDRAGONCOIN = 50;
	ERR_ACTIVITY_NOCHESTINDEX = 51;
	ERR_ACTIVITY_HASGETCHEST = 52;
	ERR_ACTIVITY_NOTENOUGHVALUE = 53;
	ERR_ACTIVITY_SPECIALCHESTCOUNTLIMIT = 54;
	ERR_ARENA_ADDCOUNTLACKCOIN = 55;
	ERR_JADE_OPENJADELACKCOIN = 56;
	ERR_JADE_NOEMPTYSLOT = 57;
	ERR_ITEM_NEED_DRAGONCOIN = 58;
	ERR_BUY_LIMIT = 59;
	ERR_SWEEP_NOT_THREE_STAR = 60;
	ERR_SHOP_ITEMNOTEXIST = 61;
	ERR_SHOP_LACKMONEY = 62;
	ERR_TEAM_ALREADY_INTEAM = 63;
	ERR_TEAM_NOT_EXIST = 64;
	ERR_TEAM_FULL = 65;
	ERR_TEAM_WRONG_PASSWORD = 66;
	ERR_SCENE_TIMELIMIT = 67;
	ERR_TEAM_EXPEDITIONID_NOT_EXIST = 68;
	ERR_TEAM_LEVEL_REQUARE = 69;
	ERR_SCENE_COOLDOWN = 70;
	ERR_SKILL_MAXLEVEL = 71;
	ERR_WORLDBOSS_DEAD = 72;
	ERR_REINFORCE_LEVELLIMIT = 73;
	ERR_REINFORCE_LACKMONEY = 74;
	ERR_ARENA_REWARDTAKEN = 75;
	ERR_SKILL_PROFESSION_ERROR = 76;
	ERR_SKILL_NEED_PRESKILL = 77;
	ERR_LOGIN_TIMEOUT = 78;
	ERR_LOGIN_NOSERVER = 79;
	ERR_SHOP_LEVELLIMIT = 80;
	ERR_SHOP_PPTLIMIT = 81;
	ERR_SHOP_COUNTLIMIT = 82;
	ERR_SHOP_DAILYCOUNTLIMIT = 83;
	ERR_CHAT_LEVELLIMIT = 84;
	ERR_CHAT_LENGTHLIMIT = 85;
	ERR_CHAT_TIMELIMIT = 86;
	ERR_FASHOIN_ALREADY_EXIST = 87;
	ERR_FASHION_NOT_EXIST = 88;
	ERR_FRIEND_MAX = 89;
	ERR_FRIEND_REPEATED = 90;
	ERR_FRIEND_NOTEXIST = 91;
	ERR_BLACK_INSELF = 92;
	ERR_BLACK_INOTHER = 93;
	ERR_BLACK_NOTEXIST = 94;
	ERR_LOGIN_VERIFY_FAILED = 95;
	ERR_GUILD_NOT_EXIST = 96;
	ERR_GUILD_NAME_EXIST = 97;
	ERR_GUILD_NOT_IN_GUILD = 98;
	ERR_GUILD_ALREADY_IN_GUILD = 99;
	ERR_GUILD_NO_PERMISSION = 100;
	ERR_CHAPTERCHEST_ALREADY_FETCHED = 101;
	ERR_CHAPTERCHEST_NEEDSTAR = 102;
	ERR_SESSION_KICKOFF = 103;
	ERR_ALIVE_TIMEOUT = 104;
	ERR_GS_CLOSED = 105;
	ERR_FASHIONCOMPOSE_LEVEL_REQ = 106;
	ERR_GUILD_FULL = 107;
	ERR_GUILD_PPT_REQ = 108;
	ERR_GUILD_WAITAPPROVAL = 109;
	ERR_GUILD_MEMBER_NOT_EXIST = 110;
	ERR_FLOWER_SELF = 111;
	ERR_FLOWER_COUNTLIMIT = 112;
	ERR_FLOWER_ROLELIMIT = 113;
	ERR_FLOWER_COSTLIMIT = 114;
	ERR_GUILDCARD_ALLCOUNTLIMIT = 115;
	ERR_GUILDCARD_COUNTLIMIT = 116;
	ERR_GUILDCARD_CHANGELIMIT = 117;
	ERR_GUILDCHECKIN_LIMIT = 118;
	ERR_GUILDCHECKIN_MONEY = 119;
	ERR_GUILDCHECKIN_TAKEN = 120;
	ERR_GUILDCHECKIN_BOXLIMIT = 121;
	ERR_SCENE_NEED_PRESCENE = 122;
	ERR_GUILDBONUS_NOTEXIST = 123;
	ERR_GUILDBONUS_ALREADYGET = 124;
	ERR_GUILDBONUS_EXCEED = 125;
	ERR_GUILD_OPENLIMIT = 126;
	ERR_SHOP_OPENLIMIT = 127;
	ERR_GUILDCHECKIN_ALLCOUNT = 128;
	ERR_TEAM_EXPEDITION_DAYCOUNT = 129;
	ERR_TEAM_GUILD_DAYCOUNT = 130;
	ERR_TEAM_NEST_DAYCOUNT = 131;
	ERR_GUILD_LEVEL_REQ = 132;
	ERR_TEAM_NOT_OPENTIME = 133;
	ERR_TEAM_NEED_ATLEAST_2_MEMBER = 134;
	ERR_TEAM_ONLY_LEADER_CAN_KICK = 135;
	ERR_TEAM_MEMBER_NOT_EXIST = 136;
	ERR_SKILL_GUILD_CONTRIBUTE = 137;
	ERR_REWARD_TAKEN = 138;
	ERR_REWARD_LIMIT = 139;
	ERR_REWARD_NOTEXIST = 140;
	ERR_GUILD_VICE_FULL = 141;
	ERR_GUILD_OFFICER_FULL = 142;
	ERR_GUILD_ELITE_FULL = 143;
	ERR_TEAM_MEMBER_NOT_ONLINE = 144;
	ERR_TEAM_DISAGREE_BATTLE = 145;
	ERR_TEAM_ONLY_LEADER_CAN_STARTBATTLE = 146;
	ERR_TEAM_MATCHING = 147;
	ERR_ROLE_NOT_ONLINE = 148;
	ERR_TEAM_ONLY_LEADER_CAN_DO = 149;
	ERR_LACKCOIN = 150;
	ERR_LACKDIAMOND = 151;
	ERR_SMELTING_INVALID = 152;
	ERR_SMELTING_TRANSINVALID = 153;
	ERR_GUILD_NAME_TOO_SHORT = 154;
	ERR_GUILD_NAME_TOO_LONG = 155;
	ERR_TEAM_NOT_IN_HALL = 156;
	ERR_TEAM_IN_BATTLE = 157;
	ERR_TEAM_VOTE = 158;
	ERR_TEAM_STATE_ERROR = 159;
	ERR_TEAM_INVITE_ROLE_IS_IN_BATTLE = 160;
	ERR_ITEM_COOLDOWN = 161;
	ERR_LOGIN_FORBID = 162;
	ERR_LOGIN_MAXNUM = 163;
	ERR_SCENE_NEED_PRETASK = 164;
	ERR_NAME_HAS_INVALID_CHAR = 165;
	ERR_SMELTING_LACKMONEY = 166;
	ERR_OTHER_GAOJIGU_NOTOPEN = 167;
	ERR_FISHING_NUMNOTENOUGH = 168;
	ERR_FISHING_ALREADYSEAT = 169;
	ERR_FISHING_SEATNOTEMPTY = 170;
	ERR_SLOTATTR_NOEQUIP = 171;
	ERR_SLOTATTR_MONEYLIMIT = 172;
	ERR_SLOTATTR_LEVELLIMIT = 173;
	ERR_PK_NOMATCH = 174;
	ERR_ITEM_WRONG_PROFESSION = 175;
	ERR_SKILL_NOT_MATCH = 176;
	ERR_TSHOW_LEVEL_NOTENOUGH = 177;
	ERR_TRANSFER_LACKMONEY = 178;
	ERR_AUCT_HAVEBIDDING = 179;
	ERR_AUCT_ITEMOUTSALE = 180;
	ERR_AUCT_PRICECHAGE = 181;
	ERR_AUCT_SURPASSSELF = 182;
	ERR_AUCT_POINTLESS = 183;
	ERR_AUCT_DRAGONCOINLESS = 184;
	ERR_AUCT_BUYSELF = 185;
	ERR_ALREADY_IN_CAMP = 186;
	ERR_NOT_IN_CAMP = 187;
	ERR_AUCT_ONSALEMAX = 188;
	ERR_AUCT_COMMONERR = 189;
	ERR_AUCT_ITEMSALED = 190;
	ERR_SCENE_NOT_IN_CONFIG = 191;
	ERR_GAOJIGU_MODEL_DUPLICATE_FASHIONID = 192;
	ERR_TEAMBUY_COUNT_MAX = 193;
	ERR_TEAMBUY_DIAMOND_LESS = 194;
	ERR_ADDFRIEND_DUMMYROLE = 195;
	ERR_VERSION_FAILED = 196;
	ERR_EXPBACK_ALREADYGET = 197;
	ERR_PK_OPENTIME = 198;
	ERR_ITEM_NEED_DIAMOND = 199;
	ERR_WORD_FORBID = 200;
	ERR_TEAM_TOWER_DAYCOUNT = 201;
	ERR_AUCTGOLDLESS = 202;
	ERR_ILLEGAL_CODE = 203;
	ERR_GUILD_CHECKINBONUS_TIMEERROR = 204;
	ERR_GUILD_CHECKINBONUS_ASKTOOMUCH = 205;
	ERR_TEAM_NOJOININBATTLE = 206;
	ERR_REGISTER_NUM_LIMIT = 207;
	ERR_FRIEND_MAXOTHER = 208;
	ERR_FRIEND_SENDLIMIT = 209;
	ERR_FRIEND_TAKENLIMIT = 210;
	ERR_ROLE_NOTEXIST = 211;
	ERR_RANDOMFRIEND_CD = 212;
	ERR_ENHANCE_TRANSLEVEL = 213;
	ERR_ENHANCE_TRANSPOS = 214;
	ERR_GUILD_LVL_LIMIT = 215;
	ERR_FRIEND_HASSEND = 216;
	ERR_GUILD_APPLYFULL = 217;
	ERR_BLACK_CHAT = 218;
	ERR_PVP_ROLE_INBATTLE = 219;
	ERR_FRIEND_SELF = 220;
	ERR_BLACK_MAX = 221;
	ERR_EMBLEM_NOIDENTIFY = 222;
	ERR_EMBLEM_NOTHIRDSLOT = 223;
	ERR_EMBLEM_CANTIDENTIFY = 224;
	GUILD_SKILL_STUDY_LEVEL_LIMIT = 225;
	GUILD_SKILL_GUILD_LEVEL_LIMIT = 226;
	ERR_GUILD_EXP_LIMIT = 227;
	ERR_REVIVE_MAXNUM = 228;
	ERR_QA_OVER_NAME_TIME = 229;
	ERR_QA_IN_OTHER_TYPE = 230;
	ERR_JADE_MINEQUIPLEVEL = 231;
	ERR_SWEEP_POWERPOINT_LESS = 232;
	ERR_SWEEP_TICKET_LESS = 233;
	ERR_ACCOUNT_INVALID = 234;
	ERR_JADE_WRONGTYPE = 235;
	ERR_SHOP_TIMELIMIT = 236;
	ERR_SHOP_VIPLIMIT = 237;
	ERR_SHOP_ARENALIMIT = 238;
	ERR_SHOP_PKLIMIT = 239;
	ERR_SHOP_GUILDLIMIT = 240;
	ERR_AUDIO_NOT_EXIST = 241;
	ERR_SHOP_INVALID = 242;
	ERR_WATCH_LIVEISOVER = 243;
	ERR_WATCH_LIVEISFULL = 244;
	ERR_TOWER_INSWEEP = 245;
	ERR_TOWER_FLOOR_NOTENOUGH = 246;
	ERR_DRAGON_TICKET_NOTENOUGH = 247;
	ERR_WATCH_WAIT = 248;
	ERR_OP_EXP_NOT_OPEN = 249;
	ERR_TEAM_GODDESS_DAYCOUNT = 250;
	ERR_TEAM_SEAL_TYPE = 251;
	ERR_DRAGON_PROGRESS_INVALID = 252;
	ERR_TEAMBUY_DRAGONCOIN_LESS = 253;
	ERR_JADE_REPLACE = 254;
	ERR_PVP_TEAM_MATCH = 255;
	ERR_GS_UNREADY = 256;
	ERR_INVALID_REQUEST = 257;
	ERR_PET_NOT_EXIST = 258;
	ERR_PE_CAN_NOT_RELEASE = 259;
	ERR_PETSYS_NOT_OPEN = 260;
	ERR_PET_SEAT_NOT_ENOUGH = 261;
	ERR_ACCOUNT_QUEUING = 262;
	ERR_TITLE_MAX = 263;
	ERR_TITLE_LACKITEM = 264;
	ERR_TITLE_PPTLIMIT = 265;
	ERR_BLACK_REPEATED = 266;
	ERR_BLACK_SELF = 267;
	ERR_TEAM_LEADER_NOTHELPER = 268;
	ERR_PET_IS_FULL = 269;
	ERR_IBSHOP_LACKGOODS = 270;
	ERR_IBSHOP_LIMITCOUNT = 271;
	ERR_IBSHOP_LACKDIAMOND = 272;
	ERR_IBSHOP_LACKDRAGON = 273;
	ERR_CHAT_PUNISH = 274;
	ERR_LOCKED_ROLE = 275;
	ERR_IBSHOP_ERRPARAM = 276;
	ERR_IBSHOP_BUYLV = 277;
	ERR_SPRITE_NOTFIND = 278;
	ERR_SPRITE_LEVELMAX = 279;
	ERR_SPRITE_EVOLUTION_LEVELMAX = 280;
	ERR_SPRITE_EVOLUTION_LEVELLIMIT = 281;
	ERR_SPRITE_EVOLUTION_LACKOFCOST = 282;
	ERR_SPRITE_AWAKE_LACKOFCOST = 283;
	ERR_SPRITE_LEVELUP_LACKOFCOST = 284;
	ERR_SPRITE_ALREADY_INFIGHT = 285;
	ERR_SPRITE_INFIGHT_FULL = 286;
	ERR_SPRITE_ALREADY_OUTFIGHT = 287;
	ERR_REVIVE_ITEMLIMIT = 288;
	ERR_REVIVE_MONEYLIMIT = 289;
	ERR_ENHANCE_NO_EQUIP_CAN_TRANSFORM = 290;
	ERR_IBSHOP_VIPLEVEL = 291;
	ERR_IBSHOP_OPENGROUP = 292;
	ERR_SPRITE_INFIGHT_SAMETYPE = 293;
	ERR_SMELT_MINLEVEL = 294;
	ERR_JADE_GOLDNOTENOUGH = 295;
	ATLAS_CARD_NOT_ENOUGH = 296;
	ERR_AUCT_ITEM_LESS = 297;
	ERR_AUCT_ITEM_LOCK = 298;
	ERR_AUCT_PRICE_NOTCHANGE = 299;
	ERR_LEVELSEAL_PROP_NOT_ENGOUTH = 300;
	ERR_AUCT_AUTOREFRESH_TIME = 301;
	ERR_ATLAS_NOT_BREAK = 302;
	ERR_LOGIN_NOT_IN_WHITE_LIST = 303;
	ERR_TEAM_NOT_PASS = 304;
	ERR_QA_ALEADY_IN_ROOM = 500;
	ERR_QA_NO_DATA = 501;
	ERR_QA_LEVEL_NOT_ENOUGH = 502;
	ERR_QA_NOT_IN_TIME = 503;
	ERR_QA_NO_GUILD = 504;
	ERR_QA_NO_COUNT = 505;
	ERR_TASK_NOT_ACCEPT = 510;
	ERR_TASK_ALREADY_TAKE = 511;
	ERR_TASK_NOT_FOUND = 512;
	ERR_TASK_NOT_FINISH = 513;
	ERR_TASK_NO_TABLE = 514;
	ERR_GUILD_LADDER_NOT_OPEN = 515;
	ERR_GARDEN_NOTEXIST_FARMLAND = 516;
	ERR_GARDEN_NOHARVESTSTATE = 517;
	ERR_GARDEN_STEALEDTIMES_EXCEED = 518;
	ERR_GARDEN_NOTEXIST_SEEDID = 519;
	ERR_GARDEN_NOTEXIST_SPRITE = 520;
	ERR_SKYCITY_NOT_OPEN = 521;
	ERR_GMF_UP_INCOOL = 522;
	ERR_GMF_UP_FULL = 523;
	ERR_QA_NO_GUILD_ROOM = 524;
	ERR_TEAM_ALREADY_INOTHERTEAM = 525;
	ERR_TEAM_IDIP = 526;
	ERR_COMMENDWATCH_COUNTLIMIT = 527;
	ERR_CARDMATCH_BEGINFAILED = 528;
	ERR_CARDMATCH_NOBEGIN = 529;
	ERR_CARDMATCH_ENDSOON = 530;
	ERR_CARDMATCH_CHANGELIMIT = 531;
	ERR_SKILL_PREPOINTLIMIT = 532;
	ERR_SPACTIVITY_TASK_NOT_COMPLETE = 533;
	ERR_SPACTIVITY_TASK_GET = 534;
	ERR_SPACTIVITY_NOPRIZE = 535;
	ERR_SPACTIVITY_NOTPRIZETIME = 536;
	ERR_SPACTIVITY_NOTENOUGH_MONEY = 537;
	ERR_SPACTIVITY_PRIZE_GET = 538;
	ERR_GARDEN_PLANT_CD = 539;
	ERR_GARDEN_COOKING_EXCEED = 540;
	ERR_GARDEN_COOKINGLEVEL_LOW = 541;
	ERR_GARDEN_PLANT_CUL_ERR = 542;
	ERR_GARDEN_ERR_SEED = 543;
	ERR_GARDEN_NOSEED = 544;
	ERR_GARDEN_NOALLOW = 545;
	ERR_GMF_NOPOWER_KICK_LEADER = 546;
	ERR_SPRITE_ALREADY_ISLEADER = 547;
	ERR_SPRITE_AWAKE_ROLE_LEVELLIMIT = 548;
	ERR_SPRITE_EVOLUTION_ROLE_LEVELLIMIT = 549;
	ERR_GUILD_ALREADY_BIND = 550;
	ERR_GUILD_NOT_BIND = 551;
	ERR_ALREADY_IN_QQGROUP = 552;
	ERR_INSPIRE_COOLDOWN = 553;
	ERR_SKYCITY_IN_TEAM = 554;
	ERR_SKYCITY_TEAM_OUTTIME = 555;
	ERR_GMF_DOWN_FIGHTING = 556;
	ERR_GMF_DOWN_HAVEFAILED = 557;
	ERR_JADE_SAME_TYPE = 558;
	ERR_CHAT_BLACK_INSELF = 559;
	ERR_CHAT_BLACK_INOTHER = 560;
	ERR_GARDEN_QUESTS_NOENOUGH = 561;
	ERR_GARDEN_NOTINGARDEN = 562;
	ERR_GARDEN_FOODBOOK_ACTIVED = 563;
	ERR_ROLE_LOGOUT = 564;
	ERR_TEAM_INV_LOGOUT = 565;
	ERR_SKYCITY_LV = 566;
	ERR_RESWAR_TEAM = 567;
	ERR_RESWAR_ACTIVITY = 568;
	ERR_RESWAR_GROUP = 569;
	ERR_RESWAR_STATE = 570;
	ERR_RESWAR_CD = 571;
	ERR_BAG_FULL = 572;
	ERR_BAG_FULL_TAKEOFF_EQUIP = 573;
	ERR_BAG_FULL_TAKEOFF_FASHION = 574;
	ERR_BAG_FULL_TAKEOFF_EMBLEM = 575;
	ERR_BAG_FULL_TAKEOFF_JADE = 576;
	ERR_BAG_FULL_GIVE_MAIL_REWARD = 577;
	ERR_AUCT_PRICE_CHANGE = 578;
	ERR_GMF_UPBATTLE_REPEAT = 579;
	ERR_PANDORA_LACKOF_FIRE = 580;
	ERR_AUCT_AUCTOVER = 581;
	ERR_GOLDCLICK_LIMIT = 582;
	ERR_DRAGONCOIN_LIMIT = 583;
	ERR_NOTGUILD = 584;
	ERR_SCENE_NOT_PET = 585;
	ERR_GUILDBONUS_ALLGET = 586;
	ERR_GUILDBUFF_GUILD = 587;
	ERR_GUILDBUFF_POS = 588;
	ERR_GUILDBUFF_CD = 589;
	ERR_GUILDBUFF_ITEM = 590;
	ERR_RESWAR_LEADER = 591;
	ERR_RESWAR_LACKPLAYER = 592;
	ERR_TEAM_INV_IN_FAMILY = 593;
	ERR_TASK_NO_ASK_HELPNUM = 594;
	ERR_TASK_CANNOT_HELP = 595;
	ERR_TASK_ALREADY_FINISH = 596;
	ERR_TASK_ALREADY_ASKED = 597;
	ERR_GARDEN_NOEXIST_FOODID = 598;
	ERR_GARDEN_FOOD_NOALLOW = 599;
	ERR_TASK_NO_ASKINFO = 600;
	ERR_TASK_ASKITEM_REFRESH = 601;
	ERR_ANTI_CHEAT_DETECTED = 305;
	ERR_MS_UNREADY = 306;
	ERR_PET_EXP_EQUAL = 602;
	ERR_TASK_CANNT_HELPSELF = 603;
	CanNotDelInGuildArena = 604;
	ERR_RESWAR_TEAMFIGHTING = 605;
	ERR_TASK_CANNOT_GIVEUP = 606;
	ERR_GUILD_INHERIT_NOT_EXIT = 607;
	ERR_GUILD_INHERIT_GAP = 608;
	ERR_GUILD_INHERIT_LVL = 609;
	ERR_GUILD_INHERIT_TIMES = 610;
	ERR_GUILD_INHERIT_MAP_WRONG = 611;
	ERR_TEAMCOST_DIAMOND = 612;
	ERR_TEAMCOST_DRAGON = 613;
	ERR_TEAM_PPTLIMIT = 614;
	ERR_GUILD_INHERIT_CD_TIME = 615;
	ERR_MS_UNNORMAL = 616;
	ERR_TEAMCOST_NUMLIMIT = 617;
	ERR_STATE_CANTCHANGE = 618;
	ERR_TEAM_MEMCOUNT_OVER = 619;
	ERR_GUILD_INHERIT_CAN_NOT = 620;
	ERR_SYS_NOTOPEN = 621;
	ERR_NAME_ALLNUM = 622;
	ERR_NAME_TOO_LONG = 623;
	ERR_NAME_TOO_SHORT = 624;
	ERR_GUILD_INHERIT_OTHER_TIMES = 625;
	ERR_NEED_FIRST_PROMOTE = 626;
	ERR_FM_NOANCHOR = 627;
	ERR_CAN_NOT_USE_PET_SKILL_BOOK = 628;
	ERR_ENCHANT_MINLEVEL = 629;
	ERR_ENCHANT_LACKITEM = 631;
	ERR_ENCHANT_WRONGPOS = 632;
	ERR_PARTNER_NUM_INVALID = 650;
	ERR_PARTNER_FDEGREE_NOT_ENOUGH = 651;
	ERR_PARTNER_NOT_IN_MAIN_HALL = 652;
	ERR_PARTNER_NOT_ENOUGH_DRAGON = 653;
	ERR_PARTNER_CD_NOT_OK = 654;
	ERR_HORSE_ACTIVITY = 655;
	ERR_TEAM_WEEK_NEST_EXP = 656;
	ERR_PARTNER_CHEST_TAKED = 657;
	ERR_PARTNER_NO_PARTNER = 658;
	ERR_PARTNER_LN_NOT_ENOUGH = 659;
	ERR_PARTNER_ALREADY_HAS = 660;
	ERR_PARTNER_ALREADY_APPLY_LEAVE = 661;
	ERR_PARTNER_NOT_APPLY_LEAVE = 662;
	ERR_INVFIGHT_ROLE_LOGOUT = 663;
	ERR_INVFIGHT_ME_LEVEL = 664;
	ERR_INVFIGHT_ME_SCENE = 665;
	ERR_INVFIGHT_OTHER_LEVEL = 666;
	ERR_INVFIGHT_OTHER_SCENE = 667;
	ERR_INVFIGHT_INV_REPEAT = 668;
	ERR_INVFIGHT_INV_COUNT_MAX = 669;
	ERR_INVFIGHT_INV_TIME_OVER = 670;
	ERR_INVFIGHT_INV_DELAY = 671;
	ERR_DOODAD_FULL = 672;
	ERR_INVFIGHT_INV_TO_COUNT_MAX = 673;
	ERR_PARTNER_ITEM_NOT_FOUND = 674;
	ERR_PARTNER_OTHER_BUYING = 675;
	ERR_PARTNER_SHOP_NO_COUNT = 676;
	ERR_FRIEND_IS_PARTNER = 677;
	ERR_PANDORA_LACKOF_HEART = 678;
	ERR_SELF_HAS_ALLIANCE = 679;
	ERR_OTHER_HAS_ALLIANCE = 680;
	ERR_AUDIOTXT = 681;
	ERR_MENTOR_ASKMAXTODAY = 682;
	ERR_MENTOR_REFRESHTOOFAST = 683;
	ERR_MENTOR_OTHER_ONLINE = 684;
	ERR_PARTNER_LEVEL_NOT_ENOUGH = 685;
	ERR_GCASTLE_NOT_IN_ACT = 686;
	ERR_GCASTLE_NOT_IN_FIGHT = 687;
	ERR_GCASTLE_ROLE_FULL = 688;
	ERR_CARDMATCH_SIGNUP_LIMIT = 689;
	ERR_GUILDAUCT_PUBLIC_TIME = 690;
	ERR_FASHIONCOMPOSE_TIMELIMIT = 691;
	ERR_FASHIONCOMPOSE_QUALITY = 692;
	ERR_FASHIONCOMPOSE_FAILED = 693;
	ERR_FASHIONCOMPOSE_POS = 694;
	ERR_RESWAR_LEAVETEAM = 695;
	ERR_RECONNECT_FAIL = 696;
	ERR_CANTCHOOSEHERO = 697;
	ERR_HERO_INVALID = 698;
	ERR_TEAM_SERVER_OPEN_TIME = 699;
	ERR_AUDIO_CHAT = 700;
	ERR_HERO_LACKMONEY = 701;
	ERR_HEROBATTLE_CANTGETPRIZE = 702;
	ERR_HEROBATTLE_ALREADYGET = 703;
	ERR_CAN_NOT_DEL_IN_GUILD_TERRITOYR = 704;
	ERR_HORSE_TEAM = 705;
	ERR_GCASTLE_ROLE_LEVEL = 706;
	ERR_CAN_INGORE = 707;
	ERR_LEAGUE_NOT_IN_TEAM = 708;
	ERR_LEAGUE_ALREADY_HAS_TEAM = 709;
	ERR_LEAGUE_TEAM_ROLE_NUM_INVALID = 710;
	ERR_LEAGUE_HAS_NO_TEAM = 711;
	ERR_LEAGUE_TEAM_NOT_EXIST = 712;
	ERR_GARDEN_STEAL_LIMIT = 713;
	ERR_LEAGUE_TEAM_IN_MATCH = 714;
	ERR_LEAGUE_TEAM_NOT_IN_MATCH = 715;
	ERR_SKILL_NEED_EXPRESKILL = 716;
	ERR_EQUIP_CANTFORGE = 717;
	ERR_EQUIP_FORGE_LACK_ITEM = 718;
	ERR_EQUIP_FORGE_LACK_STONE = 719;
	ERR_LEAGUE_ROLE_ALREADY_UP = 720;
	ERR_LEAGUE_ROLE_FIGHTING = 721;
	ERR_LEAGUE_ROLE_ALREADY_BATTLE = 722;
	ERR_REQUEST_REPEAT = 723;
	ERR_EQUIP_FORGE_FAILED = 724;
	ERR_NOMAIL_GETREWARD = 725;
	ERR_MIDAS_FAILED = 726;
	ERR_LEAGUE_TEAM_IN_BATTLE = 727;
	ERR_ENCHANT_NOTHAVE = 728;
	ERR_ENCHANT_ALREADYHAVE = 729;
	ERR_ENCHANT_TRANSFER_LEVEL_LIMIT = 730;
	ERR_FM_NOINAUDIO = 731;
	ERR_FM_NOINROOM = 732;
	ERR_CHANGEPRO_LEVEL = 733;
	ERR_CHANGEPRO_TIME = 734;
	ERR_CHANGEPRO_COUNT = 735;
	ERR_CHANGEPRO_INVALID = 736;
	ERR_CHANGEPRO_SAMEPRO = 737;
	ERR_CHANGEPRO_ITEMLIMIT = 738;
	ERR_SMELT_MAXVALUE = 739;
	ERR_SPRITE_AWAKE_MAX = 740;
	ERR_CHANGEPRO_KICK = 741;
	ERR_LEAGUE_NOT_IN_MATCH_TIME = 742;
	ERR_LEAGUE_TEAM_NOT_IN_BATTLE = 743;
	ERR_SPRITE_TRAIN_MAX = 744;
	ERR_SPRITE_TRAIN_CHOOSEMAX = 745;
	ERR_SPRITE_TRAIN_LACKITEM = 746;
	ERR_SPRITE_NOTTRAIN = 747;
	ERR_SPRITE_RESETTRAIN_LACKITEM = 748;
	ERR_LEAGUE_ALREADY_FIGHTED = 749;
	ERR_LEAGUE_NOT_IN_APPLY_TIME = 750;
	ERR_HORSE_INTEAM = 751;
	ERR_LEAGUE_INV_NOT_IN_TEAM = 752;
	ERR_LEAGUE_INV_ALREADY_HAS_TEAM = 753;
	ERR_SPRITE_TRAIN_NOT_ENOUGH = 754;
	ERR_DECLAREWAR_OUT_TIME = 756;
	ERR_LEAGUE_TEAM_CANNOT_CROSS = 757;
	ERR_DECLARATION_TOO_LONG = 758;
	ERR_CROSS_ZONE_UNUSABLE = 759;
	ERR_NOT_DEL_GUILD_IN_TERR = 760;
	ERR_GCASTLE_FIGHT_END = 761;
	ERR_CAREER_PVP_NOTOPEN = 762;
	ERR_APOLLO_CDN = 763;
	ERR_LEAGUE_HAS_MEMBER_NOT_TEAM = 764;
	ERR_POK_MATCH_ENDSOON = 765;
	ERR_QUESTCAREER_NOT_ONLINE = 766;
	ERR_MIDAS_BALANCE_NOTENOUTH = 767;
	ERR_HAS_JOIN_OTHER_GUILD_BOSS = 768;
	ERR_AUTH_TOKEN_INVALID = 769;
	ERR_TEAM_TICKET_LESS = 770;
	ERR_TEAM_USE_TICKET_COUNT_LESS = 771;
	ERR_TEAM_TICKET_CONFIG = 772;
	ERR_TEAM_TICKET_SEAL = 773;
	ERR_INVALID_IBBUY = 774;
	ERR_CROSS_IBBUY = 775;
	ERR_GUILD_NAME_NULL = 776;
	ERR_GUILD_LOCK_NAME = 777;
	ERR_ARGENTA_DAILY_GET = 778;
	ERR_WORLDBOSSGUILD_COUNTLIMIT = 779;
	ERR_WORLDBOSSGUILD_UNMATCH = 780;
	ERR_HERO_EXPERIENCE_HAVE = 781;
	ERR_PLATSHARE_FAILED = 782;
	ERR_HERO_ALREADY_CHOSEN = 783;
	ERR_SKY_NOT_TEAM_MEMBER = 784;
	ERR_SKY_ALREADY_HAS_TEAM = 785;
	ERR_SKY_HAS_NO_TEAM = 786;
	ERR_SKY_INV_NOT_TEAM_MEMBER = 787;
	ERR_SKY_TEAM_IN_MATCH = 788;
	ERR_SKY_INV_ALREADY_HAS_TEAM = 789;
	ERR_SKY_TEAM_ROLE_NUM_INVALID = 790;
	ERR_SKY_TEAM_IN_BATTLE = 791;
	ERR_SKY_HAS_NOT_TEAM_MEMBER = 792;
	ERR_MENTOR_COMPLETE_OTHER_OFFLINE_NEED_DAYS = 793;
	ERR_MENTOR_COMPLETE_IN_RELATION_NEED_DAYS = 794;
	ERR_TRANSFERR_OTHER_ROLES_LEAVE = 795;
	ERR_PLAT_BANACC = 796;
	ERR_RESWAR_DIFF_GUILD = 797;
	ERR_SKY_ALREADY_FIGHTED = 798;
	ERR_SKY_TEAM_NO_DAILY_NUM = 799;
	ERR_IBGIFT_NOT_ENOUCH = 800;
	ERR_IBGIFT_DAY_MAXBUYCOUNT = 801;
	ERR_IBGIFT_FRIEND = 802;
	ERR_ALREADY_BUYAILEEN = 803;
	ERR_GUILDACMPPATY_NOTOPEN = 804;
	ERR_GUILDACMPPATY_ERRSTAGE = 805;
	ERR_GUILDACMPPATY_DISTANCE = 806;
	ERR_MENTOR_ALREADY_INRELATION = 807;
	ERR_GUILDACMPPATY_SPRITE_ONTEXIST = 808;
	ERR_BAG_FULL_CANT_COMPOSE = 809;
	ERR_BAG_FULL_TAKEOFF_ARTIFACT = 810;
	ERR_GIFTIB_NOTGOODS = 811;
	ERR_ARTIFACT_COMPOSE_LEVELNOTEQUAL = 812;
	ERR_ARTIFACT_COMPOSE_QUALITYNOTEQUAL = 813;
	ERR_ARTIFACT_COMPOSE_NUMBER = 814;
	ERR_ARTIFACT_COMPOSE_CANTCOMPOSE = 815;
	ERR_CUSTOMBATTLE_INVALIDREQUEST = 816;
	ERR_CUSTOMBATTLE_WORLDNOTOPEN = 817;
	ERR_CUSTOMBATTLE_HASJOIN = 818;
	ERR_CUSTOMBATTLE_NOTJOIN = 819;
	ERR_CUSTOMBATTLE_CREATFAILED = 820;
	ERR_CUSTOMBATTLE_LEVELLIMIT = 821;
	ERR_CUSTOMBATTLE_ROELNOTEXIST = 822;
	ERR_CUSTOMBATTLE_CREATECONFINVALID = 823;
	ERR_CUSTOMBATTLE_JOINNOTRELATED = 824;
	ERR_CUSTOMBATTLE_JOINNOTINREADYTIME = 825;
	ERR_CUSTOMBATTLE_JOINFULL = 826;
	ERR_CUSTOMBATTLE_JOININVALIDPASSWORD = 827;
	ERR_CUSTOMBATTLE_JOINFAILED = 828;
	ERR_CUSTOMBATTLE_NOTCREATER = 829;
	ERR_CUSTOMBATTLE_BATTLENOTFIND = 830;
	ERR_CUSTOMBATTLE_MATCHFAILED = 831;
	ERR_IBGIFT_MAX_COUNT = 832;
	ERR_ENCHANT_NOTHAVEATTRID = 833;
	ERR_EXTRA_EMBLEM_SLOT_FULL = 834;
	ERR_EXTRA_EMBLEM_SLOT_LEVEL = 835;
	ERR_IBGIFT_OVERMAXUNRECV = 836;
	ERR_TEAM_CANNOT_FORNOW = 837;
	ERR_ALREADY_REPORTED = 838;
	ERR_CUSTOMBATTLE_REWARDCD = 839;
	ERR_CUSTOMBATTLE_REWARDCANGET = 840;
	ERR_FASHION_ITEM_NOT_ENOUGH = 841;
	ERR_GUILDPARTY_TRADIING = 842;
	ERR_SPACTIVITY_NOTOPEN = 843;
	ERR_BAGEXPAND_LESSITEM = 844;
	ERR_BAGEXPAND_MAXCOUNT = 845;
	ERR_SHOP_WEEKCOUNTLIMIT = 846;
	ERR_GUILDBONUS_MAXNUM = 847;
	ERR_SELF_GIFT_SELF = 848;
	ERR_IBSHOP_BUSY = 849;
	ERR_ABYSS_LEVEL = 850;
	ERR_GUILDCAMP_SELF_NOTIN = 851;
	ERR_GUILDCAMP_OTHER_NOTIN = 852;
	ERR_SMELTCOUNT_ZERO = 853;
	ERR_CUSTOMBATTLE_REWARDHASGET = 854;
	ERR_CUSTOMBATTLE_PASSWORDINVALID = 855;
	ERR_CUSTOMBATTLE_CREATORLEAVE = 856;
	ERR_GUILDCAMP_SPRITE_NOTEXIST = 857;
	ERR_TEAM_INV_TIMEOUT = 858;
	ERR_FORGE_NOREPLACE = 859;
	ERR_CUSTOMBATTLE_NAMEMAX = 860;
	ERR_CUSTOMBATTLE_NAMEMIN = 861;
	ERR_CUSTOMBATTLE_NAMEINVALID = 862;
	ERR_REPORT_FORBID = 863;
	ERR_TEAM_COST_CANCEL = 864;
	ERR_TEAM_COST_WIN = 865;
	ERR_CUSTOM_NOTOPEN = 866;
	ERR_CUSTOM_GMLIMIT = 867;
	ERR_MILITARY_TRIGGER_CHECK = 868;
	ERR_MENTOR_INHERIT_ING = 869;
	ERR_MOBA_UPGRADENUM_EMPTY = 870;
	ERR_FASHION_ERROR_COLOR = 871;
	ERR_FASHION_COLOR_UNLOOK = 872;
	ERR_FASHION_NO_HAIR = 873;
	ERR_FASHION_COLOR_LOOK = 874;
	ERR_MOBA_SIGNAL_TOOFAST = 875;
	ERR_NOT_BESPEAK = 876;
	ERR_PAIRPET_OUTRANGE = 877;
	ERR_PAIRPET_INVITEINVALID = 878;
	ERR_ROLE_IN_OTHER_SERVER = 879;
	ERR_MOBA_CANTMATCH = 880;
	ERR_PAIRPET_INVITEREPEAT = 881;
	ERR_PAIRPET_SCENEINVALID = 882;
	ERR_PAIRPET_SELF = 883;
	ERR_PAIRPET_OTHER = 884;
	ERR_PAIRPET_OTHERNOTIN = 885;
	ERR_MENTOR_OTHER_APPLY_BREAK = 886;
	ERR_MENTOR_ALREADY_COMPLETE_MENTOR = 887;
	ERR_MENTOR_OTHER_ALREADY_APPLY_INHERIT = 888;
	ERR_MENTOR_CUR_STATUS_CANNOT_BREAK = 889;
	ERR_CUSTOM_SAMEMATCH = 890;
	ERR_CUSTOM_NOMATCHING = 891;
	ERR_MENTOR_CUR_STATUS_CANNOT_APPLYSTUDENT = 892;
	ERR_MENTOR_CUR_STATUS_CANNOT_APPLYMASTER = 893;
	ERR_TEAM_DIAMOND_COST_LIMIT = 894;
	ERR_ACT_NOT_OPEN = 895;
	ERR_MOBA_MOBMAXLEVEL = 896;
	ERR_ACTIVITY = 897;
	ERR_NOCONDITION = 898;
	ERR_SERVER_UNNORMAL = 899;
	ERR_CUSTOMBATTLE_BOUNTYMODE_NOTOPEN = 900;
	ERR_GROUPCHAT_FULLGROUP = 901;
	ERR_GROUPCHAT_ROLENOCOUNT = 902;
	ERR_GROUPCHAT_LEADERNOCOUNT = 903;
	ERR_GROUPCHAT_GROUPFULLMEMBERS = 904;
	ERR_UNUSE1 = 905;
	ERR_HAVE_GOT_AWARD = 906;
	ERR_ANCIENTPOWER_LESSPOINT = 907;
	ERR_ANCIENTPOWER_DEAD = 908;
	ERR_JADE_DRAGONNOTENOUGH = 909;
	ERR_WEDDING_NOT_EXISTS = 910;
	ERR_WEDDING_ALREADY_INVITE = 911;
	ERR_WEDDING_NOT_INVITE = 912;
	ERR_WEDDING_NOT_APPLY = 913;
	ERR_MARRIAGE_LEVEL_NOTENOUGH = 914;
	ERR_MARRIAGE_NEED_TWO_NOTMARRY = 915;
	ERR_MARRIAGE_DISTANCE_TOOFAR = 916;
	ERR_WEDDING_OPER_CD = 917;
	ERR_WEDDING_ALREADY_VOWS = 918;
	ERR_WEDDING_HP_NOT_ENOUGH = 919;
	ERR_WEDDING_NOT_OWNER = 920;
	ERR_MARRIAGE_NOTINMARRIAGE = 921;
	ERR_MARRIAGE_ALREADY_APPLYDIVORCE = 922;
	ERR_MARRIAGE_NOT_DIVORCESTATUS = 923;
	ERR_MARRIAGE_ONLY_APPLIER_CANCLEDIVORCE = 924;
	ERR_FRIEND_DEGREE_NOTENOUGH = 925;
	ERR_WEDDING_ALREADY_HOLDED = 926;
	ERR_WEDDING_ALREADY_TAKECAR = 927;
	ERR_INVALID_PAYROLE = 928;
	ERR_WEDDING_IS_HOLDING = 929;
	ERR_WEDDING_NOT_RUNNING = 930;
	ERR_LIVENESS_NOT_ENOUGH = 931;
	ERR_CHEST_TAKED = 932;
	ERR_WEDDING_ALREADY_APPLY = 933;
	ERR_GROUPCHAT_FULLGROUP_OTHER = 934;
	ERR_GROUPCHAT_TIMEOUT = 935;
	ERR_GROUPCHAT_NO_MANAGER = 936;
	ERR_ITEM_NOT_ENOUGH_COMMON = 937;
	ERR_WEDDINGCAR_CANT_IN_PET = 938;
	ERR_WEDDINGCAR_OTHER_RUNNING = 939;
	ERR_ARTIFACT_CANTRECAST = 940;
	ERR_ARTIFACT_CANTFUSE = 941;
	ERR_ARTIFACT_FUSEFAILED = 942;
	ERR_ARTIFACT_FUSE_CONDITION = 943;
	ERR_ARTIFACT_CANTINSCRIPTION = 944;
	ERR_WEDDING_ALREADY_REFUSE = 945;
	ERR_WEDDING_NEED_TWO_MARRIAGE = 946;
	ERR_SPRITE_NOTREBIRTH = 947;
	ERR_TEAM_FASTMATCH_BUFF = 948;
	ERR_TEAM_SERVER_NOT_MATCH = 949;
	ERR_DAILY_WEDDY_CANDY_OVERMAX = 950;
	ERR_MARRIAGE_NEED_TEAM = 951;
	ERR_BACKFLOW_BUYEND = 952;
	ERR_NEED_MARRIAGE_TEAM = 953;
	ERR_DOENTERSCENE_FAILED = 954;
	ERR_WEDDING_INVITE_OVERMAX = 955;
	ERR_ARTIFACT_INSCRIPTION_LEVEL = 956;
	ERR_TRANS_PASSIVE = 957;
	ERR_TRANS_NONE = 958;
	ERR_TRANS_OTHERNOTEXIST = 959;
	ERR_TRANS_ITEMNOTENOUGH = 960;
	ERR_TRANS_STATE_FAILED = 961;
	ERR_TRANS_SCENE_INVALID = 962;
	ERR_GARDEN_EXPELSPRITE_MAX = 963;
	ERR_OP_ROLE_LEAVE = 964;
	ERR_BATTLEFIELD_NOT_OPEN = 965;
	ERR_BATTLEFIELD_LEVEL = 966;
	ERR_TASK_NO_REFRESH_COUNT = 967;
	ERR_CANT_FUSE = 968;
	ERR_FUSE_MAX = 969;
	ERR_TASK_NOT_TASK_ITEM = 970;
	ERR_COMPETEDRAGON_WRONG_DNID = 971;
	ERR_CANNOT_PICK_THIS_ITEM = 972;
	ERR_NPCFL_NEED_REFRESH = 973;
	ERR_NPCFL_NPC_LEVEL_MAX = 974;
	ERR_NPCFL_ITEM_LESS = 975;
	ERR_NPCFL_EXP_LESS = 976;
	ERR_NPCFL_UNITE_LEVEL_LESS = 977;
	ERR_NPCFL_GIVE_GIFT_COUNT_LESS = 978;
	ERR_NPCFL_BUY_GG_COUNT_LESS = 979;
	ERR_NPCFL_DRAGON_COIN_LESS = 980;
	ERR_DAILY_TASK_NO_REFRESH_COUNT = 981;
	ERR_DAILY_TASK_CANNT_REFRESH = 982;
	ERR_DAILY_TASK_NO_BUY_COUNT = 983;
	ERR_DAILY_TASK_QUALITY_MAX = 984;
	ERR_DG_ALREADY_IN_DG = 985;
	ERR_DG_DGNAME_EXIST = 986;
	ERR_DG_DGUILD_NOT_EXIST = 987;
	ERR_DG_FULL = 988;
	ERR_DG_PPT_REQ = 989;
	ERR_DG_WAITAPPROVAL = 990;
	ERR_DG_NOT_IN_GUILD = 991;
	ERR_DG_NO_PERMISSION = 992;
	ERR_DG_LOCK_NAME = 993;
	ERR_DG_APPLY_FULL = 994;
	ERR_DG_IN_CD = 995;
	ERR_DG_ITEM_NOT_FOUND = 996;
	ERR_DG_OTHER_BUYING = 997;
	ERR_DG_SHOP_NO_COUNT = 998;
	ERR_DG_NOT_IN_SAME = 999;
	ERR_DG_POSITION_FULL = 1000;
	ERR_DAILY_TASK_OTHER_NO_HELPCOUNT = 1001;
	ERR_UNOPEN_FUNCTION = 1002;
	ERR_QUERYBOX_TIMELEFT = 1003;
	ERR_GUILDPARTY_ENDING = 1004;
	ERR_GUILDPARTY_HAVESUMMON = 1005;
	ERR_KINGBACK_REWARD_COUNT_LIMIT = 1006;
	ERR_DG_NOT_IN_APPROVAL = 1007;
	ERR_GUILDPARTY_SUMMONING = 1008;
	ERR_HG_FORBID = 1009;
	ERR_FASHION_NOEXIST_EFFECTS = 1010;
	ERR_BACKFLOW_ALREADYGET = 1011;
	ERR_BACKFLOW_LESSPOINT = 1012;
	ERR_TEAM_CROSS_TEAM_CHANGE_EXP = 1013;
	ERR_TEAM_CHANGE_EXP_TO_CROSS = 1014;
	ERR_INVALID_STATE = 1015;
	ERR_CHANGE_SAMESCENE = 1016;
	ERR_BACKFLOWSHOP_LESSFRESHCOUNT = 1017;
	ERR_BACKFLOWSHOP_NOTHAVEGOOD = 1018;
	ERR_BACKFLOWSHOP_LACKDIAMOND = 1019;
	ERR_BACKFLOWSHOP_LACKDRAGONCOIN = 1020;
	ERR_BACKFLOWSHOP_ALREADYBUY = 1021;
	ERR_BACKFLOWSHOP_SHOPCLOSE = 1022;
	ERR_ALREADY_CHARGE_BACK = 1023;
	ERR_FUSE_EXPMAX = 1024;
	ERR_FUSE_BREAKLACKEXP = 1025;
}

enum RoleType{
	Role_INVALID = 0;
	Role_Warrior = 1;
	Role_Archer = 2;
	Role_Sorceress = 3;
	Role_Cleric = 4;
	Role_Academic = 5;
	Role_Swordsman = 11;
	Role_Mercenary = 21;
	Role_Sharpshooter = 12;
	Role_Acrobat = 22;
	Role_Elementalist = 13;
	Role_Mystic = 23;
	Role_Paladin = 14;
	Role_Priest = 24;
	Role_Engineer = 15;
	Role_Alchemist = 25;
	Role_Gladiator = 111;
	Role_Moonlord = 211;
	Role_Destroyer = 121;
	Role_Barbarian = 221;
	Role_Sniper = 112;
	Role_Artillery = 212;
	Role_Tempest = 122;
	Role_Windwalker = 222;
	Role_Saleana = 113;
	Role_Elestra = 213;
	Role_Smasher = 123;
	Role_Majesty = 223;
	Role_Guardian = 114;
	Role_Crusader = 214;
	Role_Saint = 124;
	Role_Inquistior = 224;
	Role_Shootingstar = 115;
	Role_Gearmaster = 215;
	Role_Adept = 125;
	Role_Physician = 225;
	Role_Assassin = 6;
	Role_Shinobi = 16;
	Role_Taoist = 26;
	Role_Reaper = 116;
	Role_Raven = 216;
	Role_LightBringer = 126;
	Role_AbyssWalker = 226;
	Role_Kali = 7;
	Role_Screamer = 17;
	Role_Dancer = 27;
	Role_SoulEater = 117;
	Role_DarkSummoner = 217;
	Role_SpiritDancer = 127;
	Role_BladeDancer = 227;
}

enum SceneType{
	SCENE_HALL = 1;
	SCENE_BATTLE = 2;
	SCENE_NEST = 3;
	SCENE_ARENA = 5;
	SCENE_WORLDBOSS = 7;
	SCENE_BOSSRUSH = 9;
	SCENE_GUILD_HALL = 10;
	SCENE_GUILD_BOSS = 11;
	SCENE_PK = 12;
	SCENE_ABYSSS = 13;
	SCENE_FAMILYGARDEN = 15;
	SCENE_TOWER = 16;
	SCENE_PVP = 17;
	SCENE_DRAGON = 18;
	SCENE_GMF = 19;
	SCENE_GODDESS = 20;
	SCENE_DRAGON_EXP = 21;
	SCENE_RISK = 22;
	SCENE_ENDLESSABYSS = 23;
	SKYCITY_WAITING = 24;
	SKYCITY_FIGHTING = 25;
	SCENE_PROF_TRIALS = 26;
	SCENE_GPR = 27;
	SCENE_RESWAR_PVP = 28;
	SCENE_RESWAR_PVE = 29;
	SCENE_GUILD_CAMP = 30;
	SCENE_AIRSHIP = 31;
	SCENE_WEEK_NEST = 32;
	SCENE_VS_CHALLENGE = 33;
	SCENE_HORSE = 34;
	SCENE_HORSE_RACE = 35;
	SCENE_HEROBATTLE = 36;
	SCENE_INVFIGHT = 37;
	SCENE_CASTLE_WAIT = 38;
	SCENE_CASTLE_FIGHT = 39;
	SCENE_LEAGUE_BATTLE = 40;
	SCENE_ACTIVITY_ONE = 41;
	SCENE_ACTIVITY_TWO = 42;
	SCENE_ACTIVITY_THREE = 43;
	SCENE_ABYSS_PARTY = 44;
	SCENE_CUSTOMPK = 45;
	SCENE_PKTWO = 46;
	SCENE_MOBA = 47;
	SCENE_WEEKEND4V4_MONSTERFIGHT = 48;
	SCENE_WEEKEND4V4_GHOSTACTION = 49;
	SCENE_WEEKEND4V4_LIVECHALLENGE = 50;
	SCENE_WEEKEND4V4_CRAZYBOMB = 51;
	SCENE_WEEKEND4V4_HORSERACING = 52;
	SCENE_CUSTOMPKTWO = 53;
	SCENE_WEEKEND4V4_DUCK = 54;
	SCENE_BIGMELEE_READY = 60;
	SCENE_BIGMELEE_FIGHT = 61;
	SCENE_CALLBACK = 62;
	SCENE_WEDDING = 63;
	SCENE_BIOHELL = 64;
	SCENE_DUCK = 65;
	SCENE_COUPLE = 66;
	SCENE_BATTLEFIELD_READY = 67;
	SCENE_BATTLEFIELD_FIGHT = 68;
	SCENE_COMPETEDRAGON = 69;
	SCENE_SURVIVE = 70;
	SCENE_LEISURE = 71;
	SCENE_LOGIN = 100;
}

enum TableDef{
	AccountTable = 1;
	RoleTable = 2;
}

enum EntitySpecies{
	Species_Boss = 1;
	Species_Opposer = 2;
	Species_Puppet = 3;
	Species_Npc = 7;
	Species_Role = 10;
	Species_Empty = 8;
	Species_Dummy = 9;
	Species_Substance = 5;
	Species_Affiliate = 11;
	Species_Elite = 6;
}

enum BattleChestRewardType{
	GOLD_CHEST = 1;
	SILVER_CHEST = 2;
	COPPER_CHEST = 3;
	WOOD_CHEST = 4;
}

enum TaskOPEnum{
	TAKE_TASK = 1;
	FINISH_TASK = 2;
}

enum ResetType{
	RESET_SKILL = 0;
	RESET_PROFESSION = 1;
	RESET_GUILD_SKILL = 2;
}

enum LotteryType{
	Sprite_Draw_One = 1;
	Sprite_Draw_Ten = 2;
	Sprite_Draw_One_Free = 3;
	Sprite_GoldDraw_One = 4;
	Sprite_GoldDraw_Ten = 5;
	Sprite_GoldDraw_One_Free = 6;
}

enum EntityCategory{
	Category_Role = 0;
	Category_Enemy = 1;
	Category_Neutral = 2;
	Category_DummyRole = 3;
	Category_Others = 4;
}

enum RankeType{
	RealTimeArenaRank = 0;
	ArenaRank = 1;
	WorldBossGuildRank = 2;
	WorldBossDamageRank = 3;
	PowerPointRank = 4;
	LevelRank = 5;
	FlowerRank = 6;
	GuildBossRank = 7;
	GuildBossRoleRank = 8;
	PkRealTimeRank = 9;
	PkRank = 10;
	FashionPowerPointRank = 11;
	TShowVoteCountRank = 12;
	TowerRank = 13;
	FlowerYesterdayRank = 14;
	FlowerTotalRank = 15;
	FirstPassRank = 16;
	DEProgressRank = 17;
	SpritePowerPointRank = 18;
	PetPowerPointRank = 19;
	FlowerThisWeekRank = 20;
	NestWeekRank = 21;
	LeagueTeamRank = 22;
	CrossLeagueRank = 23;
	HeroBattleRank = 24;
	MilitaryRank = 25;
	LastWeek_PkRank = 26;
	LastWeek_NestWeekRank = 27;
	LastWeek_HeroBattleRank = 28;
	LastWeek_LeagueTeamRank = 29;
	SkyCraftRank = 30;
	PkRank2v2 = 31;
	FlowerActivityRank = 32;
	BigMeleeRank = 33;
	BioHelllRank = 34;
	CompeteDragonRank = 35;
	SurviveRank = 36;
	SkyCityRank = 37;
	WorldBossGuildRoleRank = 38;
}

enum MythShopOP{
	MythShopQuery = 1;
	MythShopBuy = 2;
	MythShopRefresh = 3;
}

enum SystemRewardType{
	RewardDinner = 1;
	RewardSupper = 2;
	RewardArena = 3;
	RewardWorldBoss = 4;
	RewardChargeFirst = 5;
	RewardGuildBoss = 6;
	RewardGuildBossRole = 7;
	RewardPk = 8;
	RewardVip = 101;
	RewardMonthCard = 102;
	RewardMakeUp = 103;
	RewardArenaUp = 104;
	RewardGM = 105;
	RewardDegree = 106;
	RewardFashionPowerRank = 107;
}

enum TeamState{
	TEAM_WAITING = 0;
	TEAM_IN_BATTLE = 1;
	TEAM_VOTE = 2;
	TEAM_MATCH = 3;
}

enum TeamOperate{
	TEAM_CREATE = 1;
	TEAM_JOIN = 2;
	TEAM_LEAVE = 3;
	TEAM_TOGGLE_READY = 4;
	TEAM_QUERYCOUNT = 5;
	TEAM_KICK = 6;
	TEAM_START_BATTLE = 7;
	TEAM_START_BATTLE_AGREE = 8;
	TEAM_START_BATTLE_DISAGREE = 9;
	TEAM_CHANGE_EPXTEAMID = 10;
	TEAM_START_BATTLE_REMOVE_DISAGREE_MEMBER = 11;
	TEAM_INVITE = 12;
	TEAM_START_MATCH = 13;
	TEAM_STOP_MATCH = 14;
	TEAM_GET_FULL_DATA = 15;
	TEAM_DOWN_MATCH = 16;
	TEAM_BE_HELPER = 17;
	TEAM_QUIT_HELPER = 18;
	TEAM_PPTLIMIT = 19;
	TEAM_COSTTYPE = 20;
	TEAM_CHANGE_PASSWORD = 21;
	TEAM_TRAHS_LEADER = 22;
	TEAM_BATTLE_CONTINUE = 23;
	TEAM_USE_TICKET = 24;
	TEAM_MEMBER_TYPE = 25;
}

enum ExpTeamMemberState{
	EXPTEAM_IDLE = 0;
	EXPTEAM_READY = 1;
	EXPTEAM_DISAGREE = 2;
	EXPTEAM_FINISH = 3;
}

enum UnitAppearanceField{
	UNIT_BASIC = 15;
	UNIT_ATTR = 32;
	UNIT_FASHION = 64;
	UNIT_EQUIP = 128;
	UNIT_SKILL = 256;
	UNIT_EMBLEM = 512;
	UNIT_VIPLEVEL = 1024;
	UNIT_TIMELOGIN = 2048;
	UNIT_GUILD = 16384;
	UNIT_TITLE = 524288;
	UNIT_SPRITELEADER = 8388608;
	UNIT_SPRITE = 16777216;
	UNIT_PETS = 33554432;
	UNIT_ARTIFACT = 32768;
}

enum ChatChannel{
	WorldChannel = 1;
	GuildChannel = 2;
	PrivateChannel = 3;
	SystemChannel = 4;
	LampShortChannel = 5;
	LampLongChannel = 6;
	TeamChannel = 7;
	CampChannel = 8;
	SpectateChannel = 9;
	CurrentChannel = 10;
	PartnerChannel = 11;
	AudioChannel = 12;
	BattleChannel = 13;
	GroupChatChannel = 14;
}

enum LoginType{
	LOGIN_PASSWORD = 0;
	LOGIN_SNDA_PF = 1;
	LOGIN_QQ_PF = 2;
	LGOIN_WECHAT_PF = 3;
	LOGIN_IOS_GUEST = 4;
	LOGIN_IOS_AUDIT = 5;
}

enum FashionNTFType{
	ADD_FASHION = 1;
	UPGRADE_FASHION = 2;
	WEAR_FASHION = 3;
	DELBODY_FASHION = 4;
	DELBAG_FASHION = 5;
}

enum GuildSortType{
	GuildSortByLevel = 1;
	GuildSortByMemberCount = 2;
	GuildSortByName = 3;
	GuildSortByExp = 4;
	GuildSortByPrestige = 5;
}

enum GuildMemberFlag{
	SEND_FATIGUE = 1;
	RECV_FATIGUE = 2;
	RECVED_FATIGUE = 4;
	ONLINE = 8;
}

enum GuildLogType{
	GLog_Member = 1;
	GLog_CheckIn = 2;
	GLog_RedBonus = 3;
}

enum GuildLogEnum{
	GUILDLOG_MEMBER_START = 0;
	GuildLog_Join = 1;
	GuildLog_Leave = 2;
	GuildLog_ChangePosition = 3;
	GUILDLOG_MEMBER_END = 4;
	GUILDLOG_CHECKIN_START = 5;
	GUILDLOG_CHECKIN_END = 6;
	GUILDLOG_REDBONUS_START = 7;
	GUILDLOG_REDBONUS_END = 8;
	GuildLog_BossDps = 9;
}

enum GuildBonusType{
	GBONUS_LEVELUP = 1;
	GBONUS_CARDREWARD = 2;
	GBONUS_KILLDRAGON = 3;
	GBONUS_GUILDGOBLIN = 4;
	GBONUS_GUILDGOBLIN_LEVELUP = 5;
	GBONUS_CHECKIN = 6;
	GBONUS_TIANTIRANK = 7;
	GBONUS_KILLSTAGEDRAGON = 8;
	GBONUS_CHARGETIMES = 9;
	GBONUS_VIPLEVEL = 10;
	GBONUS_DRAWLOTTERY_TEN = 11;
	GBONUS_TITLE = 12;
	GBONUS_STRENGTHEN = 13;
	GBONUS_TOWER = 14;
	GBONUS_TIMEBONUS = 15;
	GBONUS_CHARGEPRIVILEGE = 16;
	GBONUS_PURCHASEFUND = 17;
	GBONUS_DRAGONJADEL_ALLLEVEL = 18;
	GBONUS_SKYARENA_FLOOR = 19;
	GBONUS_HORSE_QUALITY = 20;
	GBONUS_DRAGONNEST_SCENE = 21;
	GBONUS_GMF_RANK = 22;
	GBONUS_BOSSRUSH = 23;
	GBONUS_BUYIBSHOP = 24;
	GBONUS_MAYHEMRANK = 25;
	GBONUS_USETHREESUIT = 26;
	GBONUS_USEITEM = 27;
	GBONUS_MAX = 28;
}

enum BoxType{
	BOX_TYPE_NONE = 0;
	BOX_TYPE_GOLD = 3;
	BOX_TYPE_SILVER = 2;
	BOX_TYPE_COPPER = 1;
	BOX_TYPE_DIAMOND = 4;
}

enum FightGroupType{
	FightEnemy = 0;
	FightRole = 1;
	FightNeutral = 2;
	FightHostility = 3;
	FightDummy = 10;
}

enum XQTEState{
	QTE_None = 0;
	QTE_HitBackPresent = 1;
	QTE_HitBackStraight = 2;
	QTE_HitBackGetUp = 3;
	QTE_HitFlyPresent = 4;
	QTE_HitFlyLand = 5;
	QTE_HitFlyBounce = 6;
	QTE_HitFlyStraight = 7;
	QTE_HitFlyGetUp = 8;
	QTE_HitRollPresent = 9;
	QTE_HitRollStraight = 10;
	QTE_HitRollGetUp = 11;
	QTE_HitFreeze = 12;
}

enum SceneFinishState{
	SCENE_FINISH_NONE = 0;
	SCENE_FINISH_START = 1;
	SCENE_FINISH_PICK_ITEM = 2;
	SCENE_FINISH_SHOWRESULT = 3;
	SCENE_FINISH_DRAW_BOX = 4;
	SCENE_FINISH_END = 5;
}

enum FishingState{
	LEAVE = 1;
	SITDOWN = 2;
	CAST = 3;
	WAIT = 4;
	PULL = 5;
}

enum AuctionSortType{
	AUCTIONSORT_QUALITY_LESS = 1;
	AUCTIONSORT_QUALITY_GREATER = 2;
	AUCTIONSORT_LEVLE_LESS = 3;
	AUCTIONSORT_LEVEL_GREATER = 4;
	AUCTIONSORT_LEFTTIME_LESS = 5;
	AUCTIONSORT_LEFTTIME_GREATER = 6;
	AUCTIONSORT_BUYNOW_LESS = 7;
	AUCTIONSORT_BUYNOW_GREATER = 8;
	AUCTIONSORT_BIDDING_LESS = 9;
	AUCITONSORT_BIDDING_GREATER = 10;
	AUCTIONSORT_PERPRICE_LESS = 11;
	AUCTIONSORT_PERPRICE_GREATER = 12;
}

enum AuctionAccountType{
	AUCTACCOUNT_SALE_FAIL = 1;
	AUCTACCOUNT_SALE_SUCCESS = 2;
	AUCTACCOUNT_BUY_FAIL = 3;
	AUCTACCOUNT_BUY_SUCCESS = 4;
}

enum PetOP{
	PetFellow = 1;
	PetFight = 2;
	PetFeed = 3;
	PetTouch = 4;
	PetBorn = 5;
	PetUpdate = 6;
	PetRelease = 7;
	ExpandSeat = 8;
	PetExpTransfer = 9;
	useskillbook = 10;
	SetPetPairRide = 11;
	QueryPetPairRideInvite = 12;
	OffPetPairRide = 13;
	IgnorePetPairRideInvite = 14;
}

enum CampID{
	CAMP_DRAGON = 1;
	CAMP_KNIGHT = 2;
	CAMP_ADVENTURER = 3;
}

enum FortType{
	FORTTYPE_MAX = 1;
}

enum FortStatus{
	FORTSTATUS_MAX = 1;
}

enum AuctDBDataOperate{
	AUCTDBDATA_INSERT = 1;
	AUCTDBDATA_UPDATE = 2;
	AUCTDBDATA_DELETE = 3;
}

enum CampTaskType{
	CAMPTASK_ITEM = 1;
	CAMPTASK_SCENE = 2;
	CAMPTASK_PATROL = 3;
	CAMPTASK_SPY = 4;
}

enum CampTaskStatus{
	CAMPTASK_GET = 1;
	CAMPTASK_VIEW = 2;
	CAMPTASK_FINISH = 3;
	CAMPTASK_REWARD = 4;
}

enum AbyssFlameStage{
	ABYSS_NONE_FLAME = 1;
	ABYSS_ON_FLAME = 2;
	ABYSS_WIN_FLAME = 3;
}

enum ExpBackType{
	EXPBACK_ABYSSS = 1;
	EXPBACK_NEST = 2;
	EXPBACK_CAMPTASK = 3;
}

enum LogDBType{
	LOG_DB_NORMAL = 0;
	LOG_DB_TENCENT = 1;
}

enum buyextype{
	DIAMONE_BUY_DRAGONCOIN = 1;
	DIAMONE_BUY_GOLD = 2;
	DRAGONCOIN_BUY_GOLD = 3;
	DRAGON_BUY_FATIGUE = 4;
	DIAMOND_BUY_FATIGUE = 5;
	DRAGONCOIN_BUY_BLUEBIRD = 6;
	DIAMOND_EXCHANGE_DRAGONCOIN = 7;
}

enum DesignationType{
	DESIGNATION_TYPE_COMMON = 1;
	DESIGNATION_TYPE_RAID = 2;
	DESIGNATION_TYPE_NEST = 3;
	DESIGNATION_TYPE_BATTLE = 4;
	DESIGNATION_TYPE_ACTIVITY = 5;
}

enum AchieveType{
	ACHIEVE_TYPE_COMMON = 1;
	ACHIEVE_TYPE_RAID = 2;
	ACHIEVE_TYPE_NEST = 3;
	ACHIEVE_TYPE_BATTLE = 4;
	ACHIEVE_TYPE_ACTIVITY = 5;
}

enum RewardStatus{
	REWARD_STATUS_CANNOT = 0;
	REWARD_STATUS_CAN = 1;
	REWARD_STATUS_GOT = 2;
}

enum LevelSealButtonType{
	BUTTON_STATUS_NONE = 0;
	BUTTON_STATUS_LOCKED = 1;
	BUTTON_STATUS_UNLOCKED = 2;
}

enum PlatType{
	PLAT_IOS = 0;
	PLAT_ANDROID = 1;
}

enum GameAppType{
	GAME_APP_WECHAT = 1;
	GAME_APP_QQ = 2;
}

enum LoginRewardState{
	LOGINRS_CANNOT = 1;
	LOGINRS_HAVEHOT = 2;
	LOGINRS_HAVE = 3;
}

enum PvpReqType{
	PVP_REQ_IN_MATCH = 1;
	PVP_REQ_OUT_MATCH = 2;
	PVP_REQ_BASE_DATA = 3;
	PVP_REQ_HISTORY_REC = 4;
	PVP_REQ_GET_WEEKREWARD = 5;
}

enum FriendOpType{
	Friend_AgreeApply = 1;
	Friend_IgnoreApply = 2;
	Friend_FriendAll = 3;
	Friend_ApplyAll = 4;
	Friend_FriendAdd = 5;
	Friend_FriendDelete = 6;
	Friend_ApplyAdd = 7;
	Friend_ApplyDelete = 8;
	Friend_ReveiveGift = 9;
	Friend_SendGift = 10;
	Friend_TakeGift = 11;
	Friend_GiftInfo = 12;
}

enum FriendGiftSend{
	FriendGift_SendNone = 0;
	FriendGift_Sended = 1;
}

enum FriendGiftReceive{
	FriendGift_ReceiveNone = 0;
	FriendGift_Received = 1;
	FriendGift_ReceiveTaken = 2;
}

enum EnterSceneType{
	ENTER_SCENE_SELECT_ROLE = 1;
	ENTER_SCENE_SWITCH = 2;
}

enum RoleDataReadType{
	ROLE_DATA_READ_SELECT_ROLE = 1;
	ROLE_DATA_READ_IDIP = 2;
}

enum LeaveSceneType{
	LEAVE_SCENE_LOGOUT = 1;
	LEAVE_SCENE_SWITCH = 2;
}

enum InvHReqType{
	INVH_REQ_UNF_LIST = 1;
	INVH_UNF_IGNORE_ALL = 2;
	INVH_REFUSE_FORNOW = 3;
}

enum MulActivityTimeState{
	MULACTIVITY_BEfOREOPEN = 1;
	MULACTIVITY_RUNNING = 2;
	MULACTIVITY_END = 3;
	MULACTIVITY_UNOPEN_TODAY = 4;
}

enum XSkillSlot{
	Normal_Attack = 0;
	Dash_Attack = 1;
	Skill_1_Attack = 2;
	Skill_2_Attack = 3;
	Skill_3_Attack = 4;
	Skill_4_Attack = 5;
	Skill_5_Attack = 6;
	Skill_1_Buff = 7;
	Skill_2_Buff = 8;
	Ultra_Attack = 9;
	Attack_Max = 10;
}

enum LiveType{
	LIVE_RECOMMEND = 1;
	LIVE_PVP = 2;
	LIVE_NEST = 3;
	LIVE_PROTECTCAPTAIN = 4;
	LIVE_GUILDBATTLE = 5;
	LIVE_DRAGON = 6;
	LIVE_FRIEND = 7;
	LIVE_GUILD = 8;
	LIVE_FRIENDANDGUILD = 9;
	LIVE_HEROBATTLE = 10;
	LIVE_LEAGUEBATTLE = 11;
	LIVE_PVP2 = 12;
	LIVE_CUSTOMPK = 13;
	LIVE_MAX = 14;
}

enum BossRushReqStatus{
	BOSSRUSH_RESULT_WIN = 1;
	BOSSRUSH_RESULT_FAILED = 2;
	BOSSRUSH_REQ_BASEDATA = 3;
	BOSSRUSH_REQ_REFRESH = 4;
	BOSSRUSH_REQ_APPEARANCE = 5;
	BOSSRUSH_REQ_LEFTCOUNT = 6;
	BOSSRUSH_REQ_CONTINUE = 7;
}

enum StopMatchReason{
	STOPMATCH_NONE = 1;
	STOPMATCH_LEAVESCENE = 2;
	STOPMATCH_ENTER_TIANTI = 3;
	STOPMATCH_ENTER_BOWEIDUIZ = 4;
}

enum GuildMatchFightState{
	GUILD_MF_NONE = 1;
	GUILD_MF_WAITING = 2;
	GUILD_MF_REFUSE = 3;
	GUILD_MF_LEAVE = 4;
	GUILD_MF_FIGHTING = 5;
	GUILD_MF_FAILED = 6;
	GUILD_MF_WIN = 7;
	GUILD_MF_ERR = 100;
}

enum TeamInvRoleState{
	TIRS_IN_OTHER_TEAM = 1;
	TIRS_IN_MY_TEAM = 2;
	TIRS_IN_BATTLE = 3;
	TIRS_NORMAL = 4;
	TIRS_NOT_OPEN = 5;
	TIRS_COUNT_LESS = 6;
	TIRS_FATIGUE_LESS = 7;
}

enum ReadAccountDataType{
	READ_ACCOUNT_DATA_LOGIN = 1;
	READ_ACCOUNT_DATA_RETURN_SELECT_ROLE = 2;
	READ_ACCOUNT_DATA_IDIP = 3;
}

enum LogoutType{
	LOGOUT_ACCOUNT_NORMAL = 1;
	LOGOUT_RELOGIN_KICK_ACCOUNT = 2;
	LOGOUT_IDIP_KICK_ACCOUNT = 3;
	LOGOUT_RETURN_SELECT_ROLE = 4;
	LOGOUT_CHANGEPROFESSION = 5;
}

enum MailOpType{
	MAIL_OP_ADD = 1;
	MAIL_OP_UPDATE = 2;
	MAIL_OP_DELETE = 3;
	MAIL_OP_DELETE_ALL = 4;
}

enum WorldBossState{
	WorldBoss_BeginPre = 0;
	WorldBoss_Begin = 1;
	WorldBoss_Going = 2;
	WorldBoss_WaitEnd = 3;
	WorldBoss_End = 4;
}

enum GuildArenaState{
	GUILD_ARENA_NOT_BEGIN = 1;
	GUILD_ARENA_BEGIN = 2;
	GUILD_ARENA_BATTLE_ONE = 3;
	GUILD_ARENA_BATTLE_TWO = 4;
	GUILD_ARENA_BATTLE_FINAL = 5;
	GUILD_ARENA_END = 6;
}

enum GMFFailReason{
	GMF_FAIL_NONE = 0;
	GMF_FAIL_DIE = 1;
	GMF_FAIL_TIMEOVER = 2;
	GMF_FAIL_QUIT = 3;
	GMF_FAIL_REFRESE = 4;
}

enum PVP_ONEGAMEEND_REASON{
	PVP_OGE_LEADER_DIE = 1;
	PVP_OGE_LEADER_QUIT = 2;
	PVP_OGE_TIMELIMIT = 3;
	PVP_OGE_ROLE_QUIT = 4;
}

enum SynsMsType{
	SynsGuild = 1;
	SynsTeam = 2;
}

enum SynsMsSubType{
	SynsCreate = 1;
	SynsDestory = 2;
	SynsAdd = 3;
	SynsDel = 4;
	SynsLead = 5;
	SynsLevel = 6;
	SynsIcon = 7;
	SynAddExp = 8;
	SynSetTime = 9;
}

enum NoticeType{
	Notice_Role = 1;
	Notice_Team = 2;
	Notice_Guild = 3;
	Notice_World = 4;
	Notice_Partner = 5;
	Notice_Server = 6;
}

enum MSGiveItemType{
	MSItem_FriendGift = 1;
}

enum RoleState{
	Logoff = 0;
	LoadScene = 1;
	InHall = 2;
	InBattle = 3;
}

enum SyncTeamM2C{
	STM2C_CREATE_TEAM = 1;
	STM2C_ADD_MEMBER = 2;
	STM2C_DEL_MEMBER = 3;
	STM2C_ALL_DATA = 4;
	STM2C_TEAM_LIST = 5;
	STM2C_DESTROY = 6;
	STM2C_GETEXTRADATA = 7;
	STM2C_RESETCOST = 8;
	STM2C_TS_DISCONNECTED = 9;
}

enum PayCardType{
	WEEK_CARD = 1;
	MONTH_CARD = 2;
}

enum PayParamType{
	PAY_PARAM_NONE = 0;
	PAY_PARAM_LIST = 1;
	PAY_PARAM_AILEEN = 2;
	PAY_PARAM_CARD = 3;
	PAY_PARAM_FIRSTAWARD = 4;
	PAY_PARAM_GROWTH_FUND = 5;
	PAY_PARAM_MEMBER = 6;
}

enum PayButtonStatus{
	PAY_BUTTON_NONE = 0;
	PAY_BUTTON_OPEN = 1;
	PAY_BUTTON_CLICK = 2;
}

enum MSUseSumamryType{
	MSUS_GET = 1;
	MSUS_FREE = 2;
}

enum TeamEventG2M{
	TEAM_EVENT_BUYCOUNT = 1;
}

enum PkReqType{
	PKREQ_ADDPK = 1;
	PKREQ_REMOVEPK = 2;
	PKREQ_ALLINFO = 3;
	PKREQ_FETCHPOINTREWARD = 4;
}

enum AuctionReqType{
	AUCTION_ONSALE = 1;
	AUCTION_OUTSALE = 2;
	AUCTION_BUYNOW = 3;
}

enum PunishType{
	PUNISH_NONE = 0;
	PUNISH_USER_LOGIN = 1;
	PUNISH_USER_CHAT = 2;
	PUNISH_USER_TEMP = 3;
	PUNISH_USER_WORLDBOSS_RANK = 4;
	PUNISH_USER_ROLE_GUILDBOSS = 5;
	PUNISH_USER_PK_RANK = 6;
	PUNISH_USER_ARENA_RANK = 7;
	PUNISH_USER_TOWER = 8;
	PUNISH_USER_FLOWER_RANK = 9;
	PUNISH_USER_GUILD_RANK = 10;
	PUNISH_USER_GUILDBOSS_RANK = 11;
	PUNISH_USER_ZERO_PROFIT = 12;
	PUNISH_USER_DAILY_PLAY = 13;
	PUNISH_USER_MULTI_ACTIVITY = 14;
	PUNISH_USER_HG = 15;
}

enum PunishDataType{
	PUNISH_DATA_UPATE = 1;
	PUNISH_DATA_DELETE = 2;
}

enum ServerTag{
	SERVER_TAG_NORMAL = 1;
	SERVER_TAG_IOS_AUDIT = 2;
}

enum ItemFindBackType{
	TOWER = 1;
	NVSHENSHILIAN = 2;
	GUILDACTIVITY = 3;
	FATIGUE_RECOVER = 4;
	FATIGUE_GET = 5;
	FATIGUE_BUY = 6;
	DICE_BACK = 7;
	WUJINSHENYUAN_BACK = 8;
	DRAGONEXP_BACK = 9;
	QAMULTI_BACK = 10;
	GUILDCHECKIN_BACK = 11;
	GUILD_VOICE = 12;
	COMMERCETASK_BACK = 13;
	DayActiveBack = 14;
	NestBack = 15;
	FINDBACK_MAX = 16;
}

enum OutLookType{
	OutLook_Fashion = 0;
	OutLook_Equip = 1;
}

enum SpriteType{
	Sprite_Feed = 1;
	Sprite_Evolution = 2;
	Sprite_Awake = 3;
	Sprite_Awake_Retain = 4;
	Sprite_Awake_Replace = 5;
	Sprite_InFight = 6;
	Sprite_OutFight = 7;
	Sprite_Decompose = 8;
	Sprite_SwapLeader = 9;
	Sprite_QueryEvolutionPPT = 10;
	Sprite_Train = 11;
	Sprite_ResetTrain = 12;
	Sprite_Rebirth = 13;
}

enum RiskGridType{
	RISK_GRID_EMPTY = 1;
	RISK_GRID_NORMALREWARD = 2;
	RISK_GRID_REWARDBOX = 3;
	RISK_GRID_ADVENTURE = 4;
	RISK_GRID_DICE = 5;
	RISK_GRID_MAX = 6;
}

enum RiskBoxState{
	RISK_BOX_LOCKED = 1;
	RISK_BOX_UNLOCKED = 2;
	RISK_BOX_CANGETREWARD = 3;
	RISK_BOX_GETREWARD = 4;
	RISK_BOX_DELETE = 5;
}

enum DEProgressState{
	DEPS_FINISH = 1;
	DEPS_FIGHT = 2;
	DEPS_NOTOPEN = 3;
}

enum ReviveType{
	ReviveNone = 0;
	ReviveFree = 1;
	ReviveItem = 2;
	ReviveMoney = 3;
	ReviveSprite = 4;
	ReviveVIP = 5;
	ReviveMax = 6;
}

enum GuildOpType{
	STUDY_SKILL = 1;
	GUILD_DARE_INFO = 2;
}

enum AuctionAllReqType{
	ART_REQSALE = 1;
	ART_QUITSALE = 2;
	ART_RESALE = 3;
	ART_ALLITEMBRIEF = 4;
	ART_ITEMDATA = 5;
	ART_MYSALE = 6;
	ART_BUY = 7;
	ART_REFRESH_FREE = 8;
	ART_REFRESH_PAY = 9;
	ART_TRADE_PRICE = 10;
	ART_REFRESH_AUTO = 11;
}

enum ItemEnum{
	Virtual_Max = 50;
}

enum GuildCardOp{
	GuildCard_Query = 1;
	GuildCard_Start = 2;
	GuildCard_Change = 3;
	GuildCard_End = 4;
}

enum PkResultType{
	PkResult_Win = 1;
	PkResult_Lose = 2;
	PkResult_Draw = 3;
}

enum HallIconState{
	HICONS_BEGIN = 1;
	HICONS_END = 2;
}

enum TaskStatus{
	TaskStatus_CanTake = 1;
	TaskStatus_Taked = 2;
	TaskStatus_Finish = 3;
	TaskStatus_Over = 4;
}

enum SkyCityTimeType{
	Waiting = 1;
	Race = 2;
	MidleEndInRest = 3;
	FirstWaiting = 4;
	SecondWaiting = 5;
	SC_NONE = 6;
}

enum GMFReadyType{
	GMF_READY_UP = 1;
	GMF_READY_DOWN = 2;
	GMF_READY_KICK = 3;
}

enum CardMatchOp{
	CardMatch_Begin = 0;
	CardMatch_Add = 2;
	CardMatch_Del = 3;
	CardMatch_RoundBegin = 4;
	CardMatch_RoundChange = 5;
	CardMatch_RoundEnd = 6;
	CardMatch_End = 7;
	CardMatch_Query = 8;
	CardMatch_RoundWaiting = 9;
	CardMatch_SignUp = 10;
}

enum CardMatchState{
	CardMatch_StateBegin = 0;
	CardMatch_StateWaiting = 1;
	CardMatch_StateRoundWaiting = 2;
	CardMatch_StateRoundBegin = 3;
	CardMatch_StateRounding = 4;
	CardMatch_StateRoundEnd = 5;
	CardMatch_StateEnd = 6;
	CardMatch_StateDummy = 7;
}

enum GuildBindStatus{
	GBS_NotBind = 1;
	GBS_Owner = 2;
	GBS_Admin = 3;
	GBS_Member = 4;
	GBS_NotMember = 5;
}

enum GmfBattleState{
	GMF_BS_NONE = 4;
	GMF_BS_WAIT = 1;
	GMF_BS_FIGHT = 2;
	GMF_BS_RESULT = 3;
}

enum BroadCastType{
	BroadCastToAll = 1;
	BroadCastMax = 2;
}

enum ActOpenState{
	ActOpenState_NotOpen = 1;
	ActOpenState_Prepare = 2;
	ActOpenState_Running = 3;
	ActOpenState_Over = 4;
}

enum PlantGrowState{
	growDrought = 1;
	growPest = 2;
	growSluggish = 3;
	growCD = 4;
	growMature = 5;
	growCorrect = 6;
}

enum GardenPlayEventType{
	PLANT = 1;
	PLANT_STAGE = 2;
	PLANT_STATE_CHANGE = 3;
	BANQUET = 4;
	BANQUET_STAGE = 5;
	PLANT_DELETE = 6;
	PLANT_SPRITE = 7;
	PLANT_MATURE = 8;
	FISH_FACE = 9;
	FISH_RESULT = 10;
	FISH_STOP = 11;
}

enum GMF_FINAL_WIN_TYPE{
	GMF_FWY_NORMAL = 1;
	GMF_FWY_OPNONE = 2;
	GMF_FWY_RANK = 3;
}

enum RoleEventType{
	OnSendFriendGift = 1;
}

enum WageRewardState{
	cannot = 1;
	rewarded = 2;
	notreward = 3;
}

enum ItemUseOp{
	BagFind = 0;
	BodyFind = 1;
	FashionWear = 2;
	FashionOff = 3;
	Composite = 4;
	FashionSuitWear = 5;
	FashionSuitOff = 6;
	ItemBuffAdd = 7;
	FashionDisplayWear = 8;
	FashionDisplayOff = 9;
	FashionSuitDisplayWear = 10;
	FashionSuitDisplayOff = 11;
	ActivationFashion = 12;
	ActivationHairColor = 13;
	UseHairColor = 14;
}

enum ResWarTimeType{
	RealyTime = 1;
	RaceTime = 2;
	EndTime = 3;
	ResWarNone = 4;
}

enum ResWarResult{
	RESWAR_SUCESS = 1;
	RESWAR_FAIL = 2;
	RESWAR_FLAT = 3;
}

enum GuildAuctReqType{
	GART_ACT_TYPE = 1;
	GART_ITEM_TYPE = 2;
	GART_BUY_AUCT = 5;
	GART_BUY_NOW = 6;
	GART_AUCT_GUILD_HISTORY = 7;
	GART_AUCT_WORLD_HISTORY = 8;
}

enum GardenQuestType{
	MYSELF = 1;
	FRIEND = 2;
	GUILD = 3;
}

enum GuildArenaType{
	battleone = 1;
	battletwo = 2;
	battlethree = 3;
	battlefour = 4;
	battlefinal = 5;
	apply = 6;
	resttime = 0;
	notopen = 7;
}

enum StageRankCond{
	StageRankCond_Time = 1;
	StageRankCond_Hppercent = 2;
	StageRankCond_Found = 3;
	StageRankCond_Behit = 4;
	StageRankCond_NpcHp = 5;
	StageRankCond_Combo = 6;
	StageRankCond_KillEnemyScore = 7;
	StageRankCond_AliveTime = 8;
	StageRankCond_TotalKillEnemyScore = 9;
}

enum GuildAuctResultType{
	GA_RESULT_BUY_NOW = 1;
	GA_RESULT_BUY_AUCT = 2;
	GA_RESULT_TO_WORLD = 3;
}

enum IntegralState{
	integralready = 1;
	integralenterscene = 2;
	integralwatch = 3;
	integralend = 4;
}

enum ResWarState{
	ResWarExploreState = 1;
	ResWarCancelState = 2;
}

enum ServerFlag{
	ServerFlag_Maintain = 0;
	ServerFlag_New = 1;
	ServerFlag_Hot = 2;
	ServerFlag_Full = 3;
	ServerFlag_Recommend = 4;
	ServerFlag_Dummy = 5;
	ServerFlag_Smooth = 7;
}

enum EnumServerState{
	ServerState_Maintain = 0;
	ServerState_Smooth = 1;
	ServerState_Hot = 2;
	ServerState_Full = 3;
	ServerState_Recommend = 4;
	ServerState_Auto = 5;
}

enum OutLookStateType{
	OutLook_Normal = 0;
	OutLook_Sit = 1;
	OutLook_Dance = 2;
	OutLook_RidePet = 3;
	OutLook_Inherit = 4;
	OutLook_Fish = 5;
	OutLook_RidePetCopilot = 6;
	OutLook_Trans = 7;
}

enum FunctionId{
	FunctionId_QQVip = 0;
	FunctionId_IOSCheck = 1;
	FunctionId_StartPrivilege = 2;
}

enum LeaveTeamType{
	LTT_BY_SELF = 0;
	LTT_KICK = 1;
	LTT_DEL_ROBOT = 2;
	LTT_MS_CRASH = 3;
	LLT_LEADER_TIMEOVER = 4;
}

enum StartUpType{
	StartUp_Normal = 1;
	StartUp_QQ = 2;
	StartUp_WX = 3;
}

enum AntiAddictionReportType{
	ReportTypeSingle = 1;
	ReportTypeTotal = 2;
}

enum DBOperType{
	DBOper_Insert = 1;
	DBOper_Update = 2;
	DBOper_Del = 3;
	DBOper_DelAll = 4;
	DBOper_ReplaceId = 5;
}

enum MentorApplyStatus{
	MentorApplyMaster = 1;
	MentorApplyStudent = 2;
	MentorApplyHas = 3;
	MentorApplyStatusMax = 4;
}

enum MentorRelationStatus{
	MentorRelationIn = 1;
	MentorRelationComplete = 2;
	MentorRelationBreakApply = 3;
	MentorRelationBreak = 4;
	MentorRelationMax = 5;
}

enum MentorMsgApplyType{
	MentorMsgApplyMaster = 1;
	MentorMsgApplyStudent = 2;
	MentorMsgApplyInherit = 3;
	MentorMsgApplyReportTask = 4;
	MentorMsgApplyBreak = 5;
	MentorMsgApplyMax = 6;
}

enum MentorRelationOpType{
	MentorRelationOp_ApplyMaster = 1;
	MentorRelationOp_ApplyStudent = 2;
	MentorRelationOp_Inherit = 3;
	MentorRelationOp_ReportTask = 4;
	MentorRelationOp_ReportAllTask = 5;
	MentorRelationOp_Break = 6;
	MentorRelationOp_BreakCancel = 7;
	MentorRelationOp_NormalComplete = 8;
	MentorRelationOp_ForceComplete = 9;
	MentorRelationOp_Max = 10;
}

enum EMentorRelationPosition{
	EMentorPosMaster = 1;
	EMentorPosStudent = 2;
	EMentorPosMax = 3;
}

enum EMentorTaskStatus{
	EMentorTask_UnComplete = 1;
	EMentorTask_CanReport = 2;
	EMentorTask_AlreadyReport = 3;
	EMentorTask_ConfirmReport = 4;
	EMentorTask_CompleteBefore = 5;
	EMentorTask_Max = 6;
}

enum EMentorMsgOpType{
	EMentorMsgOp_Get = 1;
	EMentorMsgOpType_Clear = 2;
	EMentorMsgOpType_Agree = 3;
	EMentorMsgOpType_Reject = 4;
	EMentorMsgOpType_Max = 5;
}

enum PartnerUpdateType{
	PUType_Normal = 1;
	PUType_Leave = 2;
	PUType_Dissolve = 3;
	PUType_Shop = 4;
}

enum PartnerOperType{
	POT_Normal = 1;
	POT_Liveness = 2;
	POT_Leave = 3;
	POT_ApplyLeave = 4;
	POT_CancelLeave = 5;
	POT_Dissolve = 6;
}

enum InvFightReqType{
	IFRT_INV_ONE = 1;
	IFRT_REFUSH_ONE = 2;
	IFRT_IGNORE_ALL = 3;
	IFRT_REQ_LIST = 4;
	IFRT_ACCEPT_ONE = 5;
}

enum InvFightNotifyType{
	IFNT_REFUSE_ME = 1;
	IFNT_INVITE_ME = 2;
}

enum GCFReqType{
	GCF_JOIN_READY_SCENE = 1;
	GCF_FIGHT_REPORT = 2;
	GCF_FIGHT_RESULT = 3;
	GCF_JOIN_FIGHT_SCENE = 4;
}

enum GCFJvDianType{
	GCF_JUDIAN_UP = 1;
	GCF_JUDIAN_MID = 2;
	GCF_JUDIAN_DOWN = 3;
}

enum GCFZhanLingType{
	GCFZL_BEGIN = 1;
	GCFZL_BREAK = 2;
	GCFZL_END = 3;
}

enum GCFsynType{
	GCF_SYN_KILL = 1;
	GCF_SYN_LEAVE_BATTLE = 2;
	GCF_SYN_OCCUPY = 3;
	GCF_SYN_MUL_POINT = 4;
	GCF_SYN_FIGHT_END = 5;
	GCF_SYN_BACK_TO_READY = 6;
}

enum GUILDTERRTYPE{
	TERR_NOT_OPEN = 1;
	ALLIANCE = 2;
	TERR_WARING = 3;
	TERR_END = 4;
	WAITING = 5;
}

enum GCFG2CSynType{
	GCF_G2C_SYN_KILL_ONE = 1;
	GCF_G2C_SYN_MUL_POINT = 2;
	GCF_G2C_SYN_OCCUPY = 3;
	GCF_G2C_SYN_KILL_COUNT = 4;
}

enum UnitSpecialState{
	Unit_Puppet = 1;
	Unit_Invisible = 2;
}

enum PayAccessDataType{
	PayAccess_SaveAmt = 1;
	PayAccess_Other = 2;
	PayAccess_Send = 3;
	PayAccess_Consume = 4;
	PayAccess_ALL = 5;
}

enum BroadCastG2RType{
	BroadCastG2RType_MS = 1;
	BroadCastG2RType_NS = 2;
	BroadCastG2RType_DB = 3;
}

enum HeroBattleOver{
	HeroBattleOver_Win = 1;
	HeroBattleOver_Lose = 2;
	HeroBattleOver_Draw = 3;
}

enum LeagueBattleTimeState{
	LBTS_BeforeOpen = 1;
	LBTS_Apply = 2;
	LBTS_Idle = 3;
	LBTS_PointRace = 4;
	LBTS_Elimination = 5;
	LBTS_CrossIdle = 6;
	LBTS_CrossPointRace = 7;
	LBTS_CrossElimination = 8;
	LBTS_SeasonEnd = 9;
}

enum LeagueBattleReqType{
	LBReqType_Match = 1;
	LBReqType_CancelMatch = 2;
}

enum LeagueTeamState{
	LeagueTeamState_Idle = 1;
	LeagueTeamState_Match = 2;
	LeagueTeamState_Battle = 3;
}

enum LeagueBattleRoleState{
	LBRoleState_None = 1;
	LBRoleState_Waiting = 2;
	LBRoleState_Leave = 3;
	LBRoleState_Fighting = 4;
	LBRoleState_Win = 5;
	LBRoleState_Failed = 6;
}

enum LeagueBattleReadyOper{
	LBReady_Up = 1;
	LBReady_Down = 2;
}

enum LeagueBattleType{
	LeagueBattleType_RacePoint = 1;
	LeagueBattleType_Eliminate = 2;
	LeagueBattleType_CrossRacePoint = 3;
	LeagueBattleType_CrossEliminate = 4;
}

enum SkillTypeEnum{
	Skill_None = 0;
	Skill_Normal = 1;
	Skill_Big = 2;
	Skill_UnUsed = 3;
	Skill_SceneBuff = 4;
	Skill_Help = 5;
	Skill_Buff = 6;
}

enum LeagueBattleFightState{
	LBFight_None = 1;
	LBFight_Wait = 2;
	LBFight_Fight = 3;
	LBFight_Result = 4;
}

enum LBEleRoomState{
	LBEleRoomState_Idle = 1;
	LBEleRoomState_Fighting = 2;
	LBEleRoomState_Finish = 3;
}

enum GuildQAType{
	NO_GUILD = 0;
	BEFORE_OPEN = 1;
	IN_TIME_NOT_OPEN = 2;
	IN_TIME_OPENING = 3;
	AFTER_OPEN = 4;
	NOT_OPEN_DAY = 5;
}

enum CommentType{
	COMMENT_NEST = 1;
	COMMENT_DRAGON = 2;
	COMMENT_LADDER = 3;
	COMMENT_ATLAS = 4;
	COMMENT_PANDORA = 5;
	COMMENT_SPRITE = 6;
}

enum PersonalCarrerReqType{
	PCRT_HOME_PAGE = 1;
	PCRT_PVP_PKINFO = 2;
	PCRT_TROPHY = 3;
}

enum CarrerDataType{
	CARRER_DATA_LEVEL = 1;
	CARRER_DATA_NEST = 2;
	CARRER_DATA_DRAGON = 3;
	CARRER_DATA_CREATEROLE = 4;
}

enum MatchToWorldType{
	MTWT_ADD = 1;
	MTWT_DEL = 2;
	MTWT_MATCH_INWORLD = 3;
}

enum MentorTaskType{
	MentorTask_JoinGuild = 1;
	MentorTask_Jade = 2;
	MentorTask_Title = 3;
	MentorTask_Pandora = 4;
	MentorTask_StageTypeCount = 5;
	MentorTask_GuildCheckIn = 6;
	MentorTask_GuildAuctBenefit = 7;
	MentorTask_RiskStage = 8;
	MentorTask_ProtectCaptain = 9;
	MentorTask_TianTi = 10;
	MentorTask_Emblem = 11;
	MentorTask_DailyActive = 12;
	MentorTask_WorldBossCount = 13;
	MentorTask_BossRush = 14;
	MentorTask_StageStar = 15;
	MentorTask_SkyFloor = 16;
	MentorTask_TowerFloor = 17;
	MentorTask_WorldBossRank = 18;
	MentorTask_GuildBossCount = 19;
	MentorTask_DailyTask = 20;
	MentorTask_SkyCount = 21;
	MentorTask_AllEquipStengthen = 22;
	MentorTask_GuildTianTiCount = 23;
	MentorTask_MentorIntimacy = 24;
	MentorTask_IBShopBuy = 25;
	MentorTask_BuyPrivilege = 26;
	MentorTask_BuyFund = 27;
	MentorTask_BuyGift = 28;
	MentorTask_AllEquipQuality = 29;
	MentorTask_AuctBuy = 30;
	MentorTask_AuctSale = 31;
}

enum KKVsRoleState{
	KK_VS_ROLE_UNLOAD = 1;
	KK_VS_ROLE_NORMAL = 2;
	KK_VS_ROLE_DIE = 3;
	KK_VS_ROLE_QUIT = 4;
}

enum KMatchType{
	KMT_NONE = 0;
	KMT_EXP = 1;
	KMT_PVP = 2;
	KMT_HERO = 3;
	KMT_PK = 4;
	KMT_LEAGUE = 5;
	KMT_SKYCRAFT = 6;
	KMT_PKTWO = 7;
	KMT_MOBA = 8;
	KMT_WEEKEND_ACT = 9;
	KMT_CUSTOM_PKTWO = 10;
	KMT_SURVIVE = 11;
}

enum GiftIbItemState{
	GiftIbWaitingReceipt = 1;
	GiftIbReply = 2;
}

enum PayGiftIbStatus{
	PayGiftIbStatus_CreateBill = 1;
	PayGiftIbStatus_Fail = 2;
	PayGiftIbStatus_Success = 3;
	PayGiftIbStatus_SuccessNotAddItem = 4;
}

enum MysqlOpType{
	MYSQL_OP_ADD = 1;
	MYSQL_OP_UPDATE = 2;
	MYSQL_OP_DELETE = 3;
}

enum ArenaStarType{
	AST_PK = 1;
	AST_HEROBATTLE = 2;
	AST_WEEKNEST = 3;
	AST_LEAGUE = 4;
}

enum ArenaStarReqType{
	ASRT_ROLEDATA = 1;
	ASRT_DIANZAN = 2;
}

enum SkyTeamState{
	SkyTeamState_Idle = 1;
	SkyTeamState_Match = 2;
	SkyTeamState_Battle = 3;
}

enum SkyCraftMatchReqTpe{
	SCMR_Match = 1;
	SCMR_CancelMatch = 2;
}

enum SkyCraftMatchNtfType{
	SCMN_Start = 1;
	SCMN_Stop = 2;
	SCMN_Timeout = 3;
}

enum SkyCraftType{
	SCT_RacePoint = 1;
	SCT_Eliminate = 2;
}

enum SCEliRoundType{
	SCEliRound_None = 0;
	SCEliRound_8to4 = 1;
	SCEliRound_4to2 = 2;
	SCEliRound_2to1 = 3;
}

enum TeamMemberType{
	TMT_NORMAL = 1;
	TMT_HELPER = 2;
	TMT_USETICKET = 3;
}

enum WeekReportDataType{
	WeekReportData_GuildSign = 1;
	WeekReportData_WorldBoss = 2;
	WeekReportData_GuildRisk = 3;
	WeekReportData_GuildArena = 4;
	WeekReportData_GuildBoss = 5;
	WeekReportData_GuildTerryitory = 6;
}

enum LeagueEliType{
	LeagueEliType_None = 1;
	LeagueEliType_Self = 2;
	LeagueEliType_Cross = 3;
}

enum QueryResWarEnum{
	RESWAR_FLOWAWARD = 1;
	RESWAR_BATTLE = 2;
}

enum CustomBattleOp{
	CustomBattle_Query = 1;
	CustomBattle_Create = 2;
	CustomBattle_Join = 3;
	CustomBattle_Match = 4;
	CustomBattle_Reward = 5;
	CustomBattle_ClearCD = 6;
	CustomBattle_QueryRandom = 7;
	CustomBattle_QueryOne = 8;
	CustomBattle_DoCreate = 9;
	CustomBattle_DoJoin = 10;
	CustomBattle_UnJoin = 11;
	CustomBattle_UnMatch = 12;
	CustomBattle_Modify = 13;
	CustomBattle_QuerySelf = 14;
	CustomBattle_StartNow = 15;
	CustomBattle_DoClearCD = 16;
	CustomBattle_Drop = 17;
	CustomBattle_Search = 18;
}

enum CustomBattleScale{
	CustomBattle_Scale_Friend = 1;
	CustomBattle_Scale_Guild = 2;
	CustomBattle_Scale_Server = 3;
	CustomBattle_Scale_All = 4;
}

enum CustomBattleType{
	CustomBattle_PK_Normal = 1;
	CustomBattle_PKTwo_Normal = 2;
}

enum CustomBattleState{
	CustomBattle_Ready = 1;
	CustomBattle_Going = 2;
	CustomBattle_End = 3;
	CustomBattle_Destory = 4;
}

enum CustomBattleRoleState{
	CustomBattle_RoleState_Ready = 1;
	CustomBattle_RoleState_Join = 2;
	CustomBattle_RoleState_Reward = 3;
	Custombattle_RoleState_Taken = 4;
}

enum SaveHistIbGiftEnum{
	SaveIbGift_All = 1;
	SaveIbGift_Self = 2;
	SaveIbGift_Target = 3;
}

enum GuildCampItemOperate{
	SWINGUPITEM = 1;
	SWINGDOWNITEM = 2;
	CANCEL = 3;
	CONFIRM = 4;
	AUDIOCHAT = 5;
	TEXTCHAT = 6;
}

enum GuildCampPartyTradeType{
	TRADE_INVITATION = 1;
	UPDATA_TRADE_STATUS = 2;
}

enum GiftIbShipStatus{
	GIFTIB_NOT_SHIPPED = 0;
	GIFTIB_BEING_SHIPPED = 1;
	GIFTIB_FINISH_SHIPPED = 2;
}

enum EmblemSlotType{
	EmblemSlotType_None = 0;
	EmblemSlotType_Attri = 1;
	EmblemSlotType_Skill = 2;
	EmblemSlotType_ExtraSkill = 3;
}

enum KMatchOp{
	KMATCH_OP_START = 1;
	KMATCH_OP_STOP = 2;
}

enum BagType{
	EquipBag = 1;
	EmblemBag = 2;
	ArtifactBag = 3;
	ItemBag = 4;
}

enum CustomBattleTag{
	CustomBattle_Tag_Friend = 1;
	CustomBattle_Tag_Guild = 2;
	CustomBattle_Tag_Cross = 3;
	CustomBattle_Tag_GM = 4;
}

enum PkNVNType{
	PK_1v1 = 1;
	PK_2v2 = 2;
}

enum ForgeOpType{
	Forge_Equip = 1;
	Forge_Replace = 2;
	Forge_Retain = 3;
}

enum HeroKillUnitType{
	HeroKillUnit_Hero = 1;
	HeroKillUnit_Enemy = 2;
}

enum MobaOp{
	MobaOp_LevelSkill = 1;
	MobaOp_Upgrade = 2;
}

enum DHRState{
	DHR_CANNOT = 1;
	DHR_CAN_HAVEHOT = 2;
	DHR_CAN_HAVE = 3;
}

enum DHRReqOp{
	DHR_OP_LIST = 1;
	DHR_OP_FETCH_REWARD = 2;
	DHR_OP_WANT_BE_HELP = 3;
	DHR_OP_WANT_NOT_HELP = 4;
}

enum PetOtherOp{
	DoPetPairRide = 1;
	InvitePetPairRide = 2;
	AgreePetPairRide = 3;
}

enum ArtifactComposeType{
	ArtifactCompose_Single = 1;
	ArtifactCompose_Multi = 2;
}

enum WeddingState{
	WeddingState_Prepare = 1;
	WeddingState_Running = 2;
}

enum WeddingType{
	WeddingType_Normal = 1;
	WeddingType_Luxury = 2;
}

enum MarriageOpType{
	MarriageOpType_MarryApply = 1;
	MarriageOpType_MarryAgree = 2;
	MarriageOpType_MarryRefuse = 3;
	MarriageOpType_Divorce = 4;
	MarriageOpType_DivorceCancel = 5;
	MarriageOpType_Max = 6;
}

enum MarriageStatus{
	MarriageStatus_Null = 1;
	MarriageStatus_Marriaged = 2;
	MarriageStatus_WeddingHoldingNoCar = 3;
	MarriageStatus_WeddingHoldedNoCar = 4;
	MarriageStatus_WeddingCarNoWedding = 5;
	MarriageStatus_WeddingHoldingAndCar = 6;
	MarriageStatus_WeddingHoldedAndCar = 7;
	MarriageStatus_DivorceApply = 8;
	MarriageStatus_Divorced = 9;
	MarriageStatus_Max = 10;
}

enum WeddingInviteOperType{
	Wedding_Invite = 1;
	Wedding_Apply = 2;
	Wedding_AgreeApply = 3;
	Wedding_DisagreeApply = 4;
	Wedding_PermitStranger = 5;
	Wedding_ForbidStranger = 6;
	Wedding_CarCutScene = 7;
	Wedding_Start = 8;
}

enum MarriagePos{
	MarriagePos_Null = 1;
	MarriagePos_Husband = 2;
	MarriagePos_Wife = 3;
	Marriage_Max = 4;
}

enum WeddingOperType{
	WeddingOper_Flower = 1;
	WeddingOper_Fireworks = 2;
	WeddingOper_ApplyVows = 3;
	WeddingOper_AgreeVows = 4;
	WeddingOper_DisAgreeVows = 5;
	WeddingOper_VowsPrepare = 6;
	WeddingOper_VowsStart = 7;
	WeddingOper_FlowerRewardOverMax = 8;
	WeddingOper_FireworksRewardOverMax = 9;
	WeddingOper_CandyRewardOverMax = 10;
	WeddingOper_Candy = 11;
	WeddingOper_RoleNum = 12;
}

enum ArtifactDeityStoveOpType{
	ArtifactDeityStove_Recast = 1;
	ArtifactDeityStove_Fuse = 2;
	ArtifactDeityStove_Inscription = 3;
}

enum DragonWeakType{
	DragonWeakType_Null = 1;
	DragonWeakType_Pass = 2;
	DragonWeakType_NotPass = 3;
	DragonWeakType_Max = 4;
}

enum BattleFieldType{
	BATTLE_FIELD_READY_ENTER = 1;
	BATTLE_FIELD_READY_LEAVE = 2;
}

enum DragonGuildTaskType{
	TASK_NORMAL = 1;
	TASK_ACHIVEMENT = 2;
}

enum DragonGuildTaskConditionType{
	TASK_PASS_SCENE = 1;
	TASK_PASS_NODIE = 2;
	TASK_TIME_SPAN = 3;
	TASK_PASS_PARTNER_COUNT = 4;
}

enum DragonGuildSortType{
	DragonGuildSortByLevel = 1;
	DragonGuildSortByMemberCount = 2;
	DragongGuildSortByTotalPPT = 3;
	DragonGuildSortBySceneID = 4;
	DragonGuildSortByName = 5;
	DragonGuildSortByLeaderName = 6;
}

enum DragonGuildUpdateType{
	DUType_AddMember = 1;
	DUType_LeaveMember = 2;
	DUType_Dissmiss = 3;
	DUType_ShopRefresh = 4;
	DUType_Level = 5;
}

enum CompeteDragonOpArg{
	CompeteDragon_GetInfo = 1;
	CompeteDragon_GetReward = 2;
}

enum TaskConnType{
	TaskConn_ItemID = 1;
	TaskConn_StageID = 2;
	TaskConn_MonsterID = 3;
	TaskConn_ItemTypeQuality = 4;
	TaskConn_Activity = 5;
	TaskConn_WorldBossRank = 6;
	TaskConn_StageType = 7;
}

enum TaskActivityType{
	TaskActType_Dragonexp = 1;
	TaskActType_Tower = 2;
	TaskActType_SuperRisk = 3;
	TaskActType_SkyCityRound = 4;
	TaskActType_BigmeleeKill = 5;
	TaskActType_BigmeleeScore = 6;
	TaskActType_GuildBoss = 7;
	TaskActType_HeroBattleWin = 8;
	TaskActType_PkWin = 9;
	TaskActType_Help = 10;
	TaskActType_DonateItem = 11;
	TaskActType_Fish = 12;
	TaskActType_GardenSteal = 13;
	TaskActType_GardenHarvest = 14;
	TaskActType_Cooking = 15;
	TaskActType_Banquet = 16;
	TaskActType_JoinBanquet = 17;
	TaskActType_WorldBoss = 18;
}

enum PeriodTaskType{
	PeriodTaskType_Daily = 1;
	PeriodTaskType_Weekly = 2;
}

enum TaskOper{
	TaskOper_Set = 1;
	TaskOper_Add = 2;
	TaskOper_Del = 3;
}

enum NpcFlReqType{
	NPCFL_GIVE_GIFT = 1;
	NPCFL_EXCHANGE = 2;
	NPCFL_BASE_DATA = 3;
	NPCFL_NPC_LEVEL_UP = 4;
	NPCFL_UNITE_ACT = 5;
	NPCFL_BUY_GIFT_COUNT = 6;
}

enum NpcFlItemType{
	NPCFL_ITEM_NORMAL = 1;
	NPCFL_ITEM_RANDOM = 2;
	NPCFL_ITEM_TRIGGER_FAVOR = 3;
}

enum DailyRefreshOperType{
	DROT_Refresh = 1;
	DROT_Refuse = 2;
	DROT_BuyCount = 3;
	DROT_AskHelp = 4;
}

enum DailyTaskIconType{
	DailyTaskIcon_AskHelp = 1;
	DailyTaskIcon_BeHelp = 2;
}

enum SurviveFightEndType{
	SURVIVE_LOAD_TIMEOUT = 1;
	SURVIVE_DIE = 2;
	SURVIVE_QUIT = 3;
	SURVIVE_WIN = 4;
}

enum SurviveFightStage{
	SURVIVE_STAGE_READY = 1;
	SURVIVE_STAGE_FIGHT = 2;
}

enum BackFlowActOp{
	BackFlowAct_TreasureData = 1;
	BackFlowAct_GetTreasure = 2;
	BackFlowAct_ShopData = 3;
	BackFlowAct_ShopBuy = 4;
	BackFlowAct_ShopUpdate = 5;
}

message LoadAccountData{
	optional string account = 1;
	optional bytes role1 = 2;
	optional bytes role2 = 3;
	optional bytes role3 = 4;
	optional bytes role4 = 5;
	optional uint32 selectSlot = 6;
	optional bytes role5 = 7;
	optional bytes role6 = 8;
	optional bytes role7 = 9;
	optional bytes role8 = 10;
	optional bytes role9 = 11;
}

message LoginChallenge{
	optional string challenge = 1;
	optional uint64 session = 2;
}

message ErrorInfo{
	optional uint32 errorno = 1;
	repeated uint32 param = 2;
	optional uint64 param64 = 3;
	optional bool istip = 4;
}

message SceneRequest{
	optional uint32 sceneID = 1;
	optional uint64 roleID = 2;
	optional uint32 fortID = 3;
}

message UnitAppearance{
	optional uint64 uID = 1;
	optional string unitName = 2;
	optional uint32 unitType = 3;
	optional Vec3 position = 4;
	optional float direction = 5;
	optional Attribute attributes = 6;
	repeated uint32 fashion = 7;
	optional uint32 waveID = 8;
	optional bool isServerControl = 9;
	repeated SkillInfo skills = 10;
	repeated Item equip = 11;
	optional uint32 level = 12;
	optional uint32 PowerPoint = 13;
	repeated Item emblem = 14;
	optional uint32 fightgroup = 15;
	repeated BuffInfo buffs = 16;
	optional bool IsDead = 17;
	optional OutLook outlook = 18;
	optional uint32 viplevel = 19;
	optional uint32 lastlogin = 20;
	optional uint32 nickid = 21;
	optional bool isnewmob = 22;
	repeated uint32 bindskills = 23;
	optional AllBuffsInfo allbuffsinfo = 24;
	repeated SpriteInfo sprites = 25;
	optional PetSingle pet = 26;
	optional uint64 hostid = 27;
	optional EntityCategory category = 28;
	optional uint32 paymemberid = 29;
	optional UnitAppearanceTeam team = 30;
	optional uint32 specialstate = 31;
	repeated Item artifact = 32;
	optional bool mobshieldable = 33;
	optional bool forcedisappear = 34;
}

message UnitAppearList{
	repeated UnitAppearance units = 1;
}

message SyncTimeArg{
	optional int64 time = 1;
}

message SyncTimeRes{
	optional int64 serverTime = 1;
}

message MoveInfo{
	optional int32 Common = 1;
	optional int32 PosXZ = 2;
	optional int32 DesXZ = 3;
}

message SkillDataUnit{
	optional uint32 SkillID = 1;
	optional uint64 Target = 2;
	optional int32 ManualFace = 3;
	optional int32 Slot = 4;
}

message SkillReplyDataUnit{
	optional uint32 SkillID = 1;
	optional uint32 PIndex = 2;
	repeated TargetHurtInfo TargetList = 3;
	optional uint64 FirerID = 4;
	optional uint64 BulletID = 5;
	optional uint64 BulletExtraID = 6;
}

message SceneCfg{
	optional uint32 SceneID = 1;
	optional int32 SyncMode = 2;
	repeated UnitAppearance enemyWaves = 3;
	repeated DoodadInfo doodads = 4;
	optional uint64 ownerID = 5;
	repeated uint32 preloadEnemyIDs = 6;
	optional bool isWatcher = 7;
	optional bool canMorph = 8;
}

message DeathInfo{
	optional uint64 Killer = 1;
	optional uint64 uID = 2;
	optional bool showSlowCamera = 3;
	optional ReviveType type = 4;
	optional uint32 revivecount = 5;
	optional uint32 costrevivecount = 6;
}

message ChangedAttribute{
	optional uint64 time = 1;
	optional uint64 uID = 2;
	repeated int32 AttrID = 3;
	repeated double AttrValue = 4;
	optional bool showHUD = 5;
	optional bool needHUD = 6;
	optional uint64 CasterID = 7;
}

message SkillLevelupArg{
	optional uint32 skillHash = 1;
}

message SkillLevelupRes{
	optional uint32 errorcode = 1;
}

message LevelChanged{
	optional uint32 level = 1;
	optional uint64 exp = 2;
	optional uint64 maxexp = 3;
	repeated uint32 attrid = 4;
	repeated uint32 attroldvalue = 5;
	repeated uint32 attrnewvalue = 6;
}

message ItemChanged{
	repeated Item NewItems = 1;
	repeated Item AttrChangeItems = 2;
	repeated uint64 RemoveItems = 3;
	repeated uint64 SwapItems = 4;
	repeated uint64 ChangeItems = 5;
	repeated int32 VirtualItemID = 6;
	repeated int64 VirtualItemCount = 7;
	repeated Item recyleadditems = 8;
	repeated uint64 recylechangeitems = 9;
	optional bool IsRearrange = 10;
}

message TutorialInfo{
	optional uint32 tutorialID = 1;
}

message Systems{
	repeated uint32 sysIDs = 1;
	repeated uint32 closeSysIDs = 2;
}

message AchivementInfo{
	optional uint32 achivementID = 1;
	optional uint32 state = 2;
}

message FetchAchiveArg{
	optional uint32 AchivementID = 1;
}

message FetchAchiveRes{
	optional ErrorCode Result = 1;
}

message SelectChestArg{
	optional uint32 chestIdx = 1;
}

message SelectChestRes{
	repeated BattleRewardChest rewards = 1;
	optional ErrorCode errcode = 2;
}

message TaskOPArg{
	optional int32 taskOP = 1;
	optional int32 taskID = 2;
}

message TaskOPRes{
	optional bool result = 1;
	optional ErrorCode errorcode = 2;
}

message ResetSkillArg{
	optional ResetType resetType = 1;
}

message ResetSkillRes{
	optional ErrorCode errorcode = 1;
	optional RoleType prof = 2;
}

message ChooseProfArg{
	optional RoleType prof = 1;
}

message ChooseProfRes{
	optional ErrorCode errorcode = 1;
}

message SkillChangedData{
	repeated uint32 newSkill = 1;
	repeated uint32 newSkillLevel = 2;
	repeated uint32 removeSkill = 3;
	repeated uint32 changedSkillHash = 4;
	repeated uint32 changedSkillLevel = 5;
	optional int32 skillpoint = 6;
	repeated uint32 skillSlot = 7;
	optional int32 skillType = 8;
	optional uint32 skillpointtwo = 9;
}

message BingSkillArg{
	optional int32 slot = 1;
	optional uint32 skillhash = 2;
}

message BindSkillRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 skillslot = 2;
}

message QueryLotteryCDArg{
}

message QueryLotteryCDRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cooldown = 2;
	optional uint32 goldbuycount = 3;
	optional uint32 goldbuycooldown = 4;
	optional uint32 goldbaodi = 5;
	optional uint32 coinbaodi = 6;
}

message DrawLotteryArg{
	optional uint32 type = 1;
}

message DrawLotteryRes{
	optional ErrorCode errorcode = 1;
	repeated ItemBrief Items = 2;
	optional uint32 nextgoodcount = 3;
	repeated uint32 spriteppt = 4;
}

message EnhanceItemArg{
	optional uint64 UniqueItemId = 1;
	optional uint32 ProtectType = 2;
}

message EnhanceItemRes{
	optional ErrorCode ErrorCode = 1;
	repeated ComAgate comagates = 2;
	optional bool isEnd = 3;
	repeated AttributeInfo nextAttrs = 4;
}

message QuerySceneDayCountArg{
	repeated uint32 groupid = 1;
	optional uint32 type = 2;
}

message QuerySceneDayCountRes{
	repeated uint32 sceneid = 1;
	repeated uint32 scenecout = 2;
	repeated uint32 scenebuycount = 3;
	repeated uint32 chestOpenedScene = 4;
	optional ErrorCode errorcode = 5;
}

message ClientQueryRankListArg{
	optional uint32 RankType = 1;
	optional uint32 TimeStamp = 2;
	optional uint32 profession = 3;
	optional uint64 guildid = 4;
	optional int32 firstPassID = 5;
	optional uint32 sendPunishData = 6;
}

message ClientQueryRankListRes{
	optional uint32 RankType = 1;
	optional uint32 TimeStamp = 2;
	optional RankList RankList = 3;
	optional ErrorCode ErrorCode = 4;
	optional RankData RoleRankData = 5;
	optional uint32 RankAllCount = 6;
}

message GMCmdArg{
	optional string cmd = 1;
	repeated string args = 2;
}

message GMCmdRes{
	optional bool result = 1;
	optional string outputMessage = 2;
	optional bytes datablob = 3;
}

message DecomposeEquipmentArg{
	repeated uint64 equipuniqueid = 1;
	repeated uint32 count = 2;
}

message DecomposeEquipmentRes{
	optional ErrorCode ErrorCode = 1;
	repeated float param = 2;
}

message ReconnArg{
	optional uint64 session = 1;
	optional uint32 sceneid = 2;
	optional uint64 roleid = 3;
}

message ReconnRes{
	optional ErrorCode result = 1;
}

message EmblemLevelUpArg{
	repeated uint64 EmblemUniqueId = 1;
}

message EmblemLevelUpRes{
	optional ErrorCode ErrorCode = 1;
	optional bool islevelup = 2;
}

message UseItemArg{
	optional uint64 uid = 1;
	optional uint32 count = 2;
	optional uint32 OpType = 3;
	repeated uint64 uids = 4;
	optional uint32 itemID = 5;
	optional uint64 petid = 6;
	optional uint32 suit_id = 7;
	optional uint32 color_id = 8;
}

message UseItemRes{
	optional ErrorCode ErrorCode = 1;
	repeated ItemBrief ResultItems = 2;
	optional uint64 uid = 3;
	optional BagExpandData expand = 4;
}

message FashionChanged{
	optional uint64 roleID = 1;
	repeated uint32 position = 2;
	repeated uint32 newItemID = 3;
}

message JadeComposeArg{
	optional uint32 ComposeType = 1;
	optional uint64 JadeUniqueId = 2;
	optional uint64 EquipUniqueId = 3;
	optional uint32 SlotPos = 4;
	optional uint32 AddLevel = 5;
}

message JadeOperationRes{
	optional ErrorCode ErrorCode = 1;
}

message JadeOperationArg{
	optional uint32 OperationType = 1;
	optional uint64 EquipUniqueId = 2;
	optional uint64 JadeUniqueId = 3;
	optional uint32 Pos = 4;
}

message JadeComposeRes{
	optional ErrorCode ErrorCode = 1;
}

message CheckinArg{
}

message CheckinRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 DayCheckInfo = 2;
	optional uint32 DayCanCheck = 3;
	optional uint32 DayMakeUp = 4;
	optional uint32 Bonus = 5;
	optional uint32 StartDay = 6;
}

message CheckinInfoNotify{
	optional uint32 DayCheckInfo = 1;
	optional uint32 DayCanCheck = 2;
	optional uint32 DayMakeUp = 3;
	repeated uint32 ItemId = 4;
	repeated uint32 ItemCount = 5;
	optional uint32 StartDay = 6;
	optional bool IsOddMonth = 7;
}

message ActivityRoleNotify{
	optional ActivityRecord ActivityRecord = 1;
}

message GetActivityChestRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 ChestGetInfo = 2;
	repeated uint32 ItemId = 3;
	repeated uint32 ItemCount = 4;
}

message GetActivityChestArg{
	optional uint32 ChestIndex = 1;
}

message FashionComposeArg{
	optional uint32 fashion_id = 1;
	optional string uid1 = 2;
	optional string uid2 = 3;
}

message FashionComposeRes{
	optional ErrorCode result = 1;
}

message BuyJadeSlotArg{
	optional uint64 EquipUId = 1;
}

message BuyJadeSlotRes{
	optional ErrorCode ErrorCode = 1;
}

message GetUnitAppearanceArg{
	optional uint64 roleid = 1;
	optional int32 mask = 2;
	optional uint32 type = 3;
	optional uint64 petId = 4;
}

message GetUnitAppearanceRes{
	optional UnitAppearance UnitAppearance = 1;
	optional ErrorCode errorcode = 2;
}

message PayInfo{
	optional uint64 TotalPay = 1;
	optional uint32 PayIDFlag = 2;
	optional uint32 MonthCardLeftDay = 3;
	optional uint32 LastMonthCardTimeStamp = 4;
	optional uint32 vipLevel = 5;
	optional uint32 vippoint = 6;
}

message GetSystemRewardArg{
	optional uint64 RewardUniqueId = 1;
}

message RewardChanged{
	repeated RewardInfo AddedRewardInfo = 1;
	repeated uint64 RemovedRewardUniqueId = 2;
}

message GetSystemRewardRes{
	optional ErrorCode ErrorCode = 1;
}

message BuyGoldFatInfo{
	optional uint32 day = 1;
	optional int32 BuyGoldCount = 2;
	repeated int32 BuyFatigueCount = 3;
	optional int32 BuyDragonCount = 4;
	optional BackFlowBuy backflow = 5;
}

message SweepArg{
	optional uint32 sceneID = 1;
	optional uint32 count = 2;
}

message SweepRes{
	optional ErrorCode result = 1;
	repeated SweepResult rewards = 2;
	optional int32 abyssleftcount = 3;
	optional bool isexpseal = 4;
}

message ReviveArg{
	optional uint32 selectBuff = 1;
	optional ReviveType type = 2;
	optional ClientReviveInfo clientinfo = 3;
}

message ReviveRes{
	optional ErrorCode result = 1;
	repeated uint32 bufflist = 2;
}

message QueryShopItemArg{
	optional uint32 type = 1;
	optional bool isrefresh = 2;
}

message QueryShopItemRes{
	repeated ShopItem ShopItem = 1;
	optional ErrorCode errorcode = 2;
	optional uint32 refreshcount = 3;
	optional uint32 cooklevel = 4;
}

message BuyShopItemRes{
	optional ErrorCode ErrorCode = 1;
}

message BuyShopItemArg{
	optional uint64 ItemUniqueId = 1;
	optional uint32 count = 2;
}

message FetchTeamListArg{
	repeated uint32 categoryID = 1;
	optional uint32 expID = 2;
}

message FetchTeamListRes{
	repeated TeamBrief teams = 1;
	repeated TeamFullDataNtf TheTeams = 2;
	optional ErrorCode errcode = 3;
}

message TeamOPArg{
	optional TeamOperate request = 1;
	optional int32 teamID = 2;
	optional string password = 3;
	optional uint32 expID = 4;
	optional uint64 roleid = 5;
	optional TeamExtraInfo extrainfo = 6;
	optional uint64 param = 7;
	optional TeamMemberType membertype = 8;
	optional string account = 9;
	optional bool isplatfriend = 10;
}

message TeamOPRes{
	optional ErrorCode result = 1;
	optional uint64 problem_roleid = 2;
	optional int32 GoddessGetRewardsCount = 3;
	repeated TeamCountClient teamcount = 4;
	optional int32 weeknestexpid = 5;
	optional uint32 opentime = 6;
	optional uint32 wnrewardleftcount = 7;
	optional uint32 wnrewardmaxcount = 8;
}

message TeamChanged{
	optional TeamBrief teamBrief = 1;
	repeated uint64 leaveMember = 2;
	repeated TeamMember addMember = 3;
	repeated TeamMember chgstateMember = 4;
}

message ReviveInfo{
	optional uint64 roleID = 1;
	repeated uint32 bufflist = 2;
	optional ReviveType type = 3;
}

message BuyGoldAndFatigueArg{
	optional buyextype type = 1;
	optional uint32 fatigueID = 2;
	optional uint32 count = 3;
}

message BuyGoldAndFatigueRes{
	optional ErrorCode result = 1;
}

message GetWorldBossStateArg{
	optional uint32 type = 1;
}

message GetWorldBossStateRes{
	optional uint32 TimeLeft = 1;
	optional uint32 BossHp = 2;
	optional uint32 BossId = 3;
}

message AddTempAttrArg{
	optional uint32 type = 1;
}

message AddTempAttrRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 count = 2;
}

message ReviveCountdownInfo{
	optional int32 countdownTime = 1;
	optional uint32 revivecost = 2;
	optional uint32 revivecosttype = 3;
}

message FatigueRecoverTimeInfo{
	repeated uint32 fatigueID = 1;
	repeated uint32 timeleft = 2;
}

message EnterSceneCoolDownQuery{
	repeated uint32 groupid = 1;
	optional uint32 type = 2;
}

message EnterSceneCoolDownNotify{
	repeated uint32 groupid = 1;
	repeated uint32 cooldown = 2;
}

message ChatNotify{
	optional ChatInfo chatinfo = 1;
}

message QueryOpenGameArg{
}

message QueryOpenGameRes{
	optional uint32 timeLeft = 1;
	optional ErrorCode errcode = 2;
}

message FashionChangedData{
	optional FashionNTFType changeType = 1;
	repeated FashionData fashion = 2;
	optional uint32 special_effects_id = 3;
}

message QueryGateArg{
	optional string token = 1;
	optional string account = 2;
	optional string password = 3;
	optional LoginType type = 4;
	optional string pf = 5;
	optional string openid = 6;
	optional PlatType platid = 7;
	optional string version = 8;
}

message QueryGateRes{
	optional bytes loginToken = 1;
	optional bytes gateconfig = 2;
	optional string userphone = 3;
	optional LoginGateData RecommandGate = 4;
	repeated SelfServerData servers = 5;
	optional uint32 loginzoneid = 6;
	repeated LoginGateData allservers = 7;
	optional bool in_white_list = 8;
	optional PlatNotice notice = 9;
	optional ErrorCode error = 10;
	optional PlatBanAccount baninfo = 11;
	optional bool freeflow = 12;
	optional int32 cctype = 13;
	repeated PlatFriendServer platFriendServers = 14;
	repeated uint32 bespeakserverids = 15;
}

message AddFriendArg{
	optional uint64 friendroleid = 1;
	optional string name = 2;
}

message AddFriendRes{
	optional ErrorCode errorcode = 1;
	optional Friend2Client frienddata = 2;
}

message RemoveFriendArg{
	optional uint64 friendroleid = 1;
}

message RemoveFriendRes{
	optional ErrorCode errorcode = 1;
}

message OperateRecord{
	optional uint32 position = 1;
	optional string arg = 2;
	optional string account = 3;
}

message AddBlackListArg{
	optional uint64 otherroleid = 1;
	optional string name = 2;
}

message AddBlackListRes{
	optional ErrorCode errorcode = 1;
	optional Friend2Client black = 2;
}

message RemoveBlackListArg{
	optional uint64 otherroleid = 1;
}

message RemoveBlackListRes{
	optional ErrorCode errorcode = 1;
}

message RandomFriendWaitListArg{
	optional string match = 1;
}

message RandomFriendWaitListRes{
	repeated uint64 roleid = 1;
	repeated uint32 profession = 2;
	repeated string name = 3;
	repeated uint32 level = 4;
	repeated uint32 powerpoint = 5;
	repeated uint32 viplevel = 6;
	optional ErrorCode errorcode = 7;
	repeated uint32 lastlogin = 8;
	repeated uint64 guildid = 9;
	repeated string guildname = 10;
	repeated uint32 nickid = 11;
	repeated uint32 titleid = 12;
}

message BlackListReport{
}

message BlackListNtf{
	repeated Friend2Client blacklist = 1;
}

message SendFlowerArg{
	optional uint64 roleid = 1;
	optional uint32 count = 2;
	optional uint32 sendItemID = 3;
	optional uint32 costItemID = 4;
	optional uint32 costItemNum = 5;
}

message ShowFlowerPageRes{
	optional uint32 allcount = 1;
	optional uint32 weekcount = 2;
	optional uint32 weekrank = 3;
	optional uint32 cansendcount = 4;
	repeated uint32 cansendstate = 5;
	repeated uint64 recordroleid = 6;
	repeated uint32 recordcount = 7;
	repeated uint32 recordtime = 8;
	repeated string recordname = 9;
	optional string rolename = 10;
	optional uint32 roleprofession = 11;
	repeated uint64 otherroleid = 12;
	repeated string othername = 13;
	repeated uint32 othercount = 14;
	repeated uint32 otherprofession = 15;
	repeated uint32 updegreelevel = 16;
	repeated MapIntItem sendFlowersTotal = 17;
	repeated FlowerInfo2Client sendLog = 18;
	repeated MapIntItem receiveFlowersTotal = 19;
	repeated ReceiveRoleFlowerInfo2Client receiveRank = 20;
	optional ErrorCode errorcode = 21;
}

message ShowFlowerPageArg{
	optional uint64 roleid = 1;
}

message SendFlowerRes{
	optional ErrorCode errorcode = 1;
	optional uint32 fatigue = 2;
}

message FetchGuildListArg{
	optional int32 start = 1;
	optional int32 count = 2;
	optional int32 reason = 3;
	optional int32 sortType = 4;
	optional bool reverse = 5;
	optional string name = 6;
}

message FetchGuildListRes{
	repeated GuildInfo guilds = 1;
	optional ErrorCode errorcode = 2;
}

message FetchChapterChestArg{
	optional int32 chapterID = 1;
	optional int32 chestID = 2;
}

message FetchChapterChestRes{
	optional ErrorCode result = 1;
}

message RoleStateReport{
	repeated uint64 roleid = 1;
	repeated uint32 state = 2;
	repeated uint32 timelastlogin = 3;
}

message RoleStateNtf{
	repeated uint64 roleid = 1;
	repeated uint32 state = 2;
	repeated uint32 timelastlogin = 3;
}

message CreateOrJoinGuild{
	optional bool iscreate = 1;
	optional uint64 gid = 2;
	optional string gname = 3;
	optional int32 icon = 4;
}

message CreateOrJoinGuildRes{
	optional ErrorCode result = 1;
	optional uint64 gid = 2;
	optional string name = 3;
}

message FetchGAPPArg{
}

message FetchGAPPRes{
	optional ErrorCode result = 1;
	repeated uint64 roleid = 2;
	repeated string rolename = 3;
	repeated uint32 ppt = 4;
	repeated uint32 time = 5;
	repeated uint32 level = 6;
	repeated RoleType profession = 7;
}

message GuildApprovalArg{
	optional uint64 roleid = 1;
	optional int32 type = 2;
}

message GuildApprovalRes{
	optional ErrorCode result = 1;
}

message LeaveGuildArg{
	optional uint64 roleID = 1;
}

message LeaveGuildRes{
	optional ErrorCode result = 1;
}

message ChangeGuildSettingArg{
	optional int32 Icon = 1;
	optional int32 powerpoint = 2;
	optional int32 needapproval = 3;
	optional string annoucement = 4;
}

message ChangeGuildSettingRes{
	optional ErrorCode result = 1;
}

message GuildMemberInfo{
	optional uint64 roleid = 1;
	optional int32 position = 2;
	optional int32 contribute = 3;
	optional uint32 updateTime = 4;
	optional uint32 groupFightContribute = 5;
	optional uint32 joinTime = 6;
	optional GuildBindStatus bind_status = 7;
	optional uint32 update_bind_time = 8;
}

message MyGuild{
	optional uint64 gid = 1;
	optional int32 position = 2;
	optional int32 level = 3;
	optional uint32 icon = 4;
	optional string name = 5;
}

message GuildSettingChanged{
	optional int32 Icon = 1;
	optional int32 RecuitPPT = 2;
	optional int32 needApproval = 3;
	optional string annoucement = 4;
}

message GuildBriefArg{
	optional uint64 guildid = 1;
}

message GuildBriefRes{
	optional string name = 1;
	optional string leaderName = 2;
	optional string annoucement = 3;
	optional uint64 leaderID = 4;
	optional int32 level = 5;
	optional int32 membercount = 6;
	optional int32 capacity = 7;
	optional int32 icon = 8;
	optional ErrorCode result = 9;
	optional uint32 recuritppt = 10;
	optional int32 needApproval = 11;
	optional uint32 exp = 12;
	optional int32 rank = 13;
	optional uint32 activity = 14;
	optional uint32 activityOne = 15;
	optional uint32 activityTwo = 16;
	optional uint32 activityThree = 17;
	optional uint32 prestige = 18;
}

message GuildMemberArg{
	optional uint64 guildid = 1;
}

message GuildMemberRes{
	optional ErrorCode result = 1;
	repeated GuildMemberData members = 2;
	optional uint32 recvFatigue = 3;
	optional uint32 FatigueMax = 4;
	repeated uint64 guildinheritid = 5;
}

message StartGuildCardArg{
}

message StartGuildCardRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 card = 2;
	optional uint32 result = 3;
	optional uint32 store = 4;
}

message QueryGuildCardArg{
}

message QueryGuildCardRes{
	optional uint32 playcount = 1;
	optional uint32 changecount = 2;
	optional uint32 canplaycount = 3;
	optional uint32 canchangecount = 4;
	optional uint32 allcount = 5;
	optional uint32 canallcount = 6;
	optional uint32 bestresult = 7;
	repeated uint32 bestcards = 8;
	optional uint32 buychangcount = 9;
	optional string bestrole = 10;
	optional ErrorCode errorcode = 11;
}

message ChangeGuildCardArg{
	optional uint32 card = 1;
}

message ChangeGuildCardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 card = 2;
	optional uint32 result = 3;
}

message EndGuildCardArg{
}

message EndGuildCardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 result = 2;
}

message ChangeGuildPositionArg{
	optional uint64 roleid = 1;
	optional int32 position = 2;
}

message ChangeGuildPositionRes{
	optional ErrorCode result = 1;
}

message GetOtherGuildBriefArg{
	optional uint64 roleid = 1;
}

message GetOtherGuildBriefRes{
	optional ErrorCode errorcode = 1;
	optional string guildname = 2;
	optional string leadername = 3;
	optional uint64 leaderid = 4;
	optional uint32 guildlevel = 5;
	optional uint32 icon = 6;
	optional string announcement = 7;
	optional uint32 currentcount = 8;
	optional uint32 allcount = 9;
}

message GuildHistoryArg{
}

message GuildHistoryRes{
	optional ErrorCode result = 1;
	repeated GHisRecord records = 2;
}

message LoginArg{
	optional uint32 gameserverid = 1;
	optional bytes token = 2;
	optional string ios = 3;
	optional string android = 4;
	optional string pc = 5;
	optional string openid = 6;
	optional ClientInfo clientInfo = 7;
	optional uint32 loginzoneid = 8;
}

message LoginRes{
	optional ErrorCode result = 1;
	optional string version = 2;
	optional LoadAccountData accountData = 3;
	optional uint32 function_open = 4;
	optional LoginExtraData data = 5;
	optional LoginReconnectInfo rinfo = 6;
}

message GuildFatigueArg{
	optional int32 optype = 1;
	optional uint64 targetID = 2;
}

message GuildFatigueRes{
	optional ErrorCode result = 1;
	optional int32 totalsend = 2;
	optional int32 totalrecv = 3;
}

message QueryGuildCheckinArg{
}

message QueryGuildCheckinRes{
	optional uint32 checkincount = 1;
	optional uint32 allcount = 2;
	optional uint32 checkin = 3;
	optional uint32 boxmask = 4;
	optional ErrorCode errorcode = 5;
}

message GuildCheckinArg{
	optional uint32 type = 1;
}

message GuildCheckinRes{
	optional ErrorCode errorcode = 1;
}

message GetGuildCheckinBoxArg{
	optional uint32 index = 1;
}

message GetGuildCheckinBoxRes{
	optional ErrorCode errorcode = 1;
}

message GuildCheckinBoxNtf{
	optional uint32 processbar = 1;
	optional uint32 boxmask = 2;
}

message StageCountResetArg{
	optional uint32 groupid = 1;
}

message StageCountResetRes{
	optional ErrorCode errorcode = 1;
}

message GetGuildCheckinRecordsArg{
}

message GetGuildCheckinRecordsRes{
	repeated uint64 roleid = 1;
	repeated string name = 2;
	repeated uint32 type = 3;
	repeated uint32 timestamp = 4;
	optional ErrorCode errorcode = 5;
}

message GetGuildBonusListArg{
}

message GetGuildBonusListResult{
	repeated GuildBonusAppear bonusList = 1;
	optional ErrorCode errorcode = 2;
}

message GetGuildBonusDetailInfoArg{
	optional uint32 bonusID = 1;
}

message GetGuildBonusDetailInfoResult{
	optional GuildBonusAppear bonusInfo = 1;
	optional string content = 2;
	repeated GetGuildBonusInfo getBonusRoleList = 3;
	optional ErrorCode errorcode = 4;
	optional uint32 bonusNum = 5;
	optional uint32 bonusContentType = 6;
	optional uint64 leaderID = 7;
	optional uint64 luckestID = 8;
	optional bool canThank = 9;
}

message GetGuildBonusRewardArg{
	optional uint32 bonusID = 1;
}

message GetGuildBonusRewardResult{
	optional uint32 getValue = 1;
	optional ErrorCode errorcode = 2;
	optional int32 bonusType = 3;
}

message OpenSceneChestArg{
	optional uint32 sceneID = 1;
}

message OpenSceneChestRes{
	optional ErrorCode result = 1;
}

message ChatOfflineNotify{
	repeated ChatInfo rolechat = 1;
	repeated ChatInfo guildchat = 2;
	repeated ChatInfo worldchat = 3;
	repeated ChatInfo teamchat = 4;
	optional PrivateChatList privatechatlist = 5;
	repeated ChatInfo partnerchat = 6;
	repeated ChatInfo groupchat = 7;
}

message GuildBestCardsNtf{
	optional uint32 bestresult = 1;
	repeated uint32 bestcards = 2;
	optional string bestrole = 3;
	optional uint32 type = 4;
	optional uint32 match_type = 5;
}

message ExecuteLevelScriptNtf{
	optional string script = 1;
}

message ReportBattleArg{
	optional BattleData battledata = 1;
}

message ReportBattleRes{
	optional ErrorCode result = 1;
}

message OnlineRewardNtf{
	repeated uint32 state = 1;
	repeated uint32 timeleft = 2;
}

message NextDayRewardNtf{
	optional uint32 state = 1;
	optional uint32 timeleft = 2;
}

message GetOnlineRewardArg{
	optional uint32 index = 1;
}

message GetOnlineRewardRes{
	optional ErrorCode errorcode = 1;
}

message GetNextDayRewardArg{
}

message GetNextDayRewardRes{
	optional ErrorCode errorcode = 1;
}

message OnlineRewardReport{
}

message NextDayRewardReport{
}

message HintNotify{
	repeated uint32 systemid = 1;
	optional bool isremove = 2;
}

message PositionCheckList{
	repeated PositionCheck positions = 1;
}

message ChatArg{
	optional ChatInfo chatinfo = 1;
}

message ChatRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cooldown = 2;
}

message EnemyDoodadInfo{
	optional int32 waveid = 1;
	optional int32 type = 2;
	optional uint32 id = 3;
	optional uint32 count = 4;
	optional Vec3 pos = 5;
	optional uint32 index = 6;
	optional uint32 dropperTemplateID = 7;
	optional uint64 roleid = 8;
}

message EnemyDropDoodadInfo{
	repeated EnemyDoodadInfo doodadInfo = 1;
}

message RollInfoRes{
	repeated RollInfo info = 1;
	optional ErrorCode errCode = 2;
}

message randomtask{
	optional int32 taskid = 1;
}

message TeamSelect{
	optional int64 roleid = 1;
	optional int32 index = 2;
}

message buffInfo{
	optional uint64 uid = 1;
	optional BuffInfo addbuff = 2;
	optional BuffInfo removebuff = 3;
	optional BuffInfo updatebuff = 4;
	optional AllBuffsInfo allbuffsinfo = 5;
}

message TeamInvite{
	optional uint32 inviteID = 1;
	optional uint32 invTime = 2;
	optional uint64 invguildid = 3;
	optional uint64 invdragonguildid = 4;
	optional uint64 invfromroleid = 5;
	optional uint64 invtoroleid = 6;
	optional string invfromrolename = 7;
	optional TeamBrief teambrief = 8;
}

message TeamInviteAck{
	optional bool accept = 1;
	optional uint32 inviteid = 2;
	optional string password = 3;
}

message OtherFetchDoodadRes{
	repeated RollInfo rollInfos = 1;
	optional EnemyDoodadInfo doodadInfo = 2;
}

message DelayInfo{
	optional uint32 delay = 1;
}

message PkPrepareNtf{
	optional uint32 beginorend = 1;
}

message PkTimeoutNtf{
	optional uint32 timeout = 1;
}

message SkillResultReqUnit{
	optional uint32 SkillID = 1;
	optional Vec3 Pos = 2;
	optional float Face = 3;
	optional int32 TriggerTime = 4;
	optional int32 ResultToken = 5;
	optional Vec3 ResultAt = 6;
	optional float ResultForward = 7;
	repeated uint64 TargetList = 8;
}

message GuildGoblinInfoArg{
}

message GuildGoblinInfoRes{
	optional int32 level = 1;
	optional int32 leftEnterCount = 2;
	optional int32 guildTotalKillCount = 3;
	repeated GuildGoblinRoleKillInfo memberRankInfo = 4;
	optional ErrorCode errorCode = 5;
}

message GuildGoblinSceneInfo{
	optional int32 killNum = 1;
	optional int32 contribute = 2;
}

message BulletUnitData{
	optional uint32 SkillId = 1;
	optional int32 TriggerTime = 2;
	optional int32 ResultToken = 3;
	optional Vec3 Pos = 4;
	optional float Face = 5;
	optional int32 AdditionalDegree = 6;
	optional uint64 BulletToken = 7;
	optional uint64 Target = 8;
}

message SkillBulletResultReqUnit{
	optional uint64 BulletId = 1;
	optional Vec3 ResultAt = 2;
	optional float ResultForward = 3;
	repeated uint64 TargetList = 4;
	optional bool IsCollided = 5;
}

message FinishStateInfo{
	optional SceneFinishState state = 1;
	optional int32 countdown = 2;
}

message PkRoleInfoNtf{
	repeated PkRoleInfo pkroleinfo = 1;
}

message CircleDrawGive{
	optional uint32 itemid = 1;
	optional uint32 index = 2;
}

message AddLevelScriptExtString{
	optional string extString = 1;
	optional uint32 sceneTempID = 2;
	optional int32 waveID = 3;
}

message SceneDamageRankNtf{
	repeated string name = 1;
	repeated float damage = 2;
	repeated uint64 roleid = 3;
}

message SceneLeftDoodad{
	repeated ItemBrief items = 1;
}

message ChangeSupplementReport{
	optional uint64 uniqueid = 1;
	optional uint32 slot = 2;
}

message ChangeSupplementNtf{
	optional ErrorCode errorcode = 1;
	repeated uint64 uniqueids = 2;
}

message UseSupplementReq{
	optional uint64 uniqueid = 1;
	optional uint32 itemid = 2;
}

message UseSupplementRes{
	optional ErrorCode errorcode = 1;
}

message SetRoleConfigReq{
	optional string type = 1;
	optional string value = 2;
}

message SetRoleConfigRes{
	optional ErrorCode errorcode = 1;
}

message QTEOperation{
	optional uint32 type = 1;
	optional uint64 monsterid = 2;
}

message FriendDegreeUpNtf{
	optional uint64 roleid = 1;
	optional string friendname = 2;
	optional uint32 orginlevel = 3;
	optional uint32 currentlevel = 4;
	optional uint32 currentleft = 5;
	optional uint32 daydegree = 6;
	optional uint32 alldegree = 7;
}

message Position{
	optional uint64 uid = 1;
	optional int32 pos_x = 2;
	optional int32 pos_y = 3;
	optional int32 pos_z = 4;
	optional int32 face = 5;
	optional bool bTransfer = 6;
}

message TeleportNoticeState{
	optional bool onnotice = 1;
}

message LevelUpSlotAttrArg{
	optional uint32 slot = 1;
	optional uint32 count = 2;
}

message LevelUpSlotAttrRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 uplevels = 2;
}

message AllyMatchRoleID{
	optional uint64 allyID = 1;
	optional uint64 roleID = 2;
}

message TeamFullDataNtf{
	optional bool hasTeam = 1;
	optional TeamBrief teamBrief = 2;
	repeated TeamMember members = 3;
}

message TShowTopListArg{
	optional int32 type = 1;
	optional int32 index = 2;
}

message TShowTopListRes{
	optional ErrorCode error = 1;
	repeated RoleBriefInfo rolesInfo = 2;
	optional bool isEnd = 3;
}

message RoleStateMatch{
	optional bool IsMatching = 1;
	optional StopMatchReason stopmatchreason1 = 2;
	optional KMatchType matchtype = 3;
}

message PetOperationRes{
	optional ErrorCode errorcode = 1;
	optional uint64 followpetid = 2;
	optional bool ismoodup = 3;
	optional bool ishuneryup = 4;
	repeated PetInviteInfo invite = 5;
}

message PetOperationArg{
	optional PetOP type = 1;
	optional uint64 uid = 2;
	optional ItemBrief food = 3;
	optional uint64 destpet_id = 4;
	optional bool setpairride = 5;
}

message PetChangeNotfiy{
	optional PetOP type = 1;
	repeated PetSingle pet = 2;
	optional uint32 delexp = 3;
	repeated petGetSkill getskills = 4;
	optional uint32 delskillid = 5;
}

message NewBattleResult{
	optional StageResultInfo stageInfo = 1;
	optional SpecialStageInfo specialStage = 2;
	repeated StageRoleResult roleReward = 3;
	optional bool isFinalResult = 4;
	optional StageWatchInfo watchinfo = 5;
	optional StageGuildInfo guildinfo = 6;
	optional bool isexpseal = 7;
}

message FetchMailArg{
	optional uint32 page = 1;
	optional uint32 count = 2;
}

message FetchMailRes{
	optional uint32 page = 1;
	optional uint32 pagecount = 2;
	repeated SMail mails = 3;
}

message MailOpArg{
	optional uint32 optype = 1;
	repeated uint64 uid = 2;
}

message MailOpRes{
	optional ErrorCode errorcode = 1;
	repeated uint64 expireuid = 2;
}

message BuyTeamSceneCountP{
	optional int32 type = 1;
}

message BuyTeamSceneCountRet{
	optional uint32 maxcount = 1;
	optional uint32 buycount = 2;
	optional uint32 entercount = 3;
	optional ErrorCode errcode = 4;
}

message ExpFindBackData{
	repeated ExpFindBackInfo expBackInfos = 1;
}

message ExpFindBackArg{
	optional bool isFree = 1;
}

message ExpFindBackRes{
	optional ErrorCode error = 1;
}

message AutoFight{
	optional bool autof = 1;
}

message GetTowerActivityTopArg{
}

message GetTowerActivityTopRes{
	optional ErrorCode error = 1;
	repeated TowerRecord infos = 2;
	optional int32 leftResetCount = 3;
}

message TowerSceneInfoData{
	optional int32 leftTime = 1;
	optional int32 curTowerFloor = 2;
	repeated ItemBrief items = 3;
}

message GetDesignationReq{
}

message GetDesignationRes{
	optional ErrorCode result = 1;
	optional uint32 coverDesignationID = 2;
	optional uint32 abilityDesignationID = 3;
	repeated bool dataList = 4;
	optional uint32 maxPPT = 5;
	optional string name = 6;
}

message SetDesignationReq{
	optional uint32 type = 1;
	optional uint32 designationID = 2;
}

message SetDesignationRes{
	optional ErrorCode result = 1;
	repeated bool dataList = 2;
	optional string name = 3;
}

message GetClassifyDesignationReq{
	optional uint32 type = 1;
}

message GetClassifyDesignationRes{
	optional ErrorCode result = 1;
	repeated StcDesignationInfo dataList = 2;
}

message CoverDesignationNtf{
	optional uint32 designationID = 1;
	optional string desname = 2;
}

message GetAchieveBrifInfoReq{
}

message GetAchieveBrifInfoRes{
	optional ErrorCode result = 1;
	optional uint32 achievePoint = 2;
	optional uint32 maxAchievePoint = 3;
	repeated AchieveBriefInfo dataList = 4;
	optional uint32 rewardId = 5;
}

message GetAchieveClassifyInfoReq{
	optional uint32 type = 1;
}

message GetAchieveClassifyInfoRes{
	optional ErrorCode result = 1;
	repeated StcAchieveInfo dataList = 2;
}

message ReachAchieveNtf{
	optional uint32 achieveID = 1;
}

message ReqAutoPlay{
	optional bool isautoplay = 1;
}

message RetAutoPlay{
	optional bool succ = 1;
}

message GetAchieveRewardReq{
	optional uint32 achieveID = 1;
}

message GetAchieveRewardRes{
	optional ErrorCode result = 1;
}

message ReachDesignationNtf{
	optional uint32 designationID = 1;
}

message GetLevelSealInfoArg{
}

message GetLevelSealInfoRes{
	optional ErrorCode errorcode = 1;
	optional LevelSealInfo levelSealData = 2;
}

message LevelSealInfo{
	optional uint32 type = 1;
	optional uint32 endTime = 2;
	optional uint32 unLockBossCount = 3;
	optional uint32 status = 4;
	optional uint32 totalCollectCount = 5;
	optional uint32 selfCollectCount = 6;
	optional int32 selfAwardCountIndex = 7;
}

message LevelSealOverExpArg{
}

message LevelSealOverExpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 m_uStatus = 2;
}

message ReconectSync{
	optional RoleAllInfo self = 1;
	repeated UnitAppearance units = 2;
	optional UnitAppearance selfAppearance = 3;
	optional DeathInfo deathinfo = 4;
	optional bool isautofight = 5;
	optional ReconnectScene scene = 6;
}

message GetAchievePointRewardReq{
	optional uint32 rewardId = 1;
}

message GetAchievePointRewardRes{
	optional ErrorCode result = 1;
}

message LoginRewardRet{
	repeated LoginReward rewards = 1;
	optional bool open = 2;
	optional uint32 logindayforreward = 3;
	optional uint32 sectoday = 4;
}

message LoginRewardGetReq{
	optional int32 day = 1;
}

message LoginRewardGetRet{
	optional ErrorCode ret = 1;
}

message OutLookChange{
	optional uint64 roleid = 1;
	optional OutLook outlook = 2;
}

message FiveRewardState{
	optional uint32 logindaycount = 1;
	optional LoginRewardState fivedayRS = 2;
	optional LoginRewardState twodayRS = 3;
	optional LoginRewardState threedayRS = 4;
	optional LoginRewardState sevendayRS = 5;
}

message FiveRewardRes{
	optional bool twoday = 1;
	optional bool fiveday = 2;
	optional bool threeday = 3;
	optional bool sevenday = 4;
}

message FiveRewardRet{
	optional ErrorCode ret = 1;
}

message NewGuildBonusData{
	optional bool showIconInScreen = 1;
}

message GuildCheckInBonusInfoArg{
}

message GuildCheckInBonusInfoRes{
	optional ErrorCode errorcode = 1;
	optional bool isCheckedIn = 2;
	optional int32 checkInNum = 3;
	optional int32 onlineNum = 4;
	optional int32 guildMemberNum = 5;
	repeated GuildBonusAppear checkInBonusInfo = 6;
	optional int32 leftAskBonusTime = 7;
	optional int32 timeofday = 8;
}

message SendGuildBonusArg{
}

message SendGuildBonusRes{
	optional ErrorCode errorcode = 1;
}

message AskForCheckInBonusArg{
}

message AskForCheckInBonusRes{
	optional ErrorCode errorcode = 1;
}

message ThanksForBonusArg{
	optional uint32 bonusID = 1;
}

message ThanksForBonusRes{
	optional ErrorCode errorcode = 1;
}

message PvpArg{
	optional PvpReqType type = 1;
}

message StepSyncInfo{
	repeated StepSyncData DataList = 1;
	optional uint32 StepFrame = 2;
}

message PvpRes{
	optional PvpBaseData basedata = 1;
	optional PvpHistory history = 2;
	optional PvpReqType reqtype = 3;
	optional ErrorCode err = 4;
}

message TssSdkAntiData{
	optional bytes anti_data = 1;
	optional uint32 anti_data_len = 2;
}

message QANotify{
	optional uint32 type = 1;
	optional bool is_playing = 2;
	optional bool is_over = 3;
}

message AgreeQAReq{
	optional bool agree = 1;
	optional uint32 type = 2;
}

message AgreeQARes{
	optional ErrorCode result = 1;
}

message PushQuestionNtf{
	optional uint32 qid = 1;
	optional uint32 serialNum = 2;
}

message GiveUpQuestionNtf{
}

message AnswerAckNtf{
	optional uint64 roleId = 1;
	optional string answer = 2;
	optional bool correct = 3;
	optional uint32 times = 4;
	optional uint32 rank = 5;
	optional uint64 audioUid = 6;
	optional uint32 answertime = 7;
	optional string userName = 8;
	optional uint32 coverDesignationId = 9;
	optional uint32 audioTime = 10;
	optional uint32 profession = 11;
}

message PvpBattleBeginData{
	optional int32 thisGameCount = 1;
	optional int32 allGameCount = 2;
	optional uint64 group1Leader = 3;
	optional uint64 group2Leader = 4;
	optional uint32 contiTime = 5;
}

message PvpBattleEndData{
	optional int32 wingroup = 1;
	optional bool isAllEnd = 2;
	optional PVP_ONEGAMEEND_REASON reason = 3;
}

message PvpBattleKill{
	optional uint64 killID = 1;
	optional uint64 deadID = 2;
	optional uint32 reviveTime = 3;
	optional int32 contiKillCount = 4;
	repeated uint64 assitids = 5;
}

message DoAddFriendArg{
	optional FriendOpType op = 1;
	repeated uint64 roleid = 2;
}

message DoAddFriendRes{
	optional ErrorCode errorcode = 1;
	repeated uint64 failedlist = 2;
}

message FriendOpNotify{
	optional FriendOpType op = 1;
	repeated Friend2Client friendlist = 2;
	repeated Friend2Client applylist = 3;
	repeated uint64 deletelist = 4;
	repeated uint64 deleteapplylist = 5;
	repeated uint64 senderid = 6;
	optional FriendGift giftcount = 7;
	repeated uint32 receivedtime = 8;
}

message GetFlowerLeftTimeArg{
}

message GetFlowerLeftTimeRes{
	optional ErrorCode errorCode = 1;
	optional int32 leftTime = 2;
	optional bool canGet = 3;
}

message GetFlowerArg{
}

message GetFlowerRes{
	optional ErrorCode errorCode = 1;
	optional int32 leftTime = 2;
	optional bool canGet = 3;
}

message GetFlowerRewardArg{
}

message GetFlowerRewardRes{
	optional ErrorCode errorCode = 1;
}

message FriendGiftOpArg{
	optional FriendOpType op = 1;
	repeated uint64 roleid = 2;
}

message FriendGiftOpRes{
	optional ErrorCode errorcode = 1;
}

message GetFlowerRewardListArg{
}

message GetFlowerRewardListRes{
	optional ErrorCode errorCode = 1;
	repeated RoleBriefInfo briefList = 2;
	optional bool canGetReward = 3;
}

message GetAudioListReq{
	repeated uint64 audioUidList = 1;
	optional uint32 rpcid = 2;
}

message GetAudioListRes{
	optional ErrorCode result = 1;
	repeated AudioBrief dataList = 2;
}

message UpLoadAudioReq{
	optional bytes audio = 1;
	optional bytes text = 2;
	optional uint32 srctype = 3;
	optional uint32 savetype = 4;
	optional bool iscross = 5;
	optional uint32 rpcid = 6;
	optional uint64 audiouid = 7;
}

message UpLoadAudioRes{
	optional ErrorCode result = 1;
	optional uint64 audiodownuid = 2;
}

message EnhanceTransterArg{
	optional uint64 originuid = 1;
	optional uint64 destuid = 2;
}

message EnhanceTransterRes{
	optional bool isperfect = 1;
	optional ErrorCode errorcode = 2;
}

message PvpNowGameData{
	optional int32 group1WinCount = 1;
	optional int32 group2WinCount = 2;
	optional int32 drawWinCount = 3;
	optional uint32 LeftTime = 4;
	optional bool isAllEnd = 5;
	optional uint64 group1Leader = 6;
	optional uint64 group2Leader = 7;
	repeated PvpNowUnitData nowUnitdData = 8;
	optional ErrorCode errcode = 9;
}

message roArg{
	optional bool bNoShowLog = 1;
}

message GetQADataReq{
}

message GetQADataRes{
	optional uint32 qid = 1;
	optional uint32  serialnum = 2;
	optional uint32 leftTime = 3;
	optional ErrorCode result = 4;
}

message QAOverNtf{
	optional uint32 total = 1;
	optional uint32 correct = 2;
	repeated ItemBrief dataList = 3;
}

message QARoomRankNtf{
	repeated QARoomRankData dataList = 1;
	optional uint32 myscore = 2;
}

message AskGuildSkillInfoArg{
}

message AskGuildSkillInfoReq{
	optional ErrorCode errorcode = 1;
	repeated GuildSkillData SkillLel = 2;
	optional int32 LastGuildExp = 3;
	repeated GuildSkillData roleSkills = 4;
}

message StudyGuildSkillArg{
	optional uint32 skillId = 1;
}

message StudyGuildSkillRes{
	optional ErrorCode errorcode = 1;
	optional uint32 skillId = 2;
	optional uint32 skillLel = 3;
	optional uint32 lastExp = 4;
}

message FMBArg{
}

message FMBRes{
	optional bool refuse = 1;
}

message FMDArg{
	optional uint64 quitRoleID = 1;
	optional string quitRoleName = 2;
}

message GetDragonTopInfoArg{
}

message GetDragonTopInfoRes{
	optional ErrorCode errorCode = 1;
	repeated DragonInfo2Client dragonInfo = 2;
}

message TeamInviteArg{
	optional int32 expid = 1;
}

message TeamInviteRes{
	repeated TeamInvRoleInfo friend = 1;
	repeated TeamInvRoleInfo guild = 2;
	repeated TeamInvRoleInfo rec = 3;
	optional ErrorCode errcode = 4;
}

message InviteRufuse{
	optional string name = 1;
}

message InvHistoryArg{
	optional InvHReqType type = 1;
}

message InvHistoryRes{
	repeated TeamInvite invUnfH = 1;
	optional ErrorCode ret = 2;
}

message ReceiveFlowerData{
	optional int32 itemID = 1;
	optional int32 itemCount = 2;
	optional uint64 sendRoleID = 3;
	optional string sendName = 4;
	optional int32 power = 5;
	optional int32 profession = 6;
	optional int32 vip = 7;
}

message StartBattleFailedRes{
	optional uint64 proUserID = 1;
	optional ErrorCode reason = 2;
}

message IdentifyEmblemArg{
	optional uint64 uid = 1;
}

message IdentifyEmblemRes{
	optional ErrorCode errorcode = 1;
}

message OpenGuildQAReq{
}

message OpenGuildQARes{
	optional ErrorCode result = 1;
}

message GetGuildQADataReq{
}

message GetGuildQADataRes{
	optional ErrorCode result = 1;
	optional uint32 status = 2;
	optional uint32 time = 3;
}

message CreateRoleNewArg{
	optional RoleType type = 1;
	optional string name = 2;
}

message CreateRoleNewRes{
	optional ErrorCode result = 1;
	optional RoleAllInfo roleData = 2;
}

message MulActivityArg{
	optional int32 acid = 1;
}

message MulActivityRes{
	repeated MulActivitInfo actinfo = 1;
	optional int32 myguildlevel = 2;
	optional ErrorCode errcode = 3;
}

message SelectRoleNewArg{
	optional int32 index = 1;
}

message SelectRoleNewRes{
	optional ErrorCode result = 1;
	optional int32 banTime = 2;
	optional int32 endTime = 3;
	optional string reason = 4;
}

message InvUnfState{
	optional int32 inviteID = 1;
	optional bool isdeleted = 2;
}

message SelectRoleNtfData{
	optional RoleAllInfo roleData = 1;
	optional uint32 serverid = 2;
	optional bool backflow_firstenter = 3;
}

message GetWatchInfoByIDArg{
	optional int32 type = 1;
}

message GetWatchInfoByIDRes{
	optional ErrorCode error = 1;
	optional int32 curTime = 2;
	repeated OneLiveRecordInfo liveRecords = 3;
}

message OneLiveRecordInfo{
	optional uint32 liveID = 1;
	optional int32 DNExpID = 2;
	optional int32 watchNum = 3;
	optional int32 commendNum = 4;
	optional bool hasFriend = 5;
	optional int32 beginTime = 6;
	optional int32 tianTiLevel = 7;
	optional int32 guildBattleLevel = 8;
	repeated LiveNameInfo nameInfos = 9;
	optional LiveType liveType = 10;
	optional bool hasGuild = 11;
	optional bool canEnter = 12;
	optional uint32 sceneID = 13;
	optional uint32 curWatchNum = 14;
	optional uint32 mapID = 15;
	optional bool isCross = 16;
}

message GetMyWatchRecordArg{
}

message GetMyWatchRecordRes{
	optional ErrorCode error = 1;
	optional int32 myCommendedNum = 2;
	optional int32 myWatchedNum = 3;
	optional OneLiveRecordInfo myMostWatchedRecord = 4;
	optional OneLiveRecordInfo myMostCommendedRecord = 5;
	repeated OneLiveRecordInfo myRecentRecords = 6;
	optional bool visibleSetting = 7;
}

message EnterWatchBattleArg{
	optional uint32 liveID = 1;
	optional LiveType type = 2;
}

message EnterWatchBattleRes{
	optional ErrorCode error = 1;
	optional OneLiveRecordInfo liveInfo = 2;
}

message ChangeWatchRoleArg{
	optional uint64 roleID = 1;
}

message ChangeWatchRoleRes{
	optional ErrorCode error = 1;
}

message CommendWatchBattleArg{
}

message CommendWatchBattleRes{
	optional ErrorCode error = 1;
}

message AskGuildBossInfoArg{
}

message AskGuildBossInfoRes{
	optional ErrorCode errorcode = 1;
	optional uint32 bossId = 2;
	optional uint32 needKillBossId = 3;
	optional bool isFirstKill = 4;
	optional bool isLeader = 5;
	optional uint32 needguildlvl = 6;
}

message BossRushArg{
	optional BossRushReqStatus type = 1;
}

message BossRushRes{
	optional ErrorCode ret = 1;
	optional BossRushData data = 2;
	optional UnitAppearance bossApp = 3;
	optional int32 leftcount = 4;
}

message QAEnterRoomNtf{
	optional uint64 roleID = 1;
	optional string name = 2;
	optional uint32 profession = 3;
	optional uint32 vip = 4;
	optional uint32 time = 5;
	optional uint32 coverDesignationID = 6;
}

message DoEnterSceneArg{
	optional uint32 sceneid = 1;
}

message ReturnToSelectRoleArg{
}

message ReturnToSelectRoleRes{
	optional LoadAccountData accountData = 1;
}

message DoEnterSceneRes{
	optional uint32 fightgroup = 1;
	optional float face = 2;
	optional Vec3 pos = 3;
	repeated UnitAppearance otherunits = 4;
	optional bool iswatchend = 5;
	optional ErrorCode errorcode = 6;
	optional OutLookState state = 7;
	optional bool is_cross = 8;
	optional string battlestamp = 9;
	optional uint32 specialstate = 10;
	optional SSceneState scenestate = 11;
	optional LoginReconnectEnterSceneData lrdata = 12;
	optional float initface = 13;
}

message WatchBattleData{
	optional int32 watchNum = 1;
	optional int32 commendNum = 2;
}

message TakeOffAllJadeArg{
	optional uint64 uid = 1;
}

message TakeOffAllJadeRes{
	optional ErrorCode errorcode = 1;
}

message NoticeGuildBossEnd{
	optional bool isWin = 1;
}

message AskGuildArenaInfoArg{
}

message AskGuildArenaInfoReq{
	repeated guildArenaWarData warData = 1;
	repeated GuildInfo allguildInfo = 2;
	optional GuildArenaState timeState = 3;
	optional ErrorCode errorcode = 4;
}

message AdjustGuildArenaRolePosArg{
	optional uint32 pos = 1;
	optional uint64 roleId = 2;
}

message AdjustGuildArenaRolePosRes{
	optional ErrorCode errorCode = 1;
	repeated GuildDarenaUnit fightunits = 2;
}

message UpdateGuildArenaState{
	optional uint32 warType = 1;
	optional uint32 battleId = 2;
	optional uint32 state = 3;
}

message SweepTowerArg{
	optional int32 hardLevel = 1;
	optional ItemBrief cost = 2;
}

message SweepTowerRes{
	optional ErrorCode error = 1;
	optional int32 leftTime = 2;
}

message ResetTowerArg{
	optional int32 hardLevel = 1;
}

message ResetTowerRes{
	optional ErrorCode error = 1;
}

message GmfJoinBattleArg{
	optional uint32 leftTime = 1;
}

message GmfJoinBattleRes{
	optional bool join = 1;
}

message GmfOneBattleEnd{
	optional GMFFailReason reason = 1;
	optional GmfRoleBrief winrole = 2;
	optional GmfRoleBrief loselrole = 3;
	optional GmfGuildBrief winguild = 4;
	optional GmfGuildBrief loseguild = 5;
}

message GmfRoleDatas{
	optional GmfHalfRoles halfrole11 = 1;
	optional GmfHalfRoles halfrole22 = 2;
}

message WorldChannelLeftTimesNtf{
	optional uint32 leftTimes = 1;
}

message GetGoddessTrialRewardsArg{
}

message GetGoddessTrialRewardsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 leftGoddessReward = 2;
}

message GuildBossTimeOut{
}

message AskGuildArenaTeamInfoArg{
}

message AskGuildArenaTeamInfoRes{
	repeated GuildDarenaUnit fightUnit = 1;
	repeated GuildMemberData guildMember = 2;
	optional ErrorCode errorcode = 3;
}

message SynGuildArenaBattleInfo{
	optional uint32 warType = 1;
	repeated GuildArenaGroupData arenaBattleInfo = 2;
	optional GuildArenaState timestate = 3;
	optional uint32 state = 4;
}

message SynGuildArenaFightUnit{
	optional uint32 pos = 1;
	optional uint32 state = 2;
}

message GuildArenaSimpleDeployArg{
}

message GuildArenaSimpleDeployRes{
	repeated GuildDarenaUnit fightunit = 1;
	optional ErrorCode errorcode = 2;
}

message MulActivityCha{
	optional int32 opencount = 1;
	repeated MulActivitInfo changeInfo = 2;
}

message GmfAllFightEnd{
	optional GmfGuildBrief winguild = 1;
	optional GmfGuildBrief loseguild = 2;
	optional GMF_FINAL_WIN_TYPE wintype = 3;
}

message WorldBossStateNtf{
	optional WorldBossState state = 1;
	optional uint32 time = 2;
	optional bool iswin = 3;
}

message BattleWatcherNtf{
	repeated BattleStatisticsData data = 1;
	optional StageWatchInfo watchinfo = 2;
	optional uint64 mvp = 3;
	optional uint64 winuid = 4;
	repeated BattleStarData star = 5;
	optional uint32 scenetype = 6;
}

message NoticeGuildArenaBegin{
	optional bool isstart = 1;
}

message AddAttrCount{
	optional uint32 count = 1;
}

message GuildSkillAllData{
	repeated GuildSkillData skillLevel = 1;
	optional int32 lastGuildExp = 2;
}

message NotifyEnemyEnterFight{
	optional bool enterfight = 1;
	optional uint64 enemyid = 2;
}

message SynGuildArenaRoleOnline{
	optional uint64 roleid = 1;
	optional bool online = 2;
}

message BuffList{
	optional uint64 roleid = 1;
	repeated Buff buffs = 2;
	optional uint64 casterid = 3;
}

message LoadOffLineChatNtf{
	optional uint64 roleID = 1;
}

message FriendQueryReportNew{
	optional FriendOpType op = 1;
}

message guildarenadisplace{
	repeated GuildDarenaUnit units = 1;
}

message NotifyTransferWall{
	optional bool transfer = 1;
	optional int32 wallid = 2;
}

message GmfWaitOtherArg{
	optional uint32 lefttime = 1;
}

message GmfWaitFightArg{
	optional uint32 lefttime = 1;
}

message IconWatchListNum{
	optional uint32 num = 1;
}

message QueryPowerPointArg{
}

message QueryPowerPointRes{
	repeated uint32 bqID = 1;
	repeated double ppt = 2;
	optional ErrorCode errorcode = 3;
}

message WorldBossAttrNtf{
	optional uint32 count = 1;
}

message GetWorldBossTimeLeftArg{
}

message GetWorldBossTimeLeftRes{
	optional uint32 timeleft = 1;
	optional uint32 guildrolecount = 2;
}

message JoinRoom{
}

message JoinRoomReply{
	optional string url1 = 1;
	optional string url2 = 2;
	optional string url3 = 3;
	optional int64 roomID = 4;
	optional int64 roomKey = 5;
	optional int32 memberID = 6;
}

message QuitRoom{
	optional int64 roomID = 1;
	optional int32 memberID = 2;
}

message UpdateVoipRoomMemberNtf{
	repeated VoipRoomMember dataList = 1;
}

message GetPayAllInfoArg{
}

message GetPayAllInfoRes{
	optional ErrorCode errcode = 1;
	optional PayAllInfo info = 2;
}

message PayCardAwardArg{
	optional int32 type = 1;
}

message PayCardAwardRes{
	optional ErrorCode errcode = 1;
	optional PayCard info = 2;
}

message PayAllInfo{
	repeated PayBaseInfo pay = 1;
	repeated PayCard card = 2;
	optional PayAileen aileen = 3;
	optional uint32 vipLevel = 4;
	optional uint32 totalPay = 5;
	optional bool payCardFirstClick = 6;
	optional bool payAileenFirstClick = 7;
	optional bool payFirstAward = 8;
	optional bool payFirstAwardClick = 9;
	optional bool buyGrowthFund = 10;
	repeated int32 growthFundLevelInfo = 11;
	repeated int32 growthFundLoginInfo = 12;
	optional bool growthFundClick = 13;
	repeated int32 VipLevelGift = 14;
	optional uint32 payCardRemainTime = 15;
	optional uint32 totalLoginDays = 16;
	optional int32 payType = 17;
	repeated PayMember payMemberInfo = 18;
	optional bool isIosOpen = 19;
	optional uint32 rewardCoolTime = 20;
}

message PayClickArg{
	optional int32 buttonType = 1;
	optional int32 memberid = 2;
}

message PayClickRes{
	optional ErrorCode errcode = 1;
	optional bool payCardFirstClick = 2;
	optional bool payAileenFirstClick = 3;
	optional bool payFirstAwardClick = 4;
	optional bool growthFundClick = 5;
	repeated PayMember info = 6;
}

message GetActivityInfoRes{
	optional ErrorCode errorcode = 1;
	optional ActivityRecord Record = 2;
}

message GetActivityInfoArg{
}

message AIDebugMsg{
	optional int32 level = 1;
	optional string msg = 2;
}

message SynPetInfoArg{
	optional uint64 uid = 1;
}

message SynPetInfoRes{
	optional uint32 mood = 1;
	optional uint32 hungry = 2;
}

message PayFirstAwardArg{
}

message PayFirstAwardRes{
	optional ErrorCode errcode = 1;
}

message GrowthFundAwardArg{
	optional int32 type = 1;
	optional int32 value = 2;
}

message GrowthFundAwardRes{
	optional ErrorCode errcode = 1;
	repeated int32 growthFundLevelInfo = 2;
	repeated int32 growthFundLoginInfo = 3;
}

message NewGetFlowerRewardListArg{
}

message NewGetFlowerRewardListRes{
	optional ErrorCode errorCode = 1;
	repeated RoleBriefInfo briefList = 2;
	optional bool canGetReward = 3;
}

message BuyVipLevelGiftArg{
	optional int32 vipLevel = 1;
}

message BuyVipLevelGiftRes{
	optional ErrorCode errcode = 1;
	repeated int32 VipLevelGift = 2;
}

message StartRollNtfData{
	optional EnemyDoodadInfo  info = 1;
}

message ChooseRollReqArg{
	optional int32 chooseType = 1;
	optional EnemyDoodadInfo info = 2;
}

message ChooseRollReqRes{
	optional ErrorCode error = 1;
}

message CheckQueuingReq{
	optional bool iscancel = 1;
}

message CheckQueuingNtf{
	optional uint32 rolecount = 1;
	optional uint32 timeleft = 2;
	optional ErrorCode errorcode = 3;
}

message NoticeHungryDown{
	optional uint64 petid = 1;
	optional uint32 hungry = 2;
}

message TitleLevelUpArg{
}

message TitleLevelUpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 titleID = 2;
}

message FirstPassInfoReqArg{
}

message FirstPassInfoReqRes{
	optional ErrorCode error = 1;
	repeated FirstPassStageInfo2Client stageInfos = 2;
}

message FirstPassRewardNtfData{
	optional bool hasFirstPassReward = 1;
	optional bool hasCommendReward = 2;
}

message GetFirstPassRewardArg{
	optional int32 firstPassID = 1;
}

message GetFirstPassRewardRes{
	optional ErrorCode error = 1;
}

message CommendFirstPassArg{
	optional int32 firstPassID = 1;
}

message CommendFirstPassRes{
	optional ErrorCode error = 1;
	optional int32 commendNum = 2;
	optional int32 starLevel = 3;
}

message FirstPassGetTopRoleInfoArg{
	optional int32 firstPassID = 1;
}

message FirstPassGetTopRoleInfoRes{
	optional ErrorCode error = 1;
	repeated UnitAppearance infos = 2;
	optional int32 commendNum = 3;
	optional int32 time = 4;
	optional int32 starLevel = 5;
}

message titleChangeData{
	optional uint32 titleID = 1;
}

message PkReqArg{
	optional PkReqType type = 1;
	optional uint32 index = 2;
	optional PkNVNType nvntype = 3;
}

message PkReqRes{
	optional ErrorCode errorcode = 1;
	optional uint32 time = 2;
	optional QueryPkInfoRes allinfo = 3;
}

message ClearPrivateChatListArg{
	optional uint32 type = 1;
	optional uint64 roleid = 2;
}

message ClearPrivateChatListRes{
	optional ErrorCode errorcode = 1;
}

message QAIDNameList{
	repeated QAIDName idname = 1;
}

message FightGroupChangeNtf{
	optional uint64 uid = 1;
	optional uint32 fightgroup = 2;
}

message EventNotify{
	optional string notify = 1;
}

message ChangeOutLookOpArg{
	optional OutLookOp op = 1;
}

message ChangeOutLookOpRes{
	optional ErrorCode errorcode = 1;
}

message ItemFindBackInfoArg{
}

message ItemFindBackInfoRes{
	optional ErrorCode error = 1;
	repeated ItemFindBackInfo2Client backInfo = 2;
	optional int32 time = 3;
}

message ItemFindBackArg{
	optional ItemFindBackType id = 1;
	optional int32 findBackCount = 2;
	optional int32 backType = 3;
}

message ItemFindBackRes{
	optional ErrorCode error = 1;
}

message ItemFindBackData{
	optional bool isDayFirstNofity = 1;
}

message IBQueryItemReq{
	optional uint32 type = 1;
	optional uint32 subtype = 2;
}

message IBBuyItemReq{
	optional uint32 goodsid = 1;
	optional uint32 count = 2;
}

message IBBuyItemRes{
	optional ErrorCode errorcode = 1;
}

message IBQueryItemRes{
	optional ErrorCode errorcode = 1;
	repeated IBShopItemInfo iteminfo = 2;
	repeated uint32 newproducts = 3;
	optional bool viptab = 4;
}

message ActivatAtlasArg{
	optional uint32 teamid = 1;
}

message ActivatAtlasRes{
	optional ErrorCode errorcode = 1;
}

message AutoBreakAtlasArg{
	repeated uint32 quilts = 1;
	optional uint32 groupId = 2;
}

message AutoBreakAtlasRes{
	optional ErrorCode errorcode = 1;
}

message breakAtlas{
	optional uint32 atlaId = 1;
	optional uint32 atlaNum = 2;
}

message breakAtlasRes{
	optional ErrorCode errorcode = 1;
}

message SpriteChanged{
	repeated SpriteInfo NewSprites = 1;
	repeated SpriteInfo ChangedSprites = 2;
	repeated uint64 RemovedSprites = 3;
}

message SpriteOperationArg{
	optional SpriteType Type = 1;
	optional uint64 uid = 2;
	optional uint32 FeedItemID = 3;
	repeated uint64 uids = 4;
	repeated uint32 notToChoose = 5;
	optional uint32 resetTrainChoose = 6;
}

message SpriteOperationRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 Exp = 2;
	optional SpriteInfo AwakeSpriteBefore = 3;
	optional SpriteInfo AwakeSprite = 4;
	repeated uint64 InFight = 5;
	repeated uint32 LastTrainAttrID = 6;
	repeated uint32 LastTrainAttrValue = 7;
}

message BossRushPara{
	optional int32 rank = 1;
	optional bool win = 2;
}

message AllSynCardAttr{
	repeated SynCardAttr allAttrs = 1;
}

message DEProgressArg{
}

message DEProgressRes{
	repeated DEProgress allpro = 1;
	optional int32 allcount = 2;
	optional int32 leftcount = 3;
	optional ErrorCode errcode = 4;
	optional uint32 serverseallevel = 5;
}

message DERankArg{
}

message DERankRes{
	repeated DERank ranks = 1;
	optional uint32 rewardlefttime = 2;
	optional ErrorCode errcode = 3;
}

message WorldBossEndArg{
}

message WorldBossEndRes{
	repeated WorldBossDamageInfo damages = 1;
	optional WorldBossDamageInfo selfdamage = 2;
}

message GetRiskMapInfosArg{
	optional int32 mapID = 1;
	optional bool isRefresh = 2;
	optional bool onlyCountInfo = 3;
}

message GetRiskMapInfosRes{
	optional ErrorCode error = 1;
	optional RiskMapInfos mapInfo = 2;
}

message PlayDiceNtfData{
	optional bool isDiceFull = 1;
	optional int32 mapID = 2;
	optional int32 slot = 3;
}

message PlayDiceRequestArg{
	optional int32 mapid = 1;
	optional int32 randValue = 2;
}

message PlayDiceRequestRes{
	optional ErrorCode error = 1;
	optional int32 getValue = 2;
	optional int32 leftDiceTime = 3;
}

message PlayDiceOverData{
}

message ChangeRiskBoxStateArg{
	optional RiskBoxState destState = 1;
	optional int32 slot = 2;
	optional int32 mapID = 3;
}

message ChangeRiskBoxStateRes{
	optional ErrorCode error = 1;
	repeated ItemBrief openBoxRewards = 2;
}

message ReEnterRiskBattleArg{
}

message ReEnterRiskBattleRes{
	optional ErrorCode error = 1;
}

message LevelSealExchangeArg{
}

message LevelSealExchangeRes{
	optional ErrorCode errcode = 1;
}

message IBShopIcon{
	repeated uint32 viptag = 1;
	optional bool limittag = 2;
}

message RemoveIBShopIcon{
	optional uint32 nData = 1;
}

message NotifyEnhanceSuit{
	optional uint32 enhanceSuit = 1;
}

message PlayDiceOverArg{
}

message PlayDiceOverRes{
	optional ErrorCode error = 1;
	optional int32 mapID = 2;
	optional RiskBoxInfo addBoxInfo = 3;
	optional bool hasTriggerBuy = 4;
}

message RiskBuyData{
	repeated ItemBrief rewardItems = 1;
	optional ItemBrief cost = 2;
}

message RiskBuyRequestArg{
}

message RiskBuyRequestRes{
	optional ErrorCode error = 1;
}

message SetVoipMemberState{
	optional uint32 nstate = 1;
}

message RiskRecoverDiceData{
	optional int32 diceNum = 1;
	optional int32 leftDiceTime = 2;
}

message AuctionAllReqArg{
	optional AuctionAllReqType reqtype = 1;
	optional uint32 itemid = 2;
	optional uint64 itemuniqueid = 3;
	optional uint32 itemcount = 4;
	optional uint32 perprice = 5;
	optional uint64 overlapid = 6;
	optional uint64 auctuid = 7;
	optional bool istreasure = 8;
}

message AuctionAllReqRes{
	optional ErrorCode errcode = 1;
	repeated AuctItemBrief itembrief = 2;
	repeated AuctOverlapData overlapdata = 3;
	repeated AuctionSaleData saledata = 4;
	optional uint32 autorefreshlefttime = 5;
	optional uint32 tradeprice = 6;
	optional uint32 leftfreerefreshcount = 7;
	optional uint32 itemleftcount = 8;
	optional uint32 freerefreshlefttime = 9;
	optional bool need_copyitem = 10;
}

message SmeltItemArg{
	optional uint64 uid = 1;
	optional uint32 slot = 2;
	optional bool isForge = 3;
}

message SmeltItemRes{
	optional ErrorCode errorcode = 1;
	optional uint32 result = 2;
}

message RefreshSweepRewardArg{
}

message RefreshSweepRewardRes{
	optional ErrorCode error = 1;
	optional int32 refreshResult = 2;
}

message GetSweepTowerRewardArg{
}

message GetSweepTowerRewardRes{
	optional ErrorCode error = 1;
}

message LearnGuildSkillAgr{
	optional uint32 skillId = 1;
}

message LearnGuildSkillRes{
	optional ErrorCode errorcode = 1;
}

message OpenSpriteEgg{
	optional uint32 itemid = 1;
}

message getguildbosstimeleftArg{
}

message getguildbosstimeleftRes{
	optional uint32 timeleft = 1;
	optional uint32 addAttrCount = 2;
}

message QuerySceneTimeArg{
}

message QuerySceneTimeRes{
	optional int32 time = 1;
	optional ErrorCode errorcode = 2;
}

message IdipMessage{
	optional string message = 1;
}

message IdipPunishInfo{
	optional int32 type = 1;
	optional int32 endTime = 2;
	optional int32 banTime = 3;
	optional int32 leftTime = 4;
}

message IdipClearChatInfo{
	optional uint64 roleid = 1;
}

message GetTowerFirstPassRewardArg{
	optional int32 floor = 1;
}

message GetTowerFirstPassRewardRes{
	optional ErrorCode error = 1;
}

message TowerFirstPassRewardData{
}

message DERankChangePara{
	optional int32 oldrank = 1;
	optional int32 newrank = 2;
}

message HallIconPara{
	optional HallIconState state = 1;
	optional int32 systemid = 2;
	optional LiveIconData liveInfo = 3;
}

message TaskInfo{
	optional uint32 id = 1;
	optional TaskStatus status = 2;
	repeated TaskConditionInfo conds = 3;
}

message SkyCityFinalInfo{
	repeated SkyCityFinalBaseInfo info = 1;
	optional uint32 floor = 2;
	repeated ItemBrief item = 3;
	optional bool ismvp = 4;
}

message SkyCityEstimateInfo{
	repeated SkyCityEstimateBaseInfo info = 1;
	optional uint32 floor = 2;
	optional uint32 winteamid = 3;
	repeated SkyCityTeamScore teamscore = 4;
}

message SkyCityTimeInfo{
	optional uint32 time = 1;
	optional SkyCityTimeType type = 2;
}

message SkyCityAllTeamBaseInfo{
	repeated SkyCityTeamBaseInfo info = 1;
	optional uint32 games = 2;
	optional uint32 floor = 3;
}

message ReqGuildLadderInfoAgr{
	optional uint64 roleId = 1;
}

message ReqGuildLadderInfoRes{
	optional uint32 lestRewardTimes = 1;
	repeated GuildLadderRoleRank roleRanks = 2;
	repeated GuildLadderRank guildRanks = 3;
	optional ErrorCode errorcode = 4;
	optional uint32 nowTime = 5;
	optional uint32 lastTime = 6;
}

message ReqGuildLadderRnakInfoArg{
	optional uint64 roleid = 1;
}

message ReqGuildLadderRnakInfoRes{
	repeated GuildLadderRank guildrank = 1;
	optional ErrorCode errorcode = 2;
	optional uint32 lastTime = 3;
}

message SkyCityEnterArg{
	optional uint32 sceneid = 1;
}

message SkyCityEnterRes{
	optional ErrorCode error = 1;
}

message GmfReadyArg{
	optional GMFReadyType type = 1;
	optional uint64 roleid = 2;
}

message GmfReadyRes{
	optional ErrorCode errcode = 1;
	optional uint32 cooldown = 2;
}

message GuildCardRankReq{
	optional uint32 type = 1;
}

message GuildCardRankNtf{
	optional uint32 type = 1;
	repeated string name = 2;
	repeated int32 point = 3;
}

message NoticeGuildLadderStart{
	optional bool isstart = 1;
}

message GmfKickRes{
	optional uint32 cooldowntime = 1;
	optional int32 leaderkick = 2;
	optional string kickname = 3;
}

message GuildCardMatchReq{
	optional CardMatchOp op = 1;
	optional uint32 card = 2;
}

message GuildCardMatchNtf{
	optional ErrorCode errorcode = 1;
	optional CardMatchOp op = 2;
	optional uint32 timeleft = 3;
	optional uint32 changecount = 4;
	optional uint32 round = 5;
	optional uint32 result = 6;
	repeated uint32 cards = 7;
	optional bool iscanbegin = 8;
	optional bool isbegin = 9;
	optional CardMatchState state = 10;
	optional uint32 store = 11;
	optional bool sign_up = 12;
	optional uint32 match_type = 13;
	repeated ItemBrief items = 14;
	optional uint32 sign_up_num = 15;
}

message InspireArg{
}

message InspireRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 count = 2;
	optional uint32 cooldowntime = 3;
}

message StartPlantArg{
	optional uint32 farmland_id = 1;
	optional uint32 seed_id = 2;
	optional GardenQuestType quest_type = 3;
	optional uint64 garden_id = 4;
	optional bool cancel = 5;
}

message StartPlantRes{
	optional ErrorCode result = 1;
	optional PlantGrowState grow_state = 2;
}

message CommitAnswerNtf{
	optional uint64 audiouid = 1;
	optional string answer = 2;
	optional uint32 audiotime = 3;
	optional uint32 qid = 4;
}

message FetchPlantInfoRes{
	optional ErrorCode result = 1;
	repeated PlantInfo plant_info = 2;
	optional uint32 sprite_id = 3;
	repeated uint32 farmland_id = 4;
}

message FetchPlantInfoArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType quest_type = 3;
}

message OpenPrivateChat{
	optional uint64 roleid = 1;
}

message SkyCityAllInfo{
	repeated SkyCityGroupData groupdata = 1;
	optional SkyCityTimeType timetype = 2;
	optional uint32 lefttime = 3;
}

message SkyCityArg{
}

message SkyCityRes{
	optional SkyCityAllTeamBaseInfo baseinfo = 1;
	optional SkyCityAllInfo allinfo = 2;
}

message ReqGuildRankInfoArg{
}

message ReqGuildRankInfoRes{
	optional uint32 endTime = 1;
	optional uint32 rank = 2;
	optional uint32 keepTime = 3;
	optional uint32 nowTime = 4;
}

message PlantCultivationArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional PlantGrowState operate_type = 3;
	optional GardenQuestType quest_type = 4;
}

message GuildBindGroupReq{
	optional string token = 1;
}

message PlantCultivationRes{
	optional ErrorCode result = 1;
	optional float  growup_amount = 2;
	optional uint32 notice_times = 3;
}

message GetGuildBindInfoReq{
	optional string token = 1;
}

message PlantHarvestArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType  quest_type = 3;
}

message GetGuildBindInfoRes{
	optional GuildBindStatus bind_status = 1;
	optional string group_name = 2;
	optional ErrorCode result = 3;
}

message PlantHarvestRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
	optional bool harvest = 3;
	optional bool extra = 4;
}

message GuildBindGroupRes{
	optional ErrorCode result = 1;
	optional string group_name = 2;
}

message TryFishArg{
	optional GardenQuestType quest_type = 1;
	optional uint64 garden_id = 2;
}

message TryFishRes{
	optional ErrorCode result = 1;
	repeated ItemBrief item = 2;
	optional uint32 fish_level = 3;
	optional uint32 experiences = 4;
}

message GuildJoinBindGroupReq{
	optional string token = 1;
}

message GuildJoinBindGroupRes{
	optional ErrorCode result = 1;
}

message GuildUnBindGroupReq{
	optional string token = 1;
}

message GuildUnBindGroupRes{
	optional ErrorCode result = 1;
}

message gmfjoinarg{
}

message gmfjoinres{
	optional ErrorCode errorcode = 1;
}

message GmfBatlleStatePara{
	optional GmfBattleState state = 1;
	optional uint32 lefttime = 2;
}

message FriendGardenPlantLogArg{
}

message FriendGardenPlantLogRes{
	optional ErrorCode result = 1;
	repeated FriendPlantLog frinend_plant_log = 2;
}

message GardenCookingFoodArg{
	optional uint32 food_id = 1;
}

message SpActivityChange{
	optional uint32 actid = 1;
	optional uint32 taskid = 2;
	optional uint32 state = 3;
	optional uint32 progress = 4;
}

message GardenCookingFoodRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
	optional uint32 cooking_level = 3;
	optional uint32 cooking_experiences = 4;
}

message SpActivityOffsetDay{
	repeated uint32 actid = 1;
	repeated int32 offsetday = 2;
	repeated uint32 offsettime = 3;
}

message GetSpActivityRewardArg{
	optional uint32 actid = 1;
	optional uint32 taskid = 2;
}

message GetSpActivityRewardRes{
	optional ErrorCode errorcode = 1;
}

message GetSpActivityBigPrizeArg{
	optional uint32 actid = 1;
}

message GetSpActivityBigPrizeRes{
	optional ErrorCode errorcode = 1;
}

message GardenBanquetArg{
	optional uint32 banquet_id = 1;
}

message GardenBanquetRes{
	optional ErrorCode result = 1;
	optional uint32 banquet_id = 2;
	repeated uint64 guests = 3;
}

message DPSNotify{
	optional float dps = 1;
}

message SpriteState{
	optional uint32 sprite_id = 1;
	optional bool state = 2;
}

message GardenOverviewArg{
}

message GardenOverviewRes{
	optional ErrorCode result = 1;
	optional uint32 visited_times = 2;
	optional uint32 fish_level = 3;
	optional uint32 fish_experiences = 4;
	optional uint32 cooking_level = 5;
	optional uint32 cooking_experiences = 6;
	optional uint32 plant_amount = 7;
	repeated FriendPlantLog friend_log = 8;
	repeated GardenEventLog event_log = 9;
	repeated PlantInfo plant_info = 10;
	repeated MapIntItem food_id = 11;
	optional uint32 server_time = 12;
	optional uint32 plant_farmland_max = 13;
	optional uint32 sprite_id = 14;
}

message NoticeGuildArenaNextTime{
	optional GuildArenaState state = 1;
}

message GetLevelSealSealGiftArg{
	optional uint32 count = 1;
}

message GetLevelSealSelfGiftRes{
	optional ErrorCode errcode = 1;
}

message SkillCoolPara{
}

message BanquetNtfArg{
	optional uint32 banquet_id = 1;
	optional uint64 garden_id = 2;
}

message BanquetAwardArg{
	optional uint32 Banquet_id = 1;
	optional uint64 garden_id = 2;
}

message BanquetAwardRes{
	optional ErrorCode result = 1;
	optional uint32 banquet_id = 2;
	repeated ItemBrief items = 3;
}

message ActiveCookbookArg{
	optional uint64 garden_id = 1;
	optional uint32 cook_book_id = 2;
}

message ActiveCookbookRes{
	optional ErrorCode result = 1;
	optional uint32 food_id = 2;
}

message GardenPlantEventNoticeArg{
	optional GardenPlayEventType event_type = 1;
	optional uint32 farmland_id = 2;
	optional uint32 sprite_id = 3;
	optional uint64 garden_id = 4;
	optional bool exist = 5;
	optional uint64 role_id = 6;
	optional bool fish_result = 7;
	optional bool fish_stop = 8;
}

message GardenFishInfoArg{
	optional uint64 garden_id = 1;
}

message GardenFishInfoRes{
	optional ErrorCode result = 1;
	optional uint32 fish_level = 2;
	optional uint32 experiences = 3;
}

message GardenStealArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType quest_type = 3;
}

message GardenStealRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
}

message PayNotifyArg{
	optional string p = 1;
	optional string v = 2;
	optional string ext = 3;
	optional PayParamType type = 4;
	optional string paramid = 5;
	optional int32 amount = 6;
	optional PayParameterInfo data = 7;
	optional int32 count = 8;
}

message GardenExpelSpriteArg{
	optional uint64 garden_id = 1;
	optional uint32 sprite_id = 2;
	optional GardenQuestType quest_type = 3;
}

message PayNotifyRes{
	optional ErrorCode errcode = 1;
	optional string result = 2;
}

message GardenExpelSpriteRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
}

message AskGuildWageInfoArg{
}

message AskGuildWageInfoRes{
	optional uint32 activity = 1;
	optional uint32 rolenum = 2;
	optional uint32 prestige = 3;
	optional uint32 exp = 4;
	optional uint32 lastScore = 5;
	optional WageRewardState rewardstate = 6;
	optional uint32 wagelvl = 7;
	optional uint32 guildlvl = 8;
	optional ErrorCode errorcode = 9;
	optional uint32 lastposition = 10;
	repeated string name = 11;
	repeated GuildActivityRole roles = 12;
}

message GetGuildWageRewardArg{
}

message GetGuildWageReward{
	optional ErrorCode errorcode = 1;
}

message OpenGardenFarmlandArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType quest_type = 3;
}

message OpenGardenFarmlandRes{
	optional ErrorCode result = 1;
}

message SyncPlatFriend2MSData{
	repeated PlatFriend friendInfo = 1;
	optional PlatFriend selfInfo = 2;
}

message ReqPlatFriendRankListArg{
}

message ReqPlatFriendRankListRes{
	optional ErrorCode error = 1;
	repeated PlatFriendRankInfo2Client platFriends = 2;
	optional PlatFriendRankInfo2Client selfInfo = 3;
}

message SendGift2PlatFriendArg{
	optional string openid = 1;
}

message SendGift2PlatFriendRes{
	optional ErrorCode error = 1;
}

message GardenBanquetNtf{
	optional uint64 garden_id = 1;
	optional uint32 banquet_id = 2;
	optional uint32 banquet_stage = 3;
	optional uint32 timesTSWK = 4;
}

message NoticeGuildWageReward{
}

message ResWarExploreArg{
	optional bool iscancel = 1;
}

message ResWarExploreRes{
	optional ErrorCode error = 1;
}

message GmfGuildCombatPara{
	optional GmfGuildCombat guildcombat11 = 1;
	optional GmfGuildCombat guildcombat22 = 2;
}

message GprOneBattleEnd{
	optional GmfGuildBrief winguild = 1;
	optional GmfGuildBrief loseguild = 2;
	repeated GmfRoleCombat winrolecombat = 3;
	repeated GmfRoleCombat loserolecombat = 4;
}

message GprAllFightEnd{
	optional GmfGuildBrief winguild = 1;
	optional GmfGuildBrief loseguild = 2;
	optional uint32 winscore = 3;
	optional uint32 losescore = 4;
}

message QueryResWarArg{
	optional QueryResWarEnum param = 1;
}

message QueryResWarRes{
	optional ResWarGuildBrief data = 1;
	optional ErrorCode error = 2;
	optional ResWarFinalAll finalrank = 3;
}

message GoldClickArg{
	optional uint32 type = 1;
	optional uint32 count = 2;
}

message GoldClickRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 results = 2;
	optional uint32 freetimeleft = 3;
	optional uint32 freecount = 4;
	optional uint32 freeallcount = 5;
	optional uint32 count = 6;
	optional uint32 allcount = 7;
}

message ResWarAllInfo{
	repeated ResWarGroupData groupdata = 1;
	optional ResWarTimeType timetype = 2;
	optional uint32 lefttime = 3;
}

message GuildAuctReqArg{
	optional GuildAuctReqType reqtype = 1;
	optional uint64 uid = 2;
	optional int32 acttype = 3;
	optional int32 itemtype = 4;
	optional uint32 curauctprice = 5;
}

message GuildAuctReqRes{
	optional ErrorCode errorcode = 1;
	optional uint32 curauctprice = 2;
	repeated GASaleItem saleitems = 3;
	repeated GASaleHistory salehistorys = 4;
	optional uint32 profit = 5;
}

message ResWarAllTeamBaseInfo{
	repeated ResWarTeamBaseInfo info = 1;
}

message ResWarRes{
	optional ResWarAllTeamBaseInfo baseinfo = 1;
	optional ResWarAllInfo allinfo = 2;
}

message ResWarArg{
	optional uint32 param = 1;
}

message GetGuildBonusSendListArg{
}

message GetGuildBonusSendListRes{
	optional ErrorCode error = 1;
	repeated GuildBonusAppear sendList = 2;
}

message SendGuildBonusInSendListArg{
	optional uint32 bonusID = 1;
}

message SendGuildBonusInSendListRes{
	optional ErrorCode error = 1;
}

message SendGuildBonusNtfData{
	optional bool hasLeftSend = 1;
}

message BattleLogReport{
	repeated string key = 1;
	repeated string value = 2;
	optional uint32 type = 3;
	optional uint64 roleid = 4;
}

message UseGuildBuffArg{
	optional uint32 itemid = 1;
	optional uint64 guildid = 2;
}

message UseGuildBuffRes{
	optional ErrorCode error = 1;
	optional uint32 cd = 2;
}

message ResWarGuildBrief{
	optional ErrorCode error = 1;
	optional uint64 guildid = 2;
	optional uint32 cd = 3;
	optional uint32 cardcd = 4;
	repeated GuildBuffItem item = 5;
	repeated GuildBuffRecord record = 6;
	repeated uint32 mineid = 7;
	repeated ChatInfo chatinfo = 8;
	optional uint32 totalcd = 9;
	optional uint32 timecoutdown = 10;
	optional uint32 timetype = 11;
	optional ResWarRankSimpleInfo rankinfo = 12;
	repeated GuildBuffSimpleInfo buffinfo = 13;
	repeated uint32 buffid = 14;
}

message ResWarPVEArg{
	optional uint32 mine = 1;
}

message ResWarPVERes{
	optional ErrorCode error = 1;
}

message applyguildarenaarg{
}

message applyguildarenares{
	optional ErrorCode errorcode = 1;
}

message getapplyguildlistarg{
}

message getapplyguildlistres{
	repeated Integralunit guildlist = 1;
}

message getintegralbattleInfoarg{
}

message getintegralbattleInfores{
	repeated IntegralBattle battleinfo = 1;
	repeated uint32 battleTime = 2;
}

message GetGuildIntegralInfoArg{
}

message GetGuildIntegralInfoRes{
	optional GuildArenaType battletype = 1;
	optional uint32 applytime = 2;
	optional bool isapply = 3;
	optional uint32 curturn = 4;
}

message PayMemberPrivilege{
	optional int32 usedReviveCount = 1;
	optional int32 usedChatCount = 2;
	optional int32 usedAbyssCount = 3;
	optional int32 usedBossRushCount = 4;
	optional int32 usedBuyGreenAgateCount = 5;
	optional int32 usedSuperRiskCount = 6;
	repeated PayPrivilegeShop usedPrivilegeShop = 7;
}

message GuildCampInfoArg{
}

message GuildCampInfoRes{
	optional ErrorCode error = 1;
	repeated GuildCampRankInfo rankInfos = 2;
	optional int32 curCampID = 3;
	optional int32 nextCampID = 4;
	optional int32 leftCount = 5;
}

message ClickGuildCampArg{
}

message ResWarRoleRankArg{
	optional uint32 param = 1;
}

message ResWarRoleRankRes{
	repeated ResWarRoleRank data = 1;
}

message SynGuilIntegralState{
	optional IntegralState state = 1;
}

message ResWarStateInfo{
	optional ResWarState state = 1;
}

message SynGuildIntegralState{
	optional IntegralState state = 1;
}

message ItemBuffOpArg{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 op = 3;
	optional uint32 index = 4;
}

message ItemBuffOpRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	repeated uint32 buffid = 4;
	repeated uint32 lefttime = 5;
}

message KillEnemyScoreData{
	optional int32 score = 1;
}

message ReqGuildArenaHistoryRes{
}

message ReqGuildArenaHistoryRse{
	repeated GuildArenaHistory history = 1;
}

message JustDanceArg{
	optional uint32 type = 1;
	optional uint32 danceid = 2;
}

message JustDanceRes{
	optional ErrorCode errorcode = 1;
}

message ServerOpenDay{
	optional int32 openday = 1;
	optional uint32 week = 2;
	optional uint32 daybeginsecdiff = 3;
	optional uint32 nowTime = 4;
}

message ResWarRankSimpleInfo{
	repeated ResWarRank rank = 1;
}

message GuildBuffSimpleAllInfo{
	repeated GuildBuffSimpleInfo buff = 1;
}

message GuildBuffSimpleItem{
	optional uint64 guildid = 1;
	repeated GuildBuffItem item = 2;
	repeated ChatInfo chatinfo = 3;
}

message GetDailyTaskInfoArg{
}

message GetDailyTaskInfoRes{
	repeated DailyTaskInfo task = 1;
	optional bool is_rewarded = 2;
	optional uint32 count = 3;
	optional uint32 accept_level = 4;
	optional uint32 askhelp_num = 5;
	optional uint32 score = 6;
	optional uint32 remain_refresh_count = 7;
	optional uint32 luck = 8;
}

message GetDailyTaskRewardArg{
	optional uint32 type = 1;
	optional uint32 id = 2;
}

message GetDailyTaskRewardRes{
	optional ErrorCode code = 1;
	repeated DailyTaskInfo task = 2;
}

message WorldLevel{
	optional uint32 worldLevel = 1;
}

message DailyTaskAskHelpArg{
	optional uint32 task_id = 1;
	optional PeriodTaskType task_type = 2;
}

message DailyTaskAskHelpRes{
	optional ErrorCode code = 1;
	optional uint32 ask_uid = 2;
}

message GetGuildDonateInfoArg{
}

message GetGuildDonateInfoRes{
	optional ErrorCode result = 1;
	repeated GuildMemberAskInfo info = 2;
	repeated GuildMemberDonateRankItem rankitem = 3;
	optional uint32 donatenum = 4;
}

message DonateMemberItemArg{
	optional uint32 id = 1;
	optional uint32 count = 2;
	repeated uint64 itemuid = 3;
}

message DonateMemberItemRes{
	optional ErrorCode result = 1;
	optional uint32 dailycount = 2;
	optional uint32 totalcount = 3;
	repeated GuildMemberDonateRankItem  rankitem = 4;
	optional uint32 getcount = 5;
}

message AddGuildInheritRes{
	optional ErrorCode errorcode = 1;
}

message AddGuildInheritArg{
	optional uint64 reqRoleId = 1;
}

message AceptGuildInheritArg{
	optional uint64 roleId = 1;
}

message AceptGuildInheritRes{
	optional ErrorCode errorcode = 1;
}

message synGuildInheritExp{
	optional uint64 roleOne = 1;
	optional uint32 expOne = 2;
	optional uint64 roleTwo = 3;
	optional uint32 expTwo = 4;
	optional uint32 turn = 5;
	optional bool islast = 6;
	optional uint64 teacherId = 7;
}

message ReqGuildInheritInfoArg{
}

message ReqGuildInheritInfoRes{
	repeated InheritData data = 1;
}

message DelGuildInheritArg{
}

message DelGuildInheritRes{
	optional ErrorCode errorCode = 1;
}

message SynDoingGuildInherit{
	optional uint64 roleOne = 1;
	optional uint64 roleTwo = 2;
	optional uint32 type = 3;
}

message NoticeDoingGuildInherit{
	optional uint64 roleOne = 1;
	optional uint64 roleTwo = 2;
	optional uint32 type = 3;
}

message SynGuildInheritNumInfo{
	optional uint32 reqNum = 1;
	optional uint32 teacherNum = 2;
	optional uint32 studentNum = 3;
	optional uint32 lastTime = 4;
}

message ResWarMineData{
	optional uint64 guildid = 1;
	optional uint32 mine = 2;
}

message QueryQQVipInfoArg{
	optional string token = 1;
}

message QueryQQVipInfoRes{
	optional ErrorCode result = 1;
	optional QQVipInfoClient info = 2;
}

message DailyTaskGiveUpArg{
}

message DailyTaskGiveUpRes{
	optional ErrorCode result = 1;
}

message FetchPlatNoticeArg{
	optional LoginType type = 1;
	optional PlatType platid = 2;
}

message FetchPlatNoticeRes{
	optional PlatNotice notice = 1;
	optional ErrorCode result = 2;
	repeated PlatNotice data = 3;
}

message CallData{
	optional uint32 skillid = 1;
	optional int32 sequence = 2;
	optional int32 slot = 3;
	optional int32 leftrunningtime = 4;
	optional bool onsyntonic = 5;
}

message JoinLargeRoomArg{
	optional uint32 param = 1;
	optional uint64 roleid = 2;
	optional uint32 plat = 3;
	optional string ip = 4;
	optional string acc = 5;
}

message JoinLargeRoomRes{
	optional ErrorCode error = 1;
	optional JoinLargeRoomReply data = 2;
}

message LeaveLargeRoomParam{
	optional uint32 param = 1;
}

message LargeRoomRoleParam{
	repeated string name = 1;
	repeated uint64 roleid = 2;
}

message LargeRoomLoginParam{
	optional bool speaker = 1;
}

message ResWarBuffArg{
	optional uint32 nParam = 1;
}

message ResWarBuffRes{
	optional uint32 buffid = 1;
	optional ErrorCode error = 2;
}

message GardenFishStopArg{
	optional uint64 garden_id = 1;
}

message ResWarTime{
	optional uint32 nTime = 1;
}

message StepMoveData{
	optional uint64 EntityID = 1;
	optional int32 PosXZ = 2;
	optional bool Stoppage = 3;
	optional int32 Face = 4;
}

message ChangeNameCountNtf{
	optional uint32 count = 1;
}

message HandleMicphoneArg{
	optional bool param = 1;
}

message ChangeNameArg{
	optional string name = 1;
	optional bool iscostitem = 2;
}

message ChangeNameRes{
	optional ErrorCode errorcode = 1;
}

message GuildBuffCDParam{
	optional uint32 param = 1;
}

message QueryQQFriendsVipInfoArg{
	optional string token = 1;
	repeated string friendopenids = 2;
}

message QueryQQFriendsVipInfoRes{
	optional ErrorCode result = 1;
	repeated FriendVipInfo info = 2;
}

message AntiAddictionRemindInfo{
	optional AntiAddictionReportType type = 1;
	optional string remindmsg = 2;
}

message HorseAwardAll{
	repeated HorseAward award = 1;
}

message HorseRank{
	optional uint32 rank = 1;
	optional uint32 turns = 2;
}

message HorseWaitTime{
	optional uint32 time = 1;
}

message HorseAnimation{
	optional uint64 time = 1;
}

message EnchantEquipArg{
	optional uint64 uid = 1;
	optional uint32 enchantid = 2;
}

message EnchantEquipRes{
	optional ErrorCode errorcode = 1;
	optional AttributeInfo attr = 2;
}

message HorseFinal{
	optional uint32 time = 1;
	optional uint32 rank = 2;
	optional uint32 turns = 3;
}

message GetPartnerInfoArg{
}

message GetPartnerInfoRes{
	optional uint64 id = 1;
	repeated uint64 memberids = 2;
	optional uint32 degree = 3;
	optional uint32 level = 4;
	optional uint32 last_leave_time = 5;
	optional bool shop_redpoint = 6;
	optional bool liveness_redpoint = 7;
}

message PicUrlInfo{
	optional string url = 1;
}

message GetOtherMentorStatusArg{
	optional uint64 roleid = 1;
}

message GetOtherMentorStatusRes{
	optional ErrorCode error = 1;
	optional MentorApplyStatus status = 2;
}

message GetMyMentorInfoArg{
}

message GetMyMentorInfoRes{
	optional ErrorCode error = 1;
	repeated OneMentorRelationInfo2Client mentorRelationList = 2;
	optional MentorSelfInfo mentorSelfInfo = 3;
	optional int32 curTime = 4;
	optional uint64 audioID = 5;
	optional string mentorWords = 6;
	optional bool isNeedStudent = 7;
}

message GetMyApplyStudentInfoArg{
	optional bool isRefresh = 1;
}

message GetMyApplyStudentInfoRes{
	optional ErrorCode error = 1;
	repeated OneMentorApplyStudentShow canApplyList = 2;
	optional int32 leftRefreshTime = 3;
}

message GetMyApplyMasterInfoArg{
	optional bool isRefresh = 1;
}

message GetMyApplyMasterInfoRes{
	optional ErrorCode error = 1;
	repeated OneMentorApplyMasterShow canApplyMasters = 2;
	optional int32 leftRefreshTime = 3;
}

message MentorMyBeAppliedMsgArg{
	optional EMentorMsgOpType operation = 1;
	optional uint64 roleID = 2;
	optional MentorMsgApplyType msgType = 3;
	optional int32 taskID = 4;
	optional bool operatingAllTask = 5;
}

message MentorMyBeAppliedMsgRes{
	optional ErrorCode error = 1;
	repeated OneMentorBeAppliedMsg msgList = 2;
}

message UpdateMentorApplyStudentInfoArg{
	optional uint64 audioID = 1;
	optional string applyWords = 2;
	optional bool isNeedStudent = 3;
	optional bool onlineNotify = 4;
}

message UpdateMentorApplyStudentInfoRes{
	optional ErrorCode error = 1;
}

message MentorRelationOpArg{
	optional MentorRelationOpType operation = 1;
	optional uint64 destRoleID = 2;
	optional int32 reportTaskID = 3;
}

message MentorRelationOpRes{
	optional ErrorCode error = 1;
	optional int32 curTime = 2;
}

message NotifyMentorApplyData{
	optional EMentorRelationPosition pos = 1;
	optional bool hasInheritOrReportTask = 2;
	optional bool hasMsg = 3;
	repeated MentorBreakApplyInfo appliedBreakInfos = 4;
}

message TakePartnerChestArg{
	optional uint32 index = 1;
}

message TakePartnerChestRes{
	optional ErrorCode result = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	optional uint32 takedchest = 4;
}

message GetPartnerDetailInfoArg{
}

message GetPartnerDetailInfoRes{
	optional ErrorCode result = 1;
	repeated PartnerMemberDetail members = 2;
	optional bool shop_redpoint = 3;
	optional bool liveness_redpoint = 4;
	optional uint32 degree = 5;
	optional uint32 level = 6;
	optional uint64 partnerid = 7;
}

message GetPartnerLivenessArg{
}

message GetPartnerLivenessRes{
	optional ErrorCode result = 1;
	optional uint32 liveness = 2;
	optional uint32 takedchest = 3;
	repeated PartnerLivenessItem record = 4;
}

message UpdatePartnerToClient{
	optional PartnerUpdateType type = 1;
	optional uint64 partid = 2;
	optional uint32 level = 3;
	optional uint32 degree = 4;
	optional uint64 leave_id = 5;
	optional string leave_name = 6;
}

message LeavePartnerArg{
}

message LeavePartnerRes{
	optional ErrorCode result = 1;
}

message GetHeroBattleInfoArg{
}

message GetHeroBattleInfoRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 havehero = 2;
	repeated uint32 weekhero = 3;
	optional uint32 winthisweek = 4;
	optional uint32 totalnum = 5;
	optional uint32 winnum = 6;
	optional uint32 losenum = 7;
	optional uint32 todaygetspcount = 8;
	optional uint32 weekprize = 9;
	optional bool cangetprize = 10;
	repeated uint32 experiencehero = 11;
	repeated uint32 experienceherolefttime = 12;
}

message MakePartnerResult{
	optional ErrorCode result = 1;
	optional uint64 err_roleid = 2;
	optional string err_rolename = 3;
	optional uint64 partnerid = 4;
	optional uint32 level = 5;
	optional uint32 degree = 6;
	repeated uint64 memberid = 7;
}

message CancelLeavePartnerArg{
}

message CancelLeavePartnerRes{
	optional ErrorCode result = 1;
}

message InvFightArg{
	optional InvFightReqType reqtype = 1;
	optional uint64 roleid = 2;
	optional uint64 invid = 3;
	optional bool iscross = 4;
	optional string account = 5;
}

message InvFightRes{
	optional ErrorCode errorcode = 1;
	repeated InvFightRoleBrief roles = 2;
	optional bool isPlatFriendOnline = 3;
}

message InvFightPara{
	optional InvFightNotifyType ntftype = 1;
	optional string name = 2;
	optional uint32 count = 3;
}

message HorseReConnectRes{
	optional ErrorCode error = 1;
	optional HorseRank rank = 2;
	optional HorseFinal selfarrive = 3;
	optional HorseAnimation otherreach = 4;
	repeated DoodadItemAddNtf item = 5;
}

message HorseReConnectArg{
	optional uint32 param = 1;
}

message HorseCountDownTime{
	optional uint64 time = 1;
}

message DoodadItemAddNtf{
	optional uint32 itemid = 1;
	optional uint32 index = 2;
}

message PhotographEffectArg{
}

message PhotographEffect{
	optional ErrorCode result = 1;
	repeated uint32 photograph_effect = 2;
	optional uint32 charm = 3;
}

message GCFCommonArg{
	optional GCFReqType reqtype = 1;
	optional uint32 mapid = 2;
	optional uint32 territoryid = 3;
}

message GCFCommonRes{
	optional ErrorCode errorcode = 1;
	repeated GCFJvDianInfo jvdians = 2;
	repeated GCFGuildBrief guilds = 3;
	repeated GCFRoleBrief roles = 4;
	optional GCFRoleBrief myinfo = 5;
	repeated ItemBrief rewards = 6;
	optional uint32 territoryid = 7;
	optional GCFGuildBrief winguild = 8;
	optional uint32 lefttime = 9;
	repeated GCFBattleField fields = 10;
}

message GCFReadyInfoArg{
}

message GCFReadyInfoRes{
	repeated GCFZhanChBriefInfo allinfo = 1;
	optional uint32 lefttime = 2;
}

message GCFFightInfoArg{
}

message GCFFightInfoRes{
	repeated GCFGuildBrief guilds = 1;
	repeated GCFJvDianInfo JvDians = 2;
	optional uint32 lefttime = 3;
	optional int32 mygroup = 4;
	optional GCFRoleBrief myinfo = 5;
}

message GCFZhanLingPara{
	optional GCFZhanLingType zltype = 1;
	optional uint64 roleID = 2;
	optional GCFJvDianType jdtype = 3;
}

message GetPartnerShopArg{
}

message GetPartnerShopRes{
	repeated PartnerShopItemClient item = 1;
	optional ErrorCode result = 2;
}

message BuyPartnerShopItemArg{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message BuyPartnerShopItemRes{
	optional ErrorCode result = 1;
}

message InvFightBefESpara{
	repeated RoleSmallInfo roles = 1;
}

message HeroBattleData{
	repeated HeroBattleGroupData groupData = 1;
	optional uint32 occupant = 2;
	optional uint32 lootTeam = 3;
	optional float lootProgress = 4;
	optional bool isInfight = 5;
	repeated uint64 roleInCircle = 6;
}

message ReqGuildTerrCityInfoArg{
}

message ReqGuildTerrCityInfo{
	repeated CityData cityinfo = 1;
	optional GUILDTERRTYPE type = 2;
	optional uint32 targetid = 3;
	optional uint64 allianceId = 4;
	optional uint32 max_territory_level = 5;
}

message ReqGuildTerrChallInfoArg{
	optional uint32 id = 1;
}

message ReqGuildTerrChallInfoRes{
	repeated GuildTerrChallInfo challinfo = 1;
	optional uint32 cdtime = 2;
}

message ReqGuildTerrAllianceInfoArg{
}

message ReqGuildTerrAllianceInfoRes{
	optional uint64 allianceid = 1;
	repeated GuildTerrAllianceInfo allianceinfo = 2;
}

message ScenePrepareInfoNtf{
	repeated string unreadyroles = 1;
}

message GetPartnerShopRecordArg{
}

message GetPartnerShopRecordRes{
	optional ErrorCode result = 1;
	repeated PartnerShopRecordItem record = 2;
}

message HeroBattleTeamMsg{
	repeated HeroBattleTeamData teamdata = 1;
}

message HeroBattleSyncData{
	optional uint32 occupant = 1;
	optional uint32 lootTeam = 2;
	optional float lootProgress = 3;
	optional bool isInFight = 4;
}

message HeroBattleInCircle{
	repeated uint64 roleInCircle = 1;
}

message PandoraLotteryArg{
	optional uint32 pandoraid = 1;
	optional bool isOneLottery = 2;
}

message PandoraLotteryRes{
	optional ErrorCode errorcode = 1;
	repeated ItemBrief items = 2;
}

message AllianceGuildTerrArg{
	optional uint32 id = 1;
}

message AllianceGuildTerrRes{
	optional ErrorCode errorcod = 1;
}

message HeroBattleOverTimeData{
	optional uint64 millisecond = 1;
}

message HeroBattleTeamRoleData{
	optional uint32 team1 = 1;
	repeated HeroBattleTeamMember members1 = 2;
	optional uint32 team2 = 3;
	repeated HeroBattleTeamMember members2 = 4;
}

message PayParameterInfo{
	optional string openkey = 1;
	optional string sessionId = 2;
	optional string sessionType = 3;
	optional string pf = 4;
	optional string pfKey = 5;
	optional string appid = 6;
}

message RecAllianceArg{
	optional uint64 guildid = 1;
}

message RecAllianceRes{
	optional ErrorCode errorcode = 1;
	optional uint64 allianceId = 2;
}

message TryAllianceArg{
	optional uint64 guild = 1;
}

message TryAlliance{
	optional ErrorCode errorcode = 1;
}

message GCFG2CSynPara{
	optional GCFG2CSynType type = 1;
	optional uint64 roleid = 2;
	optional uint32 killcount = 3;
	optional string killname = 4;
	optional string deadname = 5;
	optional uint32 mapid = 6;
	optional uint32 mulpoint = 7;
	optional GCFJvDianInfo jvdian = 8;
	optional uint32 territoryid = 9;
}

message AudioAuthKeyArg{
	optional string open_id = 1;
	optional string ip = 2;
}

message AudioAuthKeyRes{
	optional ErrorCode error = 1;
	optional uint32 dwMainSvrId = 2;
	optional uint32 dwMainSvrUrl1 = 3;
	optional uint32 dwMainSvrUrl2 = 4;
	optional uint32 dwSlaveSvrId = 5;
	optional uint32 dwSlaveSvrUrl1 = 6;
	optional uint32 dwSlaveSvrUrl2 = 7;
	optional string szAuthKey = 8;
	optional uint32 dwExpireIn = 9;
}

message AudioTextArg{
	optional string file_id = 1;
}

message AudioTextRes{
	optional ErrorCode error = 1;
	optional string file_text = 2;
}

message ClearGuildTerrAllianceArg{
}

message ClearGuildTerrAllianceRes{
	optional ErrorCode errorcode = 1;
}

message NoticeGuildTerrWar{
	optional bool isbegin = 1;
}

message NoticeGuildTerrall{
	optional uint32 num = 1;
}

message QueryClientIpArg{
	optional uint32 param = 1;
}

message QueryClientIpRes{
	optional string ip = 1;
}

message SetHeroInHeroBattleArg{
	optional uint32 heroid = 1;
}

message SetHeroInHeroBattleRes{
	optional ErrorCode errorcode = 1;
}

message UpdateStartUpType{
	optional StartUpType type = 1;
}

message DoodadItemUseNtf{
	optional uint32 buffid = 1;
	optional uint64 roleid = 2;
}

message GuildBonusGetAllData{
	optional uint32 bonusID = 1;
}

message GetGuildBonusLeftArg{
}

message GetGuildBonusLeftRes{
	optional ErrorCode errorCode = 1;
	repeated GuildBonusBriefInfo bonusInfos = 2;
}

message SpecialStateNtf{
	optional uint32 state = 1;
	optional uint32 effectmask = 2;
	optional uint64 uid = 3;
}

message ResWarEnemyTime{
	optional uint32 param = 1;
}

message GetHeroBattleGameRecordArg{
}

message GetHeroBattleGameRecordRes{
	optional ErrorCode errorcode = 1;
	repeated HeroBattleOneGame games = 2;
}

message BuyHeroInHeroBattleArg{
	optional uint32 heroid = 1;
}

message BuyHeroInHeroBattleRes{
	optional ErrorCode errorcode = 1;
}

message LevelScriptStateData{
	repeated DoorState doorStates = 1;
}

message SceneStateNtf{
	optional SSceneState state = 1;
	optional uint32 rolespecialstate = 2;
}

message QueryRoleStateReq{
	repeated uint64 roleids = 1;
}

message QueryRoleStateAck{
	repeated uint64 roleids = 1;
	repeated uint32 state = 2;
}

message GetHeroBattleWeekRewardArg{
}

message GetHeroBattleWeekRewardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 weekprize = 2;
	optional bool getnextweekprize = 3;
}

message IBShopHasBuy{
	optional uint32 goodsid = 1;
	optional uint32 count = 2;
}

message GetLeagueBattleInfoRes{
	optional ErrorCode result = 1;
	optional LeagueBattleTimeState today_state = 2;
	optional uint32 timestamp = 3;
	optional uint64 league_teamid = 4;
	optional string league_teamname = 5;
	optional uint32 score = 6;
	optional uint32 battlenum = 7;
	optional uint32 week_battlenum = 8;
	optional float winrate = 9;
	repeated LeagueTeamMemberDetail member = 10;
	optional uint32 matchlefttime = 11;
	optional uint32 rankreward_lefttime = 12;
	optional uint32 crossrankreward_lefttime = 13;
	optional uint32 rank = 14;
	optional LeagueEliType eli_type = 15;
	optional bool is_cross = 16;
}

message UpdateLeagueBattleSeasonInfo{
	optional bool is_open = 1;
	optional bool is_cross = 2;
	optional uint64 league_teamid = 3;
	repeated uint64 league_teammember = 4;
	optional LeagueTeamState league_teamstate = 5;
	optional uint32 season_num = 6;
	optional uint32 matchlefttime = 7;
	optional LeagueBattleTimeState state = 8;
}

message GetLeagueBattleInfoArg{
}

message GetLeagueTeamInfoArg{
	optional uint64 league_teamid = 1;
}

message GetLeagueTeamInfoRes{
	optional ErrorCode result = 1;
	optional LeagueTeamDetail team = 2;
}

message SkillInitCoolPara{
}

message NotifyLeagueTeamCreate{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	repeated uint64 members = 3;
}

message NotifyLeagueTeamDissolve{
	optional uint64 leave_roleid = 1;
	optional string leave_rolename = 2;
}

message HeroBattleCanUseHeroData{
	repeated uint32 havehero = 1;
	repeated uint32 freehero = 2;
	repeated uint32 experiencehero = 3;
	optional uint32 leftChooseTime = 4;
}

message LeaveLeagueTeamArg{
}

message LeaveLeagueTeamRes{
	optional ErrorCode result = 1;
}

message LeagueBattleReqArg{
	optional LeagueBattleReqType type = 1;
}

message LeagueBattleReqRes{
	optional ErrorCode result = 1;
}

message UpdateLeagueTeamState{
	optional LeagueTeamState state = 1;
}

message LeagueBattleStartMatchNtf{
}

message LeagueBattleStopMatchNtf{
}

message AtlasUpStarArg{
	optional uint32 groupid = 1;
}

message AtlasUpStarRes{
	optional ErrorCode errorcode = 1;
	optional uint32 groupid = 2;
	optional uint32 star = 3;
}

message LeagueBattleLoadInfoNtf{
	optional LeagueBattleType type = 1;
	optional LeagueBattleTeamData team1 = 2;
	optional LeagueBattleTeamData team2 = 3;
}

message LeagueBattleBaseDataNtf{
	optional LeagueBattleOneTeam team1 = 1;
	optional LeagueBattleOneTeam team2 = 2;
}

message LeagueBattleOneResultNtf{
	optional LeagueBattleRoleBrief winrole = 1;
	optional LeagueBattleRoleBrief loserole = 2;
	optional float winhppercent = 3;
	optional float losehppercent = 4;
}

message LeagueBattleResultNtf{
	optional LeagueBattleType type = 1;
	optional LeagueBattleResultTeam winteam = 2;
	optional LeagueBattleResultTeam loseteam = 3;
}

message LeagueBattleReadyReqArg{
	optional LeagueBattleReadyOper type = 1;
}

message LeagueBattleReadyReqRes{
	optional ErrorCode result = 1;
}

message ForgeEquipArg{
	optional uint64 uid = 1;
	optional bool isUsedStone = 2;
	optional ForgeOpType type = 3;
}

message ForgeEquipRes{
	optional ErrorCode errorcode = 1;
}

message PushPraise{
	optional CommentType type = 1;
	optional uint32 spriteid = 2;
}

message HeroBattleTipsData{
	optional uint32 id = 1;
}

message GetListSubscribeArg{
	optional string token = 1;
}

message GetListSubscribeRes{
	optional ErrorCode result = 1;
	repeated SubScribe list = 2;
	optional bool more = 3;
}

message SetSubscirbeArg{
	repeated uint32 msgid = 1;
	optional int32 msgtype = 2;
	optional string token = 3;
}

message SetSubscribeRes{
	optional ErrorCode result = 1;
}

message LeagueBattleStateNtf{
	optional uint32 lefttime = 1;
	optional LeagueBattleFightState state = 2;
}

message LeagueBattleMatchTimeoutNtf{
}

message ChangeProfessionArg{
	optional uint32 pro = 1;
}

message ChangeProfessionRes{
	optional ErrorCode errorcode = 1;
}

message CancelRedDot{
	optional uint32 systemid = 1;
}

message MidasExceptionInfo{
	optional ErrorCode result = 1;
}

message GetHolidayStageInfoArg{
}

message GetHolidayStageInfoRes{
	optional uint32 holidayid = 1;
	optional uint32 sceneid = 2;
	optional uint32 lasttime = 3;
	optional uint32 havetimes = 4;
}

message GetLeagueBattleRecordArg{
}

message GetLeagueBattleRecordRes{
	optional ErrorCode result = 1;
	optional uint32 winnum = 2;
	optional uint32 losenum = 3;
	optional float winrate = 4;
	optional uint32 max_continuewin = 5;
	optional uint32 max_continuelose = 6;
	repeated LeagueBattleOneRecord records = 7;
}

message ItemSellArg{
	optional uint64 uid = 1;
}

message ItemSellRes{
	optional ErrorCode errorcode = 1;
}

message EnchantTransferArg{
	optional uint64 originuid = 1;
	optional uint64 destuid = 2;
}

message EnchantTransferRes{
	optional ErrorCode errorcode = 1;
}

message GetLeagueEleInfoArg{
}

message GetLeagueEleInfoRes{
	optional ErrorCode result = 1;
	repeated LBEleRoundInfo rounds = 2;
	optional LeagueTeamDetail chamption = 3;
}

message UpdateLeagueEleRoomStateNtf{
	optional LBEleRoomInfo room = 1;
}

message CloseLeagueEleNtf{
}

message JoinLeagueEleBattleArg{
}

message JoinLeagueEleBattleRes{
	optional ErrorCode result = 1;
}

message PersonalCareerArg{
	optional PersonalCarrerReqType quest_type = 1;
	optional uint64 role_id = 2;
}

message PersonalCareerRes{
	optional ErrorCode result = 1;
	optional PersonalHomePage home_page = 2;
	optional PVPInformation pvp_info = 3;
	repeated bool system_status = 4;
	optional StageTrophy trophy_data = 5;
}

message ChangeDeclarationArg{
	optional string declaration = 1;
}

message ChangeDeclarationRes{
	optional ErrorCode result = 1;
	optional string declaration = 2;
}

message ClickNewNoticeArg{
	optional PlatNotice info = 1;
}

message ClickNewNoticeRes{
	optional ErrorCode result = 1;
}

message GuildAuctItemTime{
	optional uint32 auct_type = 1;
}

message ChangeSkillSetArg{
	optional uint32 index = 1;
}

message ChangeSkillSetRes{
	optional ErrorCode errorcode = 1;
	optional SkillRecord record = 2;
}

message PokerTournamentEndReFundMsg{
}

message GetPayRewardArg{
}

message GetPayRewardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cdTime = 2;
}

message NoticeGuildTerrEnd{
}

message ReqGuildTerrIntellInfoArg{
}

message ReqGuildTerrIntellInfoRes{
	repeated TerrData intellInfo = 1;
}

message NoticeGuildTerrBattleWin{
	optional uint32 id = 1;
	optional uint64 guildid = 2;
}

message NoticeGuildTerrBigIcon{
	optional bool isnow = 1;
}

message CloseHintNtf{
	optional uint32 systemid = 1;
}

message CountDownNtf{
	optional uint32 time = 1;
}

message MilitaryRecord{
	optional uint32 military_rank = 1;
	optional uint32 military_rank_his = 2;
	optional uint32 military_exploit = 3;
	optional uint32 military_exploit_his = 4;
	optional uint32 last_update_time = 5;
	repeated uint32 achieve_rank = 6;
}

message PayFriendItemArg{
	optional PayParameterInfo payparam = 1;
	optional uint32 goodsid = 2;
	optional uint32 count = 3;
	optional uint64 toroleid = 4;
	optional string text = 5;
}

message PayFriendItemRes{
	optional ErrorCode ret = 1;
	optional string token = 2;
	optional string url_param = 3;
	optional string billno = 4;
}

message AllGiftIBItem{
	repeated GiftIbItem gift = 1;
}

message GiftIBBackInfo{
	optional string openid = 1;
	optional string name = 2;
}

message IBGiftHistAllItemArg{
	optional uint32 type = 1;
}

message IBGiftHistAllItemRes{
	optional ErrorCode errorcode = 1;
	optional IBGiftHistAllItem gift = 2;
}

message ItemComposeArg{
	optional string uid = 1;
}

message ItemComposeRes{
	optional ErrorCode errorcode = 1;
}

message ShareRandomGiftData{
	optional uint32 id = 1;
}

message GetBackFlowSpActTimeArg{
}

message GetBackFlowSpActTimeRes{
	optional ErrorCode errorcode = 1;
	optional string lefttime = 2;
}

message ModifyArg{
	optional string name = 1;
}

message ModifyRes{
	optional ErrorCode error = 1;
}

message WorldBossGuildAddAttrArg{
	optional uint32 count = 1;
}

message WorldBossGuildAddAttrRes{
	optional ErrorCode errorcode = 1;
}

message WorldBossGuildAddAttrSyncClient{
	optional uint32 count = 1;
}

message ArgentaActivityArg{
	optional uint32 type = 1;
	optional uint32 id = 2;
}

message ArgentaActivityRes{
	optional ErrorCode errorcode = 1;
	optional uint32 leftTime = 2;
	optional uint32 level = 3;
	repeated uint32 getRewardIDs = 4;
}

message GetPlatformShareChestArg{
	optional uint32 box_id = 1;
	optional string open_key = 2;
	optional uint32 share_type = 3;
}

message GetPlatformShareChestRes{
	optional ErrorCode errorcode = 1;
	optional string boxid = 2;
	optional uint32 act_id = 3;
	optional string url = 4;
}

message LoginActivityStatus{
	optional bool state = 1;
}

message LoginActivityArg{
	optional uint32 param = 1;
}

message LoginActivityRes{
	repeated ItemBrief items = 1;
	optional ErrorCode errcode = 2;
}

message GetGrowthFundTimeArg{
}

message GetGrowthFundTimeRes{
	optional uint32 lefttime = 1;
	optional ErrorCode err = 2;
}

message PayBuyGoodsFail{
	optional string token = 1;
}

message IBGiftTips{
	optional string orderid = 1;
}

message ArenaStarReqArg{
	optional ArenaStarReqType reqtype = 1;
	optional uint64 roleid = 2;
	optional ArenaStarType zantype = 3;
}

message ArenaStarReqRes{
	optional ErrorCode errorcode = 1;
	repeated ArenaStarTopRoleData toproledata = 2;
	optional uint32 seasonbegintime = 3;
	optional uint32 seasonendtime = 4;
	optional uint32 season_num = 5;
}

message ArenaStarPara{
	repeated ArenaStarType newdata = 1;
}

message NotifySkyTeamCreate{
	optional uint64 sky_teamid = 1;
	optional string name = 2;
}

message LeaveSkyTeamArg{
}

message LeaveSkyTeamRes{
	optional ErrorCode result = 1;
}

message SkyCraftMatchReq{
	optional SkyCraftMatchReqTpe type = 1;
}

message SkyCraftMatchRes{
	optional ErrorCode result = 1;
}

message SkyCraftMatchNtf{
	optional SkyCraftMatchNtfType type = 1;
}

message CustomBattleOpArg{
	optional CustomBattleOp op = 1;
	optional uint64 uid = 2;
	optional CustomBattleConfig config = 3;
	optional string password = 4;
	optional string token = 5;
	optional bool querycross = 6;
	optional string name = 7;
}

message CustomBattleOpRes{
	optional ErrorCode errorcode = 1;
	optional CustomBattleClientInfo info = 2;
}

message SkyCraftEliRoomNtf{
	optional SCEliRoomInfo room = 1;
}

message GetSkyCraftInfoArg{
}

message GetSkyCraftInfoRes{
	optional ErrorCode result = 1;
	optional uint64 stid = 2;
	optional string name = 3;
	optional uint32 total_num = 4;
	optional float winrate = 5;
	optional uint32 rank = 6;
	repeated SkyTeamMemberInfo members = 7;
	optional uint32 today_num = 8;
}

message GetSkyCraftRecordArg{
}

message GetSkyCraftRecordRes{
	optional ErrorCode result = 1;
	optional uint32 winnum = 2;
	optional uint32 losenum = 3;
	optional float winrate = 4;
	optional uint32 max_continuewin = 5;
	optional uint32 max_continuelose = 6;
	repeated SkyCraftBattleRecord records = 7;
}

message GetSkyCraftEliInfoArg{
}

message GetSkyCraftEliInfoRes{
	optional ErrorCode result = 1;
	repeated SCEliRoundInfo rounds = 2;
	optional SkyTeamDetail chamption = 3;
}

message GetSkyCraftTeamInfoArg{
	optional uint64 stid = 1;
}

message GetSkyCraftTeamInfoRes{
	optional ErrorCode result = 1;
	optional SkyTeamDetail team = 2;
}

message CloseSkyCraftEliNtf{
}

message ActivateFashionArg{
	optional uint32 suit_id = 1;
}

message ActivateFashionRes{
	optional ErrorCode result = 1;
	optional uint32 active_count = 2;
}

message GetGuildCamPartyRandItemRes{
	optional ErrorCode result = 1;
	repeated ItemBrief random_items = 2;
}

message GetGuildCamPartyRandItemArg{
	optional uint32 query_type = 1;
	optional uint32 npc_id = 2;
	optional uint32 sprite_id = 3;
}

message TalkGuildCampSpriteRes{
	repeated ItemBrief items = 1;
}

message TalkGuildCampSpriteArg{
	optional uint64 enemy_id = 1;
}

message GuildCampPartyReqExchangeRes{
	optional ErrorCode result = 1;
}

message GuildCampPartyReqExchangeReq{
	optional uint64 role_id = 1;
}

message guildcamppartyNotifyNtf{
	optional uint32 notify_type = 1;
	repeated GuildCampSpriteInfo sprite_list = 2;
	repeated uint32 lottery_list = 3;
	optional uint32 left_time = 4;
}

message GetGuildCampPartyExchangeInfoArg{
}

message GetGuildCampPartyExchangeInfoRes{
	optional ErrorCode result = 1;
	repeated PartyExchangeItemInfo infos = 2;
}

message IBGiftIcon{
	optional bool status = 1;
}

message GuildCampExchangeOperateArg{
	optional GuildCampItemOperate operate_type = 1;
	optional uint64 item_uid = 2;
	optional bool confirm = 3;
	optional uint64 audio_id = 4;
	optional uint32 audio_time = 5;
	optional string chat_text = 6;
}

message GuildCampExchangeOperateRes{
	optional ErrorCode result = 1;
}

message GetGuildCampPartyRewardArg{
	optional uint32 reward_id = 1;
}

message GetGuildCampPartyRewardRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
}

message GiftIbReqGoodsArg{
	optional string orderid = 1;
}

message GiftIbReqGoodsRes{
	optional ErrorCode error = 1;
}

message AbsPartyInfo{
	repeated AbsPartyBase aby = 1;
	optional uint32 abyssmailtime = 2;
}

message ArtifactComposeArg{
	optional ArtifactComposeType type = 1;
	repeated uint64 uids = 2;
	optional uint32 level = 3;
	repeated uint32 qualitys = 4;
}

message ArtifactComposeRes{
	optional ErrorCode errorcode = 1;
	optional uint64 newuid = 2;
	repeated uint64 newuids = 3;
}

message AbsEnterSceneArg{
	optional uint32 id = 1;
}

message AbsEnterSceneRes{
	optional ErrorCode error = 1;
}

message GuildCampPartyTradeNotifyArg{
	optional GuildCampPartyTradeType notify_type = 1;
	optional uint64 lauch_role_id = 2;
	optional uint32 lauch_item_id = 3;
	optional uint64 lauch_item_uid = 4;
	optional bool lauch_confirm = 5;
	optional uint64 target_role_id = 6;
	optional uint32 target_item_id = 7;
	optional uint64 target_item_uid = 8;
	optional bool target_confirm = 9;
	optional uint32 lauch_count = 10;
	optional bool open_trade = 11;
	optional string lauch_name = 12;
	optional uint32 lauch_profession = 13;
	optional string target_name = 14;
	optional uint32 target_profession = 15;
	optional GuildCampChatInfo lauch_chat_info = 16;
	optional GuildCampChatInfo target_chat_info = 17;
}

message ReplyPartyExchangeItemOptArg{
	optional uint32 operate_type = 1;
	optional uint64 lauch_role_id = 2;
}

message ReplyPartyExchangeItemOptRes{
	optional ErrorCode result = 1;
	optional uint32 lauch_role_id = 2;
	optional uint32 lauch_item_id = 3;
	optional bool lauch_status = 4;
	optional uint32 target_role_id = 5;
	optional uint32 target_item_id = 6;
	optional uint32 target_status = 7;
}

message EnchantActiveAttributeArg{
	optional uint64 uid = 1;
	optional uint32 attrID = 2;
}

message EnchantActiveAttributeRes{
	optional ErrorCode errorcode = 1;
}

message BuyExtraSkillEmblemSlotArg{
}

message BuyExtraSkillEmblemSlotRes{
	optional ErrorCode result = 1;
	optional uint32 extraSkillEmblemSlot = 2;
}

message ChangeLiveVisibleArg{
	optional bool visible = 1;
}

message ChangeLiveVisibleRes{
	optional ErrorCode error = 1;
}

message DisplayAddItemArg{
	optional uint32 add_item_id = 1;
	optional uint32 del_item_id = 2;
}

message UpdateDisplayItems{
	repeated uint32 display_items = 1;
	optional uint32 hair_color_id = 2;
	optional uint32 special_effects_id = 3;
}

message ReportBadPlayerArg{
	optional uint64 roleid = 1;
	optional uint32 scenetype = 2;
	repeated uint32 reason = 3;
}

message ReportBadPlayerRes{
	optional ErrorCode result = 1;
}

message TeamRequestPlatFreind2ClientData{
	optional bool userOffline = 1;
	optional string openID = 2;
}

message KMatchCommonArg{
	optional KMatchType type = 1;
	optional KMatchOp op = 2;
	optional bool isteam = 3;
}

message KMatchCommonRes{
	optional ErrorCode errorcode = 1;
	optional string problem_name = 2;
	optional uint32 endtime = 3;
}

message GetGuildPartyReceiveInfoArg{
}

message GetGuildPartyReceiveInfoRes{
	optional ErrorCode result = 1;
	repeated MapIntItem  receives = 2;
}

message ReturnSmeltStoneArg{
	optional uint64 uid = 1;
}

message ReturnSmeltStoneRes{
	optional ErrorCode errorcode = 1;
}

message CustomBattleLoadingNtf{
	repeated CustomBattleMatchRoleInfo roleinfos = 1;
	optional CustomBattleType type = 2;
}

message CustomBattleGMNotify{
	optional bool isgmcreate = 1;
	optional bool isgmjoin = 2;
}

message TarjaBrief{
	optional uint32 time = 1;
}

message PlatformShareAwardPara{
	optional uint32 share_scene_id = 1;
	optional uint32 weekly_share_number = 2;
	optional bool weekly_award = 3;
	optional bool disappear_redpoint = 4;
}

message NotifyPlatShareResultArg{
	optional uint32 scene_id = 1;
	optional bool redpoint_disappear = 2;
}

message GetPlatShareAwardArg{
	optional uint32 scene_id = 1;
}

message GetPlatShareAwardRes{
	optional ErrorCode result = 1;
}

message WeekEnd4v4BattleAllRoleData{
	repeated WeekEnd4v4BattleRoleData roleData = 1;
}

message WeekEnd4v4GetInfoArg{
}

message WeekEnd4v4GetInfoRes{
	optional ErrorCode errorcode = 1;
	optional uint32 thisActivityID = 2;
	optional uint32 nextActivityID = 3;
	optional uint32 joinCount = 4;
}

message GetFlowerActivityRewardArg{
}

message GetFlowerActivityRewardRes{
	optional ErrorCode errorcode = 1;
}

message SceneMobaOpArg{
	optional MobaOp op = 1;
	optional uint32 param = 2;
}

message SceneMobaOpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 nowparam = 2;
}

message HeroKillNotifyData{
	optional HeroKillUnit killer = 1;
	optional HeroKillUnit dead = 2;
	repeated HeroKillUnit assists = 3;
	optional uint32 multiKill = 4;
	optional bool isFirstBlood = 5;
}

message MobaBattleTeamRoleData{
	optional uint32 team1 = 1;
	repeated MobaRoleData datalist1 = 2;
	optional uint32 team2 = 3;
	repeated MobaRoleData datalist2 = 4;
}

message MobaRoleChangeData{
	repeated MobaRoleData changeRole = 1;
}

message MobaBattleTeamMsg{
	repeated MobaBattleTeamData teamdata = 1;
}

message TransSkillNotfiy{
	repeated uint32 skillhash = 1;
	repeated uint32 skilllevel = 2;
	optional bool isincreasing = 3;
}

message EntityTargetData{
	optional uint64 entityUID = 1;
	optional uint64 targetUID = 2;
}

message MobaSignalBroadcastData{
	optional uint32 type = 1;
	optional uint64 uid = 2;
	optional uint32 posxz = 3;
}

message MobaSignalingRes{
	optional ErrorCode errorcode = 1;
}

message MobaSignalingArg{
	optional uint32 type = 1;
}

message ActivateHairColorArg{
	optional uint32 hair_id = 1;
	optional uint32 hair_color_id = 2;
}

message ActivateHairColorRes{
	optional ErrorCode result = 1;
	optional uint32 hair_id = 2;
	repeated uint32 hair_colorid_list = 3;
}

message DHRArg{
	optional DHRReqOp op = 1;
	optional int32 id = 2;
}

message DHRRes{
	optional ErrorCode errorcode = 1;
	repeated DHRewrad2State rewstate = 2;
	optional uint32 helpcount = 3;
	optional bool wanthelp = 4;
}

message GetMobaBattleGameRecordArg{
	optional uint32 tag = 1;
}

message GetMobaBattleGameRecordRes{
	optional MobaBattleOneGame record = 1;
}

message GetMobaBattleBriefRecordArg{
}

message GetMobaBattleBriefRecordRes{
	optional uint32 totalnum = 1;
	optional uint32 winnum = 2;
	repeated MobaBattleOneGameBrief brief = 3;
}

message PetOperationOtherArg{
	optional PetOtherOp op = 1;
	optional uint64 otherroleid = 2;
}

message PetOperationOtherRes{
	optional ErrorCode errorcode = 1;
}

message PetInviteNtf{
	optional PetInviteInfo info = 1;
	optional uint32 allcount = 2;
}

message LoginReconnectReqArg{
	optional bool reconnect = 1;
}

message LoginReconnectReqRes{
	optional ErrorCode result = 1;
}

message MobaMiniMapData{
	repeated uint32 canSeePosIndex = 1;
}

message MobaAddExpData{
	optional double addexp = 1;
	optional uint32 posxz = 2;
}

message EnterBMReadySceneArg{
	optional int32 param = 1;
}

message EnterBMReadySceneRes{
	optional ErrorCode error = 1;
	optional uint32 group = 2;
}

message BMReadyTime{
	optional uint32 time = 1;
}

message QueryMayhemRankArg{
	optional int32 count = 1;
}

message QueryMayhemRankRes{
	optional ErrorCode err = 1;
	optional int32 selfrank = 2;
	repeated MayhemRankInfo rank = 3;
	optional bool infight = 4;
	optional MayhemRankInfo selfinfo = 5;
	optional uint32 gamezoneid = 6;
}

message BMFightTime{
	optional uint32 type = 1;
	optional uint32 time = 2;
}

message BMRoleSceneSync{
	optional uint32 games = 1;
	repeated BMRoleEnter roles = 2;
}

message BigMeleeRelive{
	optional uint32 time = 1;
}

message MobaHintNtf{
	optional int32 index = 1;
}

message GetMobaBattleInfoArg{
}

message GetMobaBattleInfoRes{
	optional uint32 winthisweek = 1;
	optional uint32 weekprize = 2;
	optional bool getnextweekprize = 3;
}

message GetMobaBattleWeekRewardArg{
}

message GetMobaBattleWeekRewardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 weekprize = 2;
	optional bool getnextweekprize = 3;
}

message BuySpriteEggArg{
	optional uint32 type = 1;
}

message BuySpriteEggRes{
	optional ErrorCode errorcode = 1;
	repeated ItemBrief item = 2;
	optional uint32 cooldown = 3;
	optional uint32 goldfreebuycount = 4;
	optional uint32 goldfreebuycooldown = 5;
}

message TajieHelpData{
	optional int32 sceneID = 1;
	optional int32 sceneType = 2;
	optional int32 dragonStatus = 3;
	optional int32 dragonWeakLeftTime = 4;
	optional bool isIconAppear = 5;
}

message GetEnhanceAttrArg{
	optional uint32 prof = 1;
	optional uint32 equippos = 2;
	optional uint32 enhancelevel = 3;
}

message GetEnhanceAttrRes{
	optional bool isEnd = 1;
	repeated AttributeInfo attrs = 2;
}

message GroupChatFindRoleInfoListC2S{
	optional uint32 type = 1;
}

message GroupChatFindTeamInfoListS2C{
	repeated GroupChatFindTeamInfo teamlist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatFindTeamInfoListC2S{
	optional uint32 type = 1;
}

message GroupChatFindRoleInfoListS2C{
	repeated GroupChatFindRoleInfo rolelist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatLeaderReviewListC2S{
}

message GroupChatLeaderReviewListS2C{
	repeated GroupChatFindRoleInfo roleinfolist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatPlayerIssueInfoC2S{
	optional GroupChatFindRoleInfo roleinfo = 1;
}

message GroupChatPlayerIssueInfoS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatLeaderIssueInfoC2S{
	optional GroupChatFindTeamInfo teaminfo = 1;
}

message GroupChatLeaderIssueInfoS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatLeaderReviewC2S{
	optional uint64 groupchatID = 1;
	optional uint64 issueIndex = 2;
	optional uint64 roleid = 3;
	optional bool isAgree = 4;
}

message GroupChatLeaderReviewS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatPlayerApplyC2S{
	optional uint64 groupchatID = 1;
	optional uint64 issueIndex = 2;
}

message GroupChatPlayerApplyS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatGetGroupInfoC2S{
	optional uint64 groupchatID = 1;
}

message GroupChatGetGroupInfoS2C{
	repeated GroupChatPlayerInfo playerlist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatManagerC2S{
	optional uint64 groupchatID = 1;
	repeated uint64 subrolelist = 2;
	repeated uint64 addrolelist = 3;
}

message GroupChatManagerS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatQuitC2S{
	optional uint64 groupchatID = 1;
}

message GroupChatQuitS2C{
	optional ErrorCode errorcode = 1;
}

message NotifyStartUpTypeToClient{
	optional StartUpType type = 1;
}

message HeroBattleAncientPowerData{
	repeated uint64 roleids = 1;
	repeated double ancientpower = 2;
}

message SelectHeroAncientPowerArg{
	optional uint32 selectpower = 1;
}

message SelectHeroAncientPowerRes{
	optional ErrorCode errorcode = 1;
}

message GroupChatCreateC2S{
	optional string groupchatName = 1;
	optional uint32 createtype = 2;
}

message GroupChatCreateS2C{
	optional uint64 groupchatID = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatManagerPtc{
	optional uint64 groupchatID = 1;
	repeated GroupChatPlayerInfo addrolelist = 2;
	repeated uint64 subrolelist = 3;
}

message GroupChatQuitPtc{
	optional uint64 groupchatID = 1;
	optional uint64 roleid = 2;
}

message GroupChatDismissPtc{
	optional uint64 groupchatID = 1;
	optional uint64 roleid = 2;
}

message AncientTimesArg{
	optional uint32 pos = 1;
}

message AncientTimesRes{
	optional ErrorCode error = 1;
	optional uint32 reward = 2;
}

message GroupChatClearC2S{
}

message GroupChatClearS2C{
	optional ErrorCode errorcode = 1;
}

message HoldWeddingReq{
}

message HoldWeddingRes{
	optional ErrorCode result = 1;
	optional WeddingBrief briedf = 2;
}

message GetAllWeddingInfoArg{
}

message GetAllWeddingInfoRes{
	optional ErrorCode result = 1;
	repeated WeddingBrief can_enter = 2;
	repeated WeddingBrief can_apply = 3;
	repeated bool is_apply = 4;
}

message GetWeddingInviteInfoArg{
}

message GetWeddingInviteInfoRes{
	optional ErrorCode result = 1;
	optional bool permitstranger = 2;
	repeated WeddingRoleBrief friends = 3;
	repeated WeddingRoleBrief guildmembers = 4;
	repeated WeddingRoleBrief invitelist = 5;
	repeated bool invite_enter = 6;
	repeated WeddingRoleBrief applylist = 7;
	optional uint64 weddingid = 8;
}

message EnterWeddingSceneArg{
	optional uint64 weddingid = 1;
}

message EnterWeddingSceneRes{
	optional ErrorCode result = 1;
}

message GetMarriageRelationArg{
}

message GetMarriageRelationRes{
	optional ErrorCode error = 1;
	repeated RoleOutLookBrief infos = 2;
	optional MarriageStatus marriageStatus = 3;
	optional WeddingType type = 4;
	optional int32 leftDivorceTime = 5;
	optional uint64 applyDivorceID = 6;
	optional int32 coupleOfflineTime = 7;
}

message MarriageRelationOpArg{
	optional MarriageOpType opType = 1;
	optional WeddingType type = 2;
	optional uint64 destRoleID = 3;
}

message MarriageRelationOpRes{
	optional ErrorCode error = 1;
	optional uint64 oppoRoleID = 2;
	optional string oppoRoleName = 3;
}

message WeddingInviteOperatorArg{
	optional WeddingInviteOperType type = 1;
	optional uint64 roleid = 2;
	optional uint64 weddingid = 3;
}

message WeddingInviteOperatorRes{
	optional ErrorCode result = 1;
}

message WeddingInviteNtf{
	optional WeddingInviteOperType type = 1;
	optional WeddingBrief weddinginfo = 2;
	optional WeddingRoleBrief applyer = 3;
}

message GroupChatLeaderAddRoleC2S{
	optional uint64 groupchatID = 1;
	optional uint64 roleid = 2;
	optional uint64 roleIssueIndex = 3;
}

message GroupChatLeaderAddRoleS2C{
	optional ErrorCode errorcode = 1;
}

message NotifyMarriageApplyData{
	optional MarriageApplyInfo applyInfo = 1;
	optional MarriageApplyResponse response = 2;
}

message BattleStatisticsNtf{
	repeated uint32 skillID = 1;
	repeated int32 skillCount = 2;
	repeated double skillValue = 3;
	repeated uint32 mobID = 4;
	repeated int32 mobCount = 5;
	repeated double mobValue = 6;
}

message WeddingLoadInfoNtf{
	optional WeddingBrief info = 1;
}

message WeddingStateNtf{
	optional WeddingState state = 1;
	optional uint32 lefttime = 2;
	optional uint32 happyness = 3;
	optional bool vows = 4;
}

message WeddingOperatorArg{
	optional WeddingOperType type = 1;
}

message WeddingOperatorRes{
	optional ErrorCode result = 1;
}

message WeddingEventNtf{
	optional WeddingOperType type = 1;
	optional uint64 roleid = 2;
	optional string rolename = 3;
	optional uint32 total_num = 4;
}

message TactEnterSceneArg{
	optional uint32 actid = 1;
	optional uint32 sceneid = 2;
}

message TactEnterSceneRes{
	optional ErrorCode result = 1;
}

message NotifyMarriageDivorceApplyData{
	optional bool isApplyCancel = 1;
	optional uint64 roleID = 2;
	optional string name = 3;
	optional int32 leftTime = 4;
}

message WarningRandomSet{
	repeated WarningItemSet WarningItems = 1;
	required uint64 Firer = 2;
	required uint32 skill = 3;
}

message GroupChatChangeNameC2S{
	optional uint64 groupchatID = 1;
	optional string newname = 2;
}

message GroupChatChangeNameS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatIssueCountNtf{
	optional uint32 rolecount = 1;
	optional uint32 groupcount = 2;
}

message GroupChatApplyNtf{
}

message DragonGroupRoleListC2S{
}

message DragonGroupRoleListS2C{
	repeated DragonGroupRoleInfo rolelist = 1;
	optional ErrorCode errorcode = 2;
}

message DragonGroupRecordC2S{
}

message DragonGroupRecordS2C{
	repeated DragonGroupRecordInfoList recordlist = 1;
	optional ErrorCode errorcode = 2;
}

message GetMarriageLivenessArg{
}

message GetMarriageLivenessRes{
	optional ErrorCode result = 1;
	optional uint32 liveness = 2;
	optional uint32 takedchest = 3;
	repeated PartnerLivenessItem record = 4;
}

message TakeMarriageChestArg{
	optional uint32 index = 1;
}

message TakeMarriageChestRes{
	optional ErrorCode result = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	optional uint32 takedchest = 4;
}

message CheckRoleBeforePayArg{
	optional uint64 roleid = 1;
	optional uint32 serverid = 2;
	optional string openid = 3;
}

message CheckRoleBeforePayRes{
	optional ErrorCode result = 1;
}

message ShareReportData{
	optional int32 op = 1;
	optional int32 type = 2;
}

message ArtifactDeityStoveOpArg{
	optional ArtifactDeityStoveOpType type = 1;
	optional uint64 uid1 = 2;
	optional uint64 uid2 = 3;
	optional bool isUsedStone = 4;
}

message ArtifactDeityStoveOpRes{
	optional ErrorCode errorcode = 1;
}

message ThemeActivityChangeData{
	optional bool ishint = 1;
	repeated SpFirstCompleteScene scene = 2;
	optional uint32 actid = 3;
}

message StartWeddingCarArg{
}

message StartWeddingCarRes{
	optional ErrorCode result = 1;
}

message ThemeActivityHintArg{
	optional uint32 actid = 1;
}

message ThemeActivityHintRes{
	optional ErrorCode result = 1;
}

message WeddingCarNotify{
	optional UnitAppearance role1 = 1;
	optional UnitAppearance role2 = 2;
}

message BackFlowBuyOpRes{
	optional ErrorCode errorcode = 1;
	optional int32 countleft = 2;
	repeated ItemBrief items = 3;
	optional int32 countmax = 4;
	optional ItemBrief cost = 5;
}

message BackFlowBuyOpArg{
	optional int32 op = 1;
}

message BackFlowOpenNtf{
	optional bool isopen = 1;
}

message TransformOpArg{
	optional int32 op = 1;
	optional string roleid = 2;
	optional uint32 itemid = 3;
}

message TransformOpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 timeleft = 2;
}

message TransNotify{
	optional bool istrans = 1;
	optional string roleid = 2;
}

message UpgradeEquipArg{
	optional uint64 uid = 1;
}

message UpgradeEquipRes{
	optional ErrorCode errorcode = 1;
}

message InvFightAgainPara{
	optional CreateCrossBattleSceneArg data = 1;
}

message EnterBattleReadySceneArg{
	optional uint32 param = 1;
}

message EnterBattleReadySceneRes{
	optional ErrorCode error = 1;
}

message CreateOrJoinDragonGuildArg{
	optional bool iscreate = 1;
	optional uint64 dgid = 2;
	optional string dgname = 3;
}

message CreateOrJoinDragonGuildRes{
	optional ErrorCode result = 1;
	optional uint64 dgid = 2;
	optional string name = 3;
	optional uint32 cdtime = 4;
}

message MyDragonGuild{
	optional uint64 dgid = 1;
	optional uint32 position = 2;
	optional uint32 level = 3;
	optional string name = 4;
	optional uint64 totalPPT = 5;
	optional uint32 capacity = 6;
	optional uint32 memberCount = 7;
	optional uint32 mapId = 8;
	optional uint32 mapCnt = 9;
	optional uint32 firstPassTime = 10;
	optional uint32 exp = 11;
}

message FetchDGAppArg{
}

message FetchDGAppRes{
	optional ErrorCode result = 1;
	repeated uint64 roleid = 2;
	repeated string rolename = 3;
	repeated uint32 ppt = 4;
	repeated uint32 time = 5;
	repeated uint32 level = 6;
	repeated RoleType profession = 7;
}

message ChangeDragonGuildSettingArg{
	optional uint32 powerpoint = 1;
	optional uint32 needapproval = 2;
	optional string annoucement = 3;
}

message ChangeDragonGuildSettingRes{
	optional ErrorCode result = 1;
}

message DragonGuildSettingChanged{
	optional uint32 recuitPPT = 1;
	optional uint32 needApproval = 2;
	optional string annoucement = 3;
}

message DragonGuildApprovalArg{
	optional uint64 roleid = 1;
	optional uint32 type = 2;
}

message DragonGuildApprovalRes{
	optional ErrorCode result = 1;
}

message LeaveDragonGuildArg{
	optional uint64 roleid = 1;
}

message LeaveDragonGuildRes{
	optional ErrorCode result = 1;
}

message ModifyDragonGuildNameArg{
	optional string name = 1;
}

message ModifyDragonGuildNameRes{
	optional ErrorCode result = 1;
}

message DragonGuildNameNtf{
	optional string name = 1;
}

message DragonGuildMemberRes{
	optional ErrorCode result = 1;
	repeated DragonGuildMembersInfo members = 2;
}

message DragonGuildMemberArg{
	optional uint64 guildId = 1;
}

message FetchDragonGuildRes{
	optional ErrorCode result = 1;
	repeated DragonGuildInfo dragonguilds = 2;
}

message FetchDragonGuildListArg{
	optional int32 start = 1;
	optional int32 count = 2;
	optional int32 reason = 3;
	optional int32 sortType = 4;
	optional bool reverse = 5;
	optional string name = 6;
}

message GetDragonGuildTaskInfoArg{
}

message GetDragonGuildTaskInfoRes{
	optional ErrorCode errorcode = 1;
	optional uint32 exp = 2;
	repeated DragonGuildTaskInfo taskrecord = 3;
	repeated bool taskcompleted = 4;
	repeated DragonGuildTaskInfo achiverecord = 5;
	repeated bool achivecompleted = 6;
	optional string task_refreshtime = 7;
}

message GetDragonGuildTaskChestArg{
	optional DragonGuildTaskType type = 1;
	optional uint32 taskid = 2;
}

message GetDragonGuildTaskChestRes{
	optional ErrorCode errorcode = 1;
	repeated uint64 itemid = 2;
	repeated uint32 itemCount = 3;
	optional uint32 guildexp = 4;
}

message GetDragonGuildShopRes{
	optional ErrorCode result = 1;
	repeated DragonGuildShopItemClient items = 2;
}

message GetDragonGuildShopArg{
}

message BuyDragonGuildShopItemArg{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message BuyDragonGuildShopItemRes{
	optional ErrorCode result = 1;
}

message GetDragonGuildShopRecordArg{
}

message GetDragonGuildShopRecordRes{
	optional ErrorCode result = 1;
	repeated DragonGuildShopRecordItem record = 2;
}

message ChangeDragonGuildPositionArg{
	optional uint64 roleid = 1;
	optional uint32 position = 2;
}

message ChangeDragonGuildPositionRes{
	optional ErrorCode result = 1;
}

message GetDragonGuildBindInfoArg{
	optional string token = 1;
}

message GetDragonGuildBindInfoRes{
	optional GuildBindStatus bind_status = 1;
	optional string group_name = 2;
	optional ErrorCode result = 3;
}

message DragonGuildBindReq{
	optional string token = 1;
}

message DragonGuildBindRes{
	optional ErrorCode result = 1;
	optional string group_name = 2;
}

message DragonGuildJoinBindGroupArg{
	optional string token = 1;
}

message DragonGuildJoinBindGroupRes{
	optional ErrorCode result = 1;
}

message DragonGuildUnBindGroupArg{
	optional string token = 1;
}

message DragonGuildUnBindGroupRes{
	optional ErrorCode result = 1;
}

message GoBackReadyScene{
}

message GoalAwardsGetList_C2M{
	optional uint32 type = 1;
}

message GoalAwardsGetList_M2C{
	repeated GoalAwardsInfo goalAwardsList = 1;
	optional ErrorCode errorcode = 2;
}

message GoalAwardsGetAwards_C2M{
	optional uint32 goalAwardsID = 1;
}

message GoalAwardsGetAwards_M2C{
	optional uint32 gottenAwardsIndex = 1;
	optional ErrorCode errorcode = 2;
}

message GoalAwardsRedPointNtf{
	repeated uint32 typelist = 1;
}

message BattleFieldAwardNumArg{
}

message BattleFieldAwardNumRes{
	repeated BattleFieldLeftAward award = 1;
}

message BattleFieldReadyInfo{
	optional uint32 round = 1;
	optional uint32 time = 2;
	optional bool failed = 3;
	optional bool end = 4;
}

message BattleFieldRankArg{
}

message BattleFieldRankRes{
	repeated BattleFieldRank ranks = 1;
}

message BattleFieldRoleAgainst{
	repeated BattleFieldRoleSimpleInfo roles = 1;
}

message BattleFieldReliveInfo{
	optional uint32 time = 1;
}

message GetWeeklyTaskInfoArg{
}

message GetWeeklyTaskInfoRes{
	optional ErrorCode result = 1;
	repeated WeeklyTaskInfo task = 2;
	optional uint32 score = 3;
	optional uint32 askhelp_num = 4;
	repeated uint32 rewarded_box = 5;
	optional uint32 accept_level = 6;
	repeated TaskHelpInfo helpinfo = 7;
	optional uint32 lefttime = 8;
	optional uint32 remain_free_refresh_count = 9;
}

message GetWeeklyTaskRewardArg{
	optional uint32 type = 1;
	optional uint32 value = 2;
}

message GetWeeklyTaskRewardRes{
	optional ErrorCode result = 1;
	optional uint32 score = 2;
}

message RefreshWeeklyTaskArg{
	optional uint32 index = 1;
}

message RefreshWeeklyTaskRes{
	optional ErrorCode result = 1;
	optional WeeklyTaskInfo task = 2;
}

message BattleFieldRoleAgainstArg{
}

message GetCompeteDragonInfoArg{
	optional CompeteDragonOpArg opArg = 1;
}

message GetCompeteDragonInfoRes{
	optional ErrorCode error = 1;
	optional int32 leftRewardCount = 2;
	optional int32 totalRewardCount = 3;
	optional int32 canCanGetRewardCount = 4;
	optional uint32 curDNExpID = 5;
}

message BFFightTime{
	optional uint32 time = 1;
}

message FuseEquipArg{
	optional uint32 type = 1;
	optional uint64 uid = 2;
	optional uint32 itemID = 3;
}

message FuseEquipRes{
	optional ErrorCode errorcode = 1;
}

message PayScoreData{
	optional uint32 score = 1;
}

message SetPreShowArg{
	repeated uint32 showid = 1;
}

message SetPreShowRes{
	optional ErrorCode result = 1;
}

message TurnOverWeeklyTaskItemArg{
	optional uint32 index = 1;
	repeated uint64 itemuid = 2;
}

message TurnOverWeeklyTaskItemRes{
	optional ErrorCode result = 1;
}

message NpcFlArg{
	optional NpcFlReqType reqtype = 1;
	optional NpcLikeItem likeitem = 2;
	optional uint32 npcid = 3;
	optional ItemBrief role2npc = 4;
	optional ItemBrief npc2role = 5;
	optional uint32 uniteid = 6;
	optional uint32 level = 7;
}

message NpcFlRes{
	optional ErrorCode errorcode = 1;
	repeated NpcFeelingOneNpc npclist = 2;
	repeated NpcFeelingUnite unitelist = 3;
	optional uint32 giveleftcount = 4;
	optional uint32 buyleftcount = 5;
	optional uint32 buycost = 6;
	repeated NpcFlNpc2Role npcfavorrole = 7;
	repeated NpcFeelingOneNpc changenpclist = 8;
	repeated NpcFeelingUnite changeunitelist = 9;
	optional ItemBrief role2npc = 10;
	optional ItemBrief npc2role = 11;
	optional uint32 npcflleveltop = 12;
}

message GetLuckyActivityInfoArg{
}

message GetLuckyActivityInfoRes{
	optional ErrorCode errorcode = 1;
	repeated ItemRecord itemrecord = 2;
	optional uint32 currencytype = 3;
	optional uint32 price = 4;
	optional bool ispay = 5;
}

message BuyDrawReq{
}

message BuyDrawRes{
	optional ErrorCode errorcode = 1;
}

message LotteryDrawReq{
}

message LotteryDrawRes{
	optional ErrorCode errorcode = 1;
	repeated ItemRecord itemrecord = 2;
	optional uint32 price = 3;
	optional uint32 index = 4;
	optional uint32 currencytype = 5;
}

message GetDailyTaskRefreshInfoArg{
}

message GetDailyTaskRefreshInfoRes{
	optional ErrorCode result = 1;
	optional uint32 luck = 2;
	optional uint32 refresh_num = 3;
	optional uint32 extra_refresh_num = 4;
	optional uint32 today_buy_num = 5;
	repeated DailyTaskRefreshRoleInfo friendinfo = 6;
}

message GetDailyTaskAskHelpArg{
}

message GetDailyTaskAskHelpRes{
	optional ErrorCode result = 1;
	optional uint32 help_num = 2;
	repeated DailyTaskRefreshRoleInfo askinfos = 3;
	optional uint32 luck = 4;
}

message GetDailyTaskRefreshRecordArg{
}

message GetDailyTaskRefreshRecordRes{
	optional ErrorCode result = 1;
	repeated DailyTaskRefreshInfo records = 2;
}

message DailyTaskRefreshOperArg{
	optional DailyRefreshOperType type = 1;
	optional uint64 roleid = 2;
}

message DailyTaskRefreshOperRes{
	optional ErrorCode result = 1;
	optional uint32 score = 2;
	optional uint32 oldscore = 3;
}

message DailyTaskEventNtf{
	optional DailyTaskIconType type = 1;
}

message SurviveReqArg{
}

message SurviveReqRes{
	optional ErrorCode errorcode = 1;
	optional bool givereward = 2;
	optional uint32 curtopcount = 3;
	optional uint32 needtopcount = 4;
	optional uint32 point = 5;
}

message DoodadItemAllSkill{
	repeated DoodadItemSkill skills = 1;
}

message EmptyData{
}

message UpdateFreeflowHintInfo{
	optional uint32 hint_time = 1;
}

message PeerBoxArg{
	optional uint32 index = 1;
}

message PeerBoxRes{
	optional ErrorCode errorcode = 1;
	optional ItemBrief item = 2;
	optional uint32 type = 3;
}

message QueryBoxsArg{
}

message QueryBoxsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 timeleft = 2;
	repeated BoxInfos boxinfos = 3;
}

message MulActivityIconSys{
	optional uint32 id = 1;
}

message ActivatePreShowArg{
	optional uint32 id = 1;
}

message ActivatePreShowRes{
	optional ErrorCode result = 1;
}

message FashionSynthesisInfoArg{
	optional uint32 fashion_id = 1;
}

message FashionSynthesisInfoRes{
	optional uint32 fashion_id = 1;
	optional uint32 add_succes_rate = 2;
	optional ErrorCode result = 3;
}

message FashionIBShopBuyArg{
	repeated ItemBrief item = 1;
}

message FashionIBShopBuyRes{
	optional ErrorCode result = 1;
}

message WordNotify{
	optional string hint = 1;
}

message BigMeleePoint{
	optional uint32 point = 1;
	optional uint32 posxz = 2;
}

message GuildPartySummonSpiritArg{
}

message GuildPartySummonSpiritRes{
	optional ErrorCode result = 1;
}

message BigMeleePointOutLook{
	optional uint64 roleid = 1;
	optional uint32 point = 2;
}

message TaskRefreshNtf{
	optional uint32 score = 1;
	optional uint32 remain_refresh_count = 2;
}

message KickAccountJkydMsg{
	optional string msg = 1;
	optional KickType kt = 2;
}

message GuildCastFeats{
	optional uint64 roleid = 1;
	optional uint32 feats = 2;
}

message ChooseSpecialEffectsArg{
	optional uint32 special_effects_id = 1;
}

message ChooseSpecialEffectsRes{
	optional ErrorCode result = 1;
}

message EnterLeisureSceneArg{
	optional int32 index = 1;
}

message EnterLeisureSceneRes{
	optional ErrorCode errorcode = 1;
}

message BackFlowActivityOperationArg{
	optional BackFlowActOp type = 1;
	optional uint32 arg = 2;
}

message BackFlowActivityOperationRes{
	optional ErrorCode errorcode = 1;
	optional uint32 point = 2;
	repeated uint32 alreadyGet = 3;
	optional BackFlowShopData shop = 4;
	optional uint32 shopLeftTime = 5;
	optional uint32 activityLeftTime = 6;
	optional uint32 leftSmallDragonCount = 7;
	optional uint32 leftNestCount = 8;
}

message GetNewZoneBenefitArg{
}

message GetNewZoneBenefitRes{
	optional ErrorCode result = 1;
	optional bool is_open = 2;
	optional bool has_select = 3;
	repeated ZoneRoleInfo roles = 4;
	optional uint64 select_roleid = 5;
	optional uint32 total_paycnt = 6;
}

message SelectChargeBackRoleArg{
	optional uint64 roleid = 1;
}

message SelectChargeBackRoleRes{
	optional ErrorCode result = 1;
}

message UpdateStageInfoNtf{
	optional StageInfo Stages = 1;
}

message Vec3{
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message Attribute{
	repeated double basicAttribute = 1;
	repeated double percentAttribute = 2;
	repeated uint32 attrID = 3;
}

message SkillInfo{
	optional uint32 skillHash = 1;
	optional uint32 skillLevel = 2;
	optional uint32 skillpoint = 3;
	optional bool isbasic = 4;
}

message Item{
	optional uint64 uid = 1;
	optional uint32 ItemType = 2;
	optional uint32 ItemID = 3;
	optional uint32 ItemCount = 4;
	optional bool isbind = 5;
	optional uint32 cooldown = 6;
	repeated uint32 AttrID = 7;
	repeated uint32 AttrValue = 8;
	repeated uint32 EnhanceAttrId = 9;
	repeated uint32 EnhanceAttrValue = 10;
	optional uint32 EnhanceLevel = 11;
	optional uint32 EnhanceCount = 12;
	optional ItemJade ItemJade = 13;
	optional uint32 FashionLevel = 14;
	repeated CircleDrawData circleDrawDatas = 15;
	optional uint32 EmblemThirdSlot = 16;
	optional ItemEnchant enchant = 17;
	optional ItemRandAttr randAttr = 18;
	optional ItemForge forge = 19;
	repeated EffectData effects = 20;
	optional EmblemSlotType ebslottype = 21;
	optional uint32 smeltCount = 22;
	optional uint32 expirationTime = 23;
	optional ItemFuse fuse = 24;
}

message ItemJade{
	optional uint32 SlotInfo = 1;
	repeated ItemJadeSingle ItemJadeSingle = 2;
}

message ItemJadeSingle{
	optional uint32 SlotPos = 1;
	optional uint32 ItemId = 2;
	repeated uint32 AttrId = 3;
	repeated uint32 AttrValue = 4;
}

message CircleDrawData{
	optional uint32 index = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 prob = 4;
}

message ItemEnchant{
	optional uint32 enchantid = 1;
	repeated AttributeInfo attrs = 2;
	optional uint32 chooseAttrid = 3;
	repeated uint32 enchantids = 4;
	repeated AttributeInfo allAttrs = 5;
	repeated uint32 enchantBaodi = 6;
	repeated uint32 baodiCount = 7;
}

message AttributeInfo{
	optional uint32 id = 1;
	optional uint32 value = 2;
}

message ItemRandAttr{
	repeated AttributeInfo attrs = 1;
}

message ItemForge{
	repeated AttributeInfo attrs = 1;
	optional AttributeInfo unReplacedAttr = 2;
	repeated uint32 haveAttrs = 3;
}

message EffectData{
	optional uint32 effectID = 1;
	repeated EffectMultiParams multiParams = 2;
	optional bool isWork = 3;
}

message EffectMultiParams{
	optional uint32 IDType = 1;
	optional uint32 ID = 2;
	repeated int32 effectParams = 3;
}

message ItemFuse{
	optional uint32 fuseLevel = 1;
	optional uint32 fuseExpCount = 2;
}

message BuffInfo{
	optional uint32 BuffID = 1;
	optional uint32 BuffLevel = 2;
	optional uint32 LeftTime = 3;
	optional uint64 MobUID = 4;
	optional double MaxHP = 5;
	optional double CurHP = 6;
	optional uint32 StackCount = 7;
	optional bool bReduceCD = 8;
	optional int32 TransformID = 9;
}

message OutLook{
	optional OutLookGuild guild = 1;
	optional OutLookDesignation designation = 2;
	optional OutLookEquip equips = 3;
	optional OutLookTitle title = 4;
	optional OutLookOp op = 5;
	optional OutLookSprite sprite = 6;
	optional OutLookState state = 7;
	optional OutLookMilitaryRank military = 8;
	optional OutLookDisplayFashion display_fashion = 9;
	optional OutLookConsumePre pre = 10;
}

message OutLookGuild{
	optional string name = 1;
	optional uint32 icon = 2;
	optional uint64 id = 3;
}

message OutLookDesignation{
	optional uint32 id = 1;
	optional string name = 2;
}

message OutLookEquip{
	repeated uint32 itemid = 1;
	repeated uint32 enhancelevel = 2;
	repeated uint32 slot = 3;
	optional uint32 enhancemaster = 4;
}

message OutLookTitle{
	optional uint32 titleID = 1;
}

message OutLookOp{
	optional OutLookType weapon = 1;
	optional OutLookType clothes = 2;
}

message OutLookSprite{
	optional uint32 leaderid = 1;
}

message OutLookState{
	optional OutLookStateType statetype = 1;
	optional uint32 param = 2;
	optional uint64 paramother = 3;
}

message OutLookMilitaryRank{
	optional uint32 military_rank = 1;
}

message OutLookDisplayFashion{
	repeated uint32 display_fashions = 1;
	optional uint32 hair_color_id = 2;
	optional uint32 special_effects_id = 3;
}

message OutLookConsumePre{
	optional uint32 score = 1;
	repeated uint32 setid = 2;
}

message AllBuffsInfo{
	optional uint32 BuffState = 1;
	repeated int32 StateParamIndex = 2;
	repeated int32 StateParamValues = 3;
}

message SpriteInfo{
	optional uint64 uid = 1;
	optional uint32 SpriteID = 2;
	repeated uint32 AttrID = 3;
	repeated double AttrValue = 4;
	repeated double AddValue = 5;
	optional uint32 SkillID = 6;
	repeated uint32 PassiveSkillID = 7;
	optional uint32 Level = 8;
	optional uint32 EvolutionLevel = 9;
	optional uint32 Exp = 10;
	optional uint32 PowerPoint = 11;
	optional uint32 TrainExp = 12;
	repeated uint32 EvoAttrID = 13;
	repeated double EvoAttrValue = 14;
	repeated uint32 ThisLevelEvoAttrID = 15;
	repeated double ThisLevelEvoAttrValue = 16;
}

message PetSingle{
	optional uint64 uid = 1;
	optional uint32 petid = 2;
	optional uint32 level = 3;
	optional uint32 exp = 4;
	optional uint32 sex = 5;
	optional uint32 power = 6;
	optional uint32 mood = 7;
	optional uint32 hungry = 8;
	repeated uint32 fixedskills = 9;
	repeated uint32 randskills = 10;
	optional SPetRecord record = 11;
	optional uint32 max_level = 12;
	optional bool canpairride = 13;
}

message SPetRecord{
	optional uint32 touchStartTime = 1;
	optional uint32 touchHourAttr = 2;
	optional uint32 touchTodayAttr = 3;
	optional uint32 followStartTime = 4;
	optional uint32 followTodayAttr = 5;
	optional uint32 hungryStartTime = 6;
	optional uint32 moodStartTime = 7;
	optional uint32 max_level = 8;
}

message UnitAppearanceTeam{
	optional uint32 teamid = 1;
	optional bool haspassword = 2;
}

message TargetHurtInfo{
	optional uint64 UnitID = 1;
	optional DamageResult Result = 2;
}

message DamageResult{
	optional uint32 Result = 1;
	optional double Value = 2;
	optional int32 Flag = 3;
	optional uint32 DamageType = 4;
	optional int32 ElementType = 5;
	optional bool IsTargetDead = 6;
	optional int32 ComboCount = 7;
}

message DoodadInfo{
	optional int32 waveid = 1;
	optional int32 type = 2;
	optional uint32 id = 3;
	optional uint32 count = 4;
}

message BattleRewardChest{
	optional int32 chestType = 1;
	optional int32 itemID = 2;
	optional int32 itemCount = 3;
	optional bool isbind = 4;
}

message ItemBrief{
	optional uint32 itemID = 1;
	optional uint32 itemCount = 2;
	optional bool isbind = 3;
	optional uint32 cooldown = 4;
}

message ComAgate{
	optional uint32 itemId = 1;
	optional uint32 comNum = 2;
}

message RankList{
	repeated RankData RankData = 1;
}

message RankData{
	optional uint64 RoleId = 1;
	optional string RoleName = 2;
	optional uint32 RoleLevel = 3;
	optional uint32 time = 4;
	optional float damage = 5;
	optional uint32 powerpoint = 6;
	optional uint32 flowercount = 7;
	optional uint32 Rank = 8;
	optional uint32 guildicon = 9;
	optional string guildname = 10;
	optional uint32 pkpoint = 11;
	optional uint32 tshowvotecount = 12;
	optional uint32 intervaltimestamp = 13;
	optional uint32 profession = 14;
	repeated uint64 RoleIds = 15;
	repeated string RoleNames = 16;
	optional uint32 towerHardLevel = 17;
	optional uint32 towerFloor = 18;
	optional uint32 towerThroughTime = 19;
	repeated MapIntItem receiveFlowers = 20;
	optional uint32 guildBossIndex = 21;
	optional string guildBossName = 22;
	optional string guildBossDpsMax = 23;
	optional uint32 titleID = 24;
	repeated uint32 titleIDs = 25;
	optional int32 commendNum = 26;
	optional uint32 sceneid = 27;
	optional uint32 bossavghppercent = 28;
	optional int32 groupid = 29;
	optional uint64 petuid = 30;
	optional uint32 petid = 31;
	optional string headpic = 32;
	optional StartUpType starttype = 33;
	optional bool is_vip = 34;
	optional bool is_svip = 35;
	optional uint32 usetime = 36;
	optional LeagueRankData leagueinfo = 37;
	optional HeroRankData heroinfo = 38;
	optional string strRoleid = 39;
	optional uint32 starlevel = 40;
	optional uint32 usectime = 41;
	optional MilitaryRankData military_info = 42;
	optional PkRankExtraData pkextradata = 43;
	optional SkyCraftRankData scdata = 44;
	optional SurviveRankData survive = 45;
	optional SkyCityRankData skycity = 46;
}

message MapIntItem{
	optional uint64 key = 1;
	optional uint32 value = 2;
}

message LeagueRankData{
	optional uint64 league_teamid = 1;
	optional uint32 serverid = 2;
	optional string servername = 3;
	optional string teamname = 4;
	optional uint32 point = 5;
	optional uint32 winnum = 6;
	optional float winrate = 7;
	optional uint32 continuewin = 8;
	optional uint32 joincount = 9;
}

message HeroRankData{
	optional double eloPoint = 1;
	optional uint32 totalNum = 2;
	optional uint32 winNum = 3;
	optional uint32 continueWinNum = 4;
	optional uint32 maxKillNum = 5;
}

message MilitaryRankData{
	optional uint32 military_exploit = 1;
	optional uint32 military_rank = 2;
	optional uint32 total_num = 3;
}

message PkRankExtraData{
	optional uint32 joincount = 1;
	optional float winrate = 2;
	optional uint32 continuewin = 3;
}

message SkyCraftRankData{
	optional uint64 stid = 1;
	optional string teamname = 2;
	optional uint32 point = 3;
	optional uint32 winnum = 4;
	optional float winrate = 5;
}

message SurviveRankData{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 serverid = 3;
	optional uint32 point = 4;
}

message SkyCityRankData{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 floor = 3;
	optional uint32 killer = 4;
	optional uint32 job = 5;
	optional double fight = 6;
}

message BagExpandData{
	optional BagType type = 1;
	optional uint32 num = 2;
	optional uint32 count = 3;
}

message ActivityRecord{
	repeated uint32 ActivityId = 1;
	repeated uint32 FinishCount = 2;
	optional uint32 ActivityAllValue = 3;
	optional uint32 DoubleActivityId = 4;
	optional uint32 ChestGetInfo = 5;
	repeated uint32 NeedFinishCount = 6;
	optional uint32 activityWeekValue = 7;
	optional uint64 LastUpdateTime = 8;
	optional uint32 guildladdertime = 9;
}

message RewardInfo{
	optional uint64 UniqueId = 1;
	optional uint32 Type = 2;
	optional uint32 SubType = 3;
	optional uint32 State = 4;
	optional uint32 TimeStamp = 5;
	repeated string Param = 6;
	repeated ItemBrief Item = 7;
	optional string name = 8;
	optional string comment = 9;
	optional uint32 uniqueday = 10;
	optional bool isget = 11;
}

message BackFlowBuy{
	optional uint32 index = 1;
	optional uint32 day = 2;
	optional uint32 count = 3;
}

message SweepResult{
	repeated ItemBrief items = 1;
}

message ClientReviveInfo{
	optional bool islimit = 1;
}

message ShopItem{
	optional Item Item = 1;
	optional uint32 slot = 2;
	optional uint32 buycount = 3;
	optional uint32 dailybuycount = 4;
	optional uint32 weekbuycount = 5;
}

message TeamBrief{
	optional int32 teamID = 1;
	optional int32 teamMemberCount = 2;
	optional int32 teamState = 3;
	optional string leaderName = 4;
	optional uint32 expID = 5;
	optional bool haspassword = 6;
	optional uint32 leaderLevel = 7;
	optional uint32 leaderPowerPoint = 8;
	optional RoleType leaderProfession = 9;
	optional TeamExtraInfo extrainfo = 10;
	optional string password = 11;
	optional KMatchType matchtype = 12;
	optional bool kingback = 13;
}

message TeamExtraInfo{
	optional uint32 pptlimit = 1;
	optional uint32 costindex = 2;
	optional string league_teamname = 3;
}

message TeamMember{
	optional uint64 memberID = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional int32 level = 4;
	optional uint32 powerpoint = 5;
	optional int32 state = 6;
	repeated uint32 fashion = 7;
	optional uint32 sceneID = 8;
	optional int32 leftcount = 9;
	optional bool robot = 10;
	optional uint64 guildid = 11;
	optional uint64 dragonguildid = 12;
	optional OutLook outlook = 13;
	optional uint32 vipLevel = 14;
	optional uint32 paymemberid = 15;
	optional TeamMemberType membertype = 16;
	optional uint32 tarjatime = 17;
	optional uint32 serverid = 18;
	optional bool kingback = 19;
}

message TeamCountClient{
	optional int32 teamtype = 1;
	optional int32 leftcount = 2;
	optional int32 buycount = 3;
	optional int32 maxcount = 4;
}

message ChatInfo{
	optional uint32 channel = 1;
	optional ChatSource source = 2;
	optional ChatDest dest = 3;
	optional string info = 4;
	repeated ChatParam param = 5;
	optional uint32 priority = 6;
	optional uint32 time = 7;
	optional bool issystem = 8;
	optional uint64 storeKeyId = 9;
	optional uint64 audioUid = 10;
	optional uint32 audioLen = 11;
	repeated ChatSource destList = 12;
	optional bool isbroadcast = 13;
	optional uint32 level = 14;
	optional bool isRecruit = 15;
	optional bool isDragonGuildRecruit = 16;
	optional GroupChatTeamInfo groupchatinfo = 17;
	optional ChatSource groupchatnewrole = 18;
}

message ChatSource{
	optional uint64 roleid = 1;
	optional uint32 profession = 2;
	optional string name = 3;
	optional uint32 viplevel = 4;
	optional uint32 powerpoint = 5;
	optional uint32 coverDesignationID = 6;
	optional uint32 paymemberid = 7;
	optional uint32 military_rank = 8;
	optional uint32 heroid = 9;
	optional string desname = 10;
	optional PayConsume pre = 11;
	optional bool isBackFlow = 12;
}

message PayConsume{
	optional uint32 lastconsumetime = 1;
	optional uint32 consumescore = 2;
	optional uint32 maxconsumelv = 3;
	optional uint32 thismonthcost = 4;
	repeated uint32 setid = 5;
	optional uint32 lastcheckdowntime = 6;
	repeated uint32 activateid = 7;
}

message ChatDest{
	repeated uint64 roleid = 1;
}

message ChatParam{
	optional ChatParamRole role = 1;
	optional ChatParamItem item = 2;
	optional ChatParamNum num = 3;
	optional ChatParamGuild guild = 4;
	optional ChatParamTeam team = 5;
	optional ChatParamLink link = 6;
	optional ChatParamSpectate spectate = 7;
	optional ChatParamDragonGuild dragonguild = 8;
}

message ChatParamRole{
	optional uint64 uniqueid = 1;
	optional string name = 2;
	optional uint32 profession = 3;
}

message ChatParamItem{
	optional ItemBrief item = 1;
}

message ChatParamNum{
	optional uint32 num = 1;
}

message ChatParamGuild{
	optional uint64 guildid = 1;
	optional string guildname = 2;
}

message ChatParamTeam{
	optional uint32 teamid = 1;
	optional uint32 expeditionid = 2;
	optional string teamname = 3;
}

message ChatParamLink{
	optional uint32 id = 1;
	optional string content = 2;
	repeated uint64 param = 3;
}

message ChatParamSpectate{
	optional uint32 liveid = 1;
	optional uint32 livetype = 2;
}

message ChatParamDragonGuild{
	optional uint64 dragonguildId = 1;
	optional string dragonguildname = 2;
}

message GroupChatTeamInfo{
	optional uint64 groupchatID = 1;
	optional uint64 leaderRoleID = 2;
	optional string groupchatName = 3;
	optional uint32 createtype = 4;
	optional uint32 rolecount = 5;
	optional uint32 groupcreatetime = 6;
}

message FashionData{
	optional uint32 itemID = 1;
	optional uint32 level = 2;
	optional uint64 uid = 3;
	optional uint32 timeleft = 4;
	optional uint32 pos = 5;
	repeated AttributeInfo attrs = 6;
	optional uint32 timeend = 7;
}

message LoginGateData{
	optional string ip = 1;
	optional string zonename = 2;
	optional string servername = 3;
	optional int32 port = 4;
	optional int32 serverid = 5;
	optional uint32 state = 6;
	optional uint32 flag = 7;
	optional bool isbackflow = 8;
	optional uint32 backflowlevel = 9;
}

message SelfServerData{
	optional LoginGateData servers = 1;
	optional uint32 level = 2;
}

message PlatNotice{
	optional uint32 type = 1;
	optional uint32 noticeid = 2;
	optional bool isopen = 3;
	optional uint32 areaid = 4;
	optional uint32 platid = 5;
	optional string content = 6;
	optional uint32 updatetime = 7;
	optional bool isnew = 8;
	optional string title = 9;
}

message PlatBanAccount{
	optional string reason = 1;
	optional uint32 endtime = 2;
}

message PlatFriendServer{
	optional string openid = 1;
	optional int32 serverid = 2;
	optional string rolename = 3;
	optional int32 level = 4;
}

message Friend2Client{
	optional uint64 roleid = 1;
	optional uint32 profession = 2;
	optional uint32 level = 3;
	optional uint32 powerpoint = 4;
	optional uint32 viplevel = 5;
	optional uint32 lastlogin = 6;
	optional string name = 7;
	optional uint32 roleaudioid = 8;
	optional uint32 audioid = 9;
	optional uint32 degreelevel = 10;
	optional uint32 degreeleft = 11;
	optional uint32 daydegree = 12;
	optional uint32 receivegiftstate = 13;
	optional uint32 sendgiftstate = 14;
	optional uint32 alldegree = 15;
	optional uint32 receiveall = 16;
	optional string guildname = 17;
	optional uint32 receivetime = 18;
	optional uint32 nickid = 19;
	optional uint32 titleid = 20;
	optional uint32 paymemberid = 21;
	optional EMentorRelationPosition mentortype = 22;
	optional string openid = 23;
	optional string nickname = 24;
}

message FlowerInfo2Client{
	optional uint64 roleID = 1;
	optional uint32 itemID = 2;
	optional uint32 count = 3;
	optional uint32 timestamp = 4;
	optional string roleName = 5;
}

message ReceiveRoleFlowerInfo2Client{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	repeated MapIntItem flowers = 3;
}

message GuildInfo{
	optional string name = 1;
	optional uint64 leaderID = 2;
	optional string leaderName = 3;
	optional int32 level = 4;
	optional int32 memberCount = 5;
	optional bool isSendApplication = 6;
	optional uint64 id = 7;
	optional int32 ppt = 8;
	optional int32 needapproval = 9;
	optional int32 icon = 10;
	optional int32 capacity = 11;
	optional string annoucement = 12;
	optional uint32 guildExp = 13;
	optional uint32 titleID = 14;
	optional uint32 prestige = 15;
}

message GuildMemberData{
	optional string name = 1;
	optional uint64 roleid = 2;
	optional int32 position = 3;
	optional uint32 contribute = 4;
	optional uint32 ppt = 5;
	optional uint32 flag = 6;
	optional uint32 level = 7;
	optional RoleType profession = 8;
	optional uint32 lastlogin = 9;
	optional uint32 vip = 10;
	optional bool isonline = 11;
	optional uint32 activity = 12;
	optional uint32 paymemberid = 13;
	optional uint32 title = 14;
	optional uint32 task_luck = 15;
}

message GHisRecord{
	optional uint32 type = 1;
	optional uint32 time = 2;
	optional uint32 position = 3;
	optional uint64 roleid = 4;
	optional string rolename = 5;
}

message ClientInfo{
	optional int32 PlatID = 1;
	optional string ClientVersion = 2;
	optional string SystemSoftware = 3;
	optional string SystemHardware = 4;
	optional string TelecomOper = 5;
	optional string Network = 6;
	optional int32 ScreenWidth = 7;
	optional int32 ScreenHight = 8;
	optional float Density = 9;
	optional string LoginChannel = 10;
	optional string CpuHardware = 11;
	optional int32 Memory = 12;
	optional string GLRender = 13;
	optional string GLVersion = 14;
	optional string DeviceId = 15;
	optional string ip = 16;
	optional string pf = 17;
	optional StartUpType starttype = 18;
	optional string token = 19;
	optional LoginType logintype = 20;
}

message LoginExtraData{
	optional bool is_backflow_server = 1;
	optional uint32 backflow_level = 2;
}

message LoginReconnectInfo{
	optional uint32 scenetemplateid = 1;
	optional uint32 scenetime = 2;
}

message GuildBonusAppear{
	optional uint32 bonusID = 1;
	optional uint32 bonusType = 2;
	optional uint32 maxPeopleNum = 3;
	optional uint32 bonusStatus = 4;
	optional uint32 leftOpenTime = 5;
	optional uint32 leftBringBackTime = 6;
	optional string sourceName = 7;
	optional uint32 alreadyGetPeopleNum = 8;
	optional uint32 needCheckInNum = 9;
	optional uint32 bonusContentType = 10;
	optional uint64 sourceID = 11;
	optional string iconUrl = 12;
}

message GetGuildBonusInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional uint32 getNum = 3;
	optional uint32 getTime = 4;
	optional bool canThank = 5;
}

message PrivateChatList{
	repeated ChatSource rolelist = 1;
	repeated bool hasOfflineChat = 2;
	repeated uint32 lastChatTime = 3;
}

message BattleData{
	optional int32 timespan = 1;
	repeated uint32 pickDoodadWaveID = 2;
	optional int32 Combo = 3;
	optional int32 BeHit = 4;
	optional uint32 hppercent = 5;
	repeated uint32 smallmonster = 6;
	repeated uint32 bossrush = 7;
	optional int32 OpenChest = 8;
	optional CliAntiCheatInfo anticheatInfo = 9;
	optional bool isfailed = 10;
	optional BattleFailedData failedinfo = 11;
	optional uint32 found = 12;
	optional uint32 npchp = 13;
	repeated uint32 monster_id = 14;
	repeated uint32 monster_num = 15;
}

message CliAntiCheatInfo{
	optional uint32 currentHp = 1;
	optional uint32 totalDamage = 2;
	optional uint32 totalHurt = 3;
	optional uint32 totalRecovery = 4;
	repeated uint32 monsterRfsTimes = 5;
	optional string battleStamp = 6;
}

message BattleFailedData{
	optional uint32 timespan = 1;
	optional uint32 hppercent = 2;
	optional uint32 deathcount = 3;
}

message PositionCheck{
	optional uint64 uid = 1;
	optional Vec3 position = 2;
	optional float face = 3;
}

message RollInfo{
	optional uint64 roleID = 1;
	optional uint32 rollValue = 2;
}

message GuildGoblinRoleKillInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional int32 killNum = 3;
	optional int32 ability = 4;
	optional int32 roleLevel = 5;
}

message PkRoleInfo{
	optional PkRoleRec pkrec = 1;
	optional RoleSmallInfo rolebrief = 2;
	optional uint32 serverid = 3;
}

message PkRoleRec{
	optional uint32 point = 1;
	optional uint32 win = 2;
	optional uint32 lose = 3;
	optional uint32 draw = 4;
	repeated uint32 records = 5;
}

message RoleSmallInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional uint32 roleLevel = 3;
	optional uint32 roleProfession = 4;
	optional uint32 rolePPT = 5;
}

message RoleBriefInfo{
	optional RoleType type = 1;
	optional uint64 roleID = 2;
	optional string name = 3;
	optional int32 level = 4;
	repeated uint32 fashion = 5;
	optional OutLook outlook = 6;
	optional uint32 ppt = 7;
}

message PetInviteInfo{
	optional uint64 roleid = 1;
	optional uint64 petuid = 2;
	optional uint32 petconfigid = 3;
	optional string rolename = 4;
	optional uint32 profession = 5;
	optional uint32 ppt = 6;
	optional uint32 petppt = 7;
}

message petGetSkill{
	optional uint32 petLvl = 1;
	optional uint32 skillid = 2;
}

message StageResultInfo{
	optional uint32 stageType = 1;
	optional uint32 stageID = 2;
	optional bool isStageFailed = 3;
	optional uint32 timespan = 4;
	optional uint32 abyssid = 5;
	optional MobaBattleResult mobabattle = 6;
	optional WeekEnd4v4TeamResult weekend4v4tmresult = 7;
	optional bool end = 8;
}

message MobaBattleResult{
	optional uint64 mvpid = 1;
	optional uint64 losemvpid = 2;
	optional uint64 damagemaxid = 3;
	optional uint64 behitdamagemaxid = 4;
}

message WeekEnd4v4TeamResult{
	optional uint32 teamSeconds = 1;
	optional uint32 redTeamScore = 2;
	optional uint32 blueTeamScore = 3;
	repeated uint64 hasRewardsID = 4;
}

message SpecialStageInfo{
	optional uint32 arenaup = 1;
	optional BossRushResult bossrushresult = 2;
	optional bool arenamissed = 3;
}

message BossRushResult{
	optional uint32 currentmax = 1;
	optional uint32 lastmax = 2;
}

message StageRoleResult{
	optional uint32 money = 1;
	optional uint32 exp = 2;
	optional uint32 stars = 3;
	optional uint32 firststars = 4;
	optional uint32 startLevel = 5;
	optional uint32 startExp = 6;
	optional string rolename = 7;
	repeated ItemBrief items = 8;
	repeated ItemBrief starreward = 9;
	optional GuildGoblinResult guildGoblinResult = 10;
	optional PkResult pkresult = 11;
	optional uint64 roleid = 12;
	optional uint32 score = 13;
	optional float damage = 14;
	optional uint32 deathcount = 15;
	optional uint32 maxcombo = 16;
	optional uint32 vipscore = 17;
	optional int32 viplevel = 18;
	optional uint32 endlevel = 19;
	optional uint32 endexp = 20;
	optional uint64 gid = 21;
	optional bool isLeader = 22;
	optional int32 profession = 23;
	optional TowerResult towerResult = 24;
	optional int32 killcount = 25;
	optional int32 killcontinuemax = 26;
	optional float treat = 27;
	optional PVPResult pvpresult = 28;
	repeated BattleRewardChest box = 29;
	repeated ItemBrief guildreward = 30;
	optional bool ishelper = 31;
	optional DragonExpResult deresult = 32;
	optional SkyCityFinalInfo skycity = 33;
	optional bool isexpseal = 34;
	optional uint32 guildexp = 35;
	optional uint32 guildcon = 36;
	optional uint32 guilddargon = 37;
	optional uint32 reswar = 38;
	optional ItemBrief teamcostreward = 39;
	optional uint32 serverid = 40;
	optional HorseAward horse = 41;
	optional InvFightBattleResult invfightresult = 42;
	optional HeroBattleResult heroresult = 43;
	optional uint32 military_rank = 44;
	optional uint32 assitnum = 45;
	optional uint32 behitdamage = 46;
	optional uint32 multikillcountmax = 47;
	optional CustomBattleResult custombattle = 48;
	optional MobaBattleRoleResult mobabattle = 49;
	optional WeekEnd4v4BattleRoleData weekend4v4roledata = 50;
	optional BigMeleeBattleResult bigmelee = 51;
	optional BattleFieldBattleResult battlefield = 52;
	optional bool isboxexcept = 53;
}

message GuildGoblinResult{
	optional bool getGuildBonus = 1;
	optional int32 curRank = 2;
}

message PkResult{
	optional PkResultType result = 1;
	optional int32 winpoint = 2;
	optional uint32 honorpoint = 3;
	optional int32 rank = 4;
	repeated ItemBrief items = 5;
	optional int32 firstrank = 6;
	optional uint32 dragoncount = 7;
	optional KKVsRoleState mystate = 8;
	optional KKVsRoleState opstate = 9;
}

message TowerResult{
	optional bool isNewRecord = 1;
	optional int32 towerFloor = 2;
}

message PVPResult{
	optional int32 mygroup = 1;
	optional int32 wingroup = 2;
	optional int32 killleadercount = 3;
	optional bool ismvp = 4;
	repeated ItemBrief dayjoinreward = 5;
	repeated ItemBrief winreward = 6;
}

message DragonExpResult{
	optional bool iswin = 1;
	optional int32 bosshurthp = 2;
	optional int32 bosslefthp = 3;
	repeated ItemBrief joinreward = 4;
	repeated ItemBrief winreward = 5;
	optional uint32 sceneid = 6;
}

message SkyCityFinalBaseInfo{
	optional uint64 uuid = 1;
	optional uint32 job = 2;
	optional uint32 killer = 3;
	optional uint32 dead = 4;
	optional uint32 intimategree = 5;
	optional bool ismvp = 6;
	optional bool isfriend = 7;
}

message HorseAward{
	optional uint32 time = 1;
	optional uint32 horse = 2;
	optional uint32 rank = 3;
}

message InvFightBattleResult{
	optional PkResultType resulttype = 1;
	optional string opname = 2;
}

message HeroBattleResult{
	optional HeroBattleOver over = 1;
	optional uint64 mvpid = 2;
	optional uint32 mvpheroid = 3;
	optional uint32 teamid = 4;
	repeated ItemBrief dayjoinreward = 5;
	repeated ItemBrief winreward = 6;
	optional uint64 losemvpid = 7;
	optional float kda = 8;
}

message CustomBattleResult{
	optional PkResultType result = 1;
	optional CustomBattleType type = 2;
	optional int32 point = 3;
	optional int32 rank = 4;
	optional uint32 fightgroup = 5;
	optional bool ismvp = 6;
}

message MobaBattleRoleResult{
	optional bool isWin = 1;
	optional uint32 heroid = 2;
	optional float kda = 3;
	optional bool isescape = 4;
	repeated ItemBrief winreward = 5;
}

message WeekEnd4v4BattleRoleData{
	optional uint64 roleid = 1;
	optional uint32 redblue = 2;
	optional uint32 score = 3;
	optional uint32 killCount = 4;
	optional uint32 bekilledCount = 5;
	optional uint32 timeSeconds = 6;
	optional string rolename = 7;
	optional uint32 profession = 8;
	optional uint32 rolelevel = 9;
	optional uint32 rank = 10;
	optional bool isline = 11;
}

message BigMeleeBattleResult{
	optional uint64 roleid = 1;
	optional uint32 rank = 2;
	optional uint32 score = 3;
	optional uint32 kill = 4;
	optional uint32 death = 5;
	repeated ItemBrief items = 6;
}

message BattleFieldBattleResult{
	optional uint64 roleid = 1;
	optional uint32 rank = 2;
	optional uint32 point = 3;
	optional uint32 killer = 4;
	optional uint32 death = 5;
	optional string svrname = 6;
	repeated ItemBrief items = 7;
	optional bool ismvp = 8;
	optional double hurt = 9;
	optional string name = 10;
	optional uint32 job = 11;
	optional uint32 killstreak = 12;
}

message StageWatchInfo{
	optional uint32 wathccount = 1;
	optional uint32 likecount = 2;
}

message StageGuildInfo{
	optional uint32 guildexp = 1;
	optional uint32 guildcon = 2;
	optional uint32 dragon = 3;
}

message SMail{
	optional uint64 uid = 1;
	optional uint32 type = 2;
	optional bool isread = 3;
	optional bool isdelete = 4;
	optional uint32 state = 5;
	optional uint32 timestamp = 6;
	optional uint32 timeexpire = 7;
	optional bool istemplate = 8;
	optional uint64 srcid = 9;
	optional string srcname = 10;
	optional string title = 11;
	optional string content = 12;
	repeated ItemBrief items = 13;
	optional int32 timeleft = 14;
	repeated Item xitems = 15;
	optional int32 reason = 16;
	optional int32 subreason = 17;
	optional string extparam = 18;
}

message ExpFindBackInfo{
	optional ExpBackType type = 1;
	optional int32 usedCount = 2;
}

message TowerRecord{
	optional int32 openHardLevel = 1;
	optional int32 reachTopFloor = 2;
	optional int32 bestTime = 3;
	optional int32 sweepTime = 4;
	optional int32 sweepFloor = 5;
	optional int32 curFloor = 6;
	optional int32 curCostTime = 7;
	optional int32 refreshCount = 8;
	optional int32 refreshResult = 9;
	repeated int32 gotFloorFirstPassReward = 10;
}

message StcDesignationInfo{
	optional uint32 designationID = 1;
	optional bool isNew = 2;
	optional uint32 reachTimestamp = 3;
	optional string name = 4;
	optional uint32 type = 5;
}

message AchieveBriefInfo{
	optional uint32 achieveClassifyType = 1;
	optional uint32 achievePoint = 2;
	optional uint32 maxAchievePoint = 3;
	optional uint32 canRewardCount = 4;
}

message StcAchieveInfo{
	optional uint32 achieveID = 1;
	optional uint32 rewardStatus = 2;
}

message RoleAllInfo{
	optional RoleBrief Brief = 1;
	optional Attribute Attributes = 2;
	optional BagContent Bag = 3;
	optional RoleLotteryInfo Lottery = 4;
	optional StageInfo Stages = 5;
	optional CheckinRecord CheckinRecord = 6;
	optional ActivityRecord ActivityRecord = 7;
	optional ArenaRecord ArenaRecord = 8;
	optional RewardRecord RewardRecord = 9;
	optional BuyGoldFatInfo BuyInfo = 10;
	optional ShopRecord shoprecord = 11;
	optional FlowerRecord flowerrecord = 12;
	optional GuildRecord guildrecord = 13;
	optional PkRecord pkrecord = 14;
	optional RoleConfig config = 15;
	optional TShowVoteRecord tshowVoteRecord = 16;
	optional CampRoleRecord campRoleRecord = 17;
	optional RoleFindBackRecord findBackRecord = 18;
	optional RoleExtraInfo ExtraInfo = 19;
	optional TowerRecord2DB towerRecord = 20;
	optional LoginRecord loginrecord = 21;
	optional PvpData pvpdata = 22;
	optional SQARecord qaRecord = 23;
	optional DragonRecord2DB dragonInfo = 24;
	optional FashionRecord fashionrecord = 25;
	optional LiveRecord liverecord = 26;
	optional PayV2Record payv2 = 27;
	optional PetSysData petsys = 28;
	optional FirstPassRecord firstPassRecord = 29;
	optional IBShopAllRecord ibShopItems = 30;
	optional SpriteRecord SpriteRecord = 31;
	optional SAtlasRecord atlas = 32;
	optional RiskInfo2DB riskRecord = 33;
	optional RoleTask task_record = 34;
	optional IdipData idipRecord = 35;
	optional SpActivity spActivityRecord = 36;
	optional Designation2DB designatinoRecord = 37;
	optional LevelSealRecord levelsealData = 38;
	optional SBuffRecord buffrecord = 39;
	optional RolePushInfo pushInfo = 40;
	optional QQVipInfo qqvip = 41;
	optional TeamRecord teamdbinfo = 42;
	optional RoleMiscData misc = 43;
	optional RolePartnerData partner = 44;
	optional AchieveDbInfo achieve = 45;
	optional SkillRecord skill = 46;
	optional SChatRecord chat = 47;
	optional HeroBattleRecord herobattle = 48;
	optional ReportDataRecord reportdata = 49;
	optional RoleSystem system = 50;
	optional MilitaryRecord military = 51;
	optional PlatformShareResult platformshareresult = 52;
	optional WeekEnd4v4Data weekend4v4Data = 53;
	optional TajieHelp2DB tajieHelpRecord = 54;
	optional DragonGroupDB dragongroupdb = 55;
	optional BattleFieldData battlefield = 56;
	optional NpcFeelingRecord npcflrec = 57;
	optional CompeteDragonInfo2DB competeDragonInfo = 58;
	optional DragonGuildRecordData dragonguild = 59;
}

message RoleBrief{
	optional RoleType type = 1;
	optional string name = 2;
	optional uint64 roleID = 3;
	optional string accountID = 4;
	optional uint32 level = 5;
	optional uint64 exp = 6;
	optional uint64 maxexp = 7;
	optional Vec3 position = 8;
	optional int32 sceneID = 9;
	optional float face = 10;
	optional uint32 offlineTime = 11;
	optional bool completeguidestage = 12;
	optional uint64 tutorialBits = 13;
	optional uint32 onlimetime = 14;
	optional uint32 auctionPoint = 15;
	optional uint32 campID = 16;
	optional uint32 accountNumberLastDay = 17;
	optional uint64 lastAccountTime = 18;
	optional uint32 nickID = 19;
	optional bytes tutorialBitsArray = 20;
	optional uint32 titleID = 21;
	optional uint32 paymemberid = 22;
	optional uint32 changenamecount = 23;
	optional OutLookOp op = 24;
	optional uint64 inittime = 25;
}

message BagContent{
	repeated Item Equips = 1;
	repeated Item Emblems = 2;
	repeated Item Items = 3;
	optional uint32 enhanceSuit = 4;
	repeated uint64 virtualitems = 5;
	repeated Item Artifacts = 6;
	optional uint32 extraSkillEbSlotNum = 7;
	repeated BagExpandData expand = 8;
	optional bool FuseCompensation = 9;
	optional bool ForgeCompensation = 10;
}

message RoleLotteryInfo{
	optional uint32 lastDrawTime = 1;
	optional uint32 OneDrawCount = 2;
	optional uint32 MinimumRewardCount = 3;
	optional uint32 goldFreeDrawTime = 4;
	optional uint32 goldFreeDrawCount = 5;
	optional uint32 goldFreeDrawDay = 6;
	optional uint32 goldOneDrawCount = 7;
	optional uint32 goldMinimumRewardCount = 8;
	optional uint32 clickday = 9;
	optional uint32 clickfreetime = 10;
	optional uint32 clickfreecount = 11;
	optional uint32 clickcostcount = 12;
	repeated PandoraDrop pandora = 13;
	optional uint32 lastGiftUpdateTime = 14;
	optional uint32 shareGiftCount = 15;
	optional uint32 spriteMinGuarantee = 16;
	optional uint32 spriteNextMinGuarantee = 17;
}

message PandoraDrop{
	optional uint32 pandoraDropID = 1;
	optional uint32 betterDropTimes = 2;
	optional uint32 noUsedBestDropTimes = 3;
	optional uint32 nextBetterDropTimes = 4;
	optional uint32 noUsedNextBestDropTimes = 5;
	repeated uint32 bestDropTimes = 6;
	repeated uint32 nextBestDropTimes = 7;
}

message StageInfo{
	repeated int32 sceneID = 1;
	repeated int32 rank = 2;
	repeated int32 countscenegroupid = 3;
	repeated int32 count = 4;
	optional int32 day = 5;
	repeated int32 buycount = 6;
	repeated int32 cdscenegroupid = 7;
	repeated int32 cooldown = 8;
	repeated uint32 chapterchest = 9;
	repeated uint32 chestOpenedScene = 10;
	optional int32 helperwincount = 11;
	optional int32 helperweekwincount = 12;
	optional uint32 lastweekuptime = 13;
	optional uint32 bossrushmax = 14;
	optional int32 brupday = 15;
	optional int32 BRjoincounttoday = 16;
	optional int32 BRrefreshcounttoday = 17;
	optional BRRankState brrankstate = 18;
	repeated DEStageProgress stageprogress = 19;
	repeated StageAssistOne stageassist = 20;
	optional uint32 holidayid = 21;
	optional uint32 holidaytimes = 22;
	optional AbsPartyInfo absparty = 23;
	optional uint32 kidhelpercount = 24;
	optional uint32 tarjatime = 25;
	optional uint32 tarjaaward = 26;
	optional StageTrophy trophydata = 27;
	repeated DneRecord dnes = 28;
	optional bool despecialflag = 29;
}

message BRRankState{
	optional int32 confid = 1;
	optional int32 brbid1 = 2;
	optional int32 brbid2 = 3;
	optional int32 rank = 4;
}

message DEStageProgress{
	optional uint32 sceneid = 1;
	repeated uint32 bossids = 2;
	repeated int32 bosshppercenet = 3;
}

message StageAssistOne{
	optional uint32 stageid = 1;
	optional int32 point = 2;
}

message AbsPartyBase{
	optional uint32 type = 1;
	optional uint32 diff = 2;
}

message StageTrophy{
	repeated StageTrophyData trophydata = 1;
	optional uint64 total_score = 2;
	optional uint32 honour_rank = 3;
}

message StageTrophyData{
	optional uint32 scene_id = 1;
	optional uint32 pass_count = 2;
	optional uint32 quickly_pass_time = 3;
	optional uint64 hight_damage = 4;
	optional uint64 hight_treat = 5;
	optional uint32 help_count = 6;
	optional uint32 no_deathpass_count = 7;
	repeated TrophyGetTypeDetail get_trophy_detail = 8;
}

message TrophyGetTypeDetail{
	optional uint32 trophy_id = 1;
	repeated TrophyDetail detail = 2;
}

message TrophyDetail{
	optional uint32 tropy_order = 1;
	optional uint32 trophy_time = 2;
}

message DneRecord{
	optional uint32 dneid = 1;
	optional uint32 count = 2;
}

message CheckinRecord{
	optional uint32 CheckinInfo = 1;
	optional uint32 CheckinTime = 2;
	optional uint32 CheckinCount = 3;
}

message ArenaRecord{
	optional uint32 OptimalRank = 1;
	optional uint32 point = 2;
	optional uint32 dayupdate = 3;
	repeated uint32 pointreward = 4;
	repeated uint32 rankreward = 5;
}

message RewardRecord{
	repeated RewardInfo RewardInfo = 1;
	optional bytes given = 2;
	optional bytes taken = 3;
	optional uint32 nextdayreward = 4;
	repeated uint32 onlinereward = 5;
}

message ShopRecord{
	optional uint32 dayupdate = 1;
	repeated ShopRecordOne shops = 2;
	optional uint32 weekupdate = 3;
}

message ShopRecordOne{
	optional uint32 type = 1;
	optional uint32 updatetime = 2;
	repeated Item items = 3;
	repeated uint32 slots = 4;
	repeated ItemBrief buycount = 5;
	repeated ItemBrief dailybuycount = 6;
	optional uint32 refreshcount = 7;
	optional uint32 refreshtime = 8;
	optional uint32 refreshday = 9;
	optional bool ishint = 10;
	repeated ItemBrief weekbuycount = 11;
}

message FlowerRecord{
	repeated uint64 roleid = 1;
	repeated uint32 count = 2;
	optional uint32 updateday = 3;
	optional bool getRankReward = 4;
	optional uint32 getFlowerTime = 5;
	optional uint32 getFlowerNum = 6;
}

message GuildRecord{
	optional uint32 cardplaycount = 1;
	optional uint32 cardchangecount = 2;
	optional uint32 updateday = 3;
	optional uint32 checkin = 4;
	optional uint32 boxmask = 5;
	optional uint32 cardbuychangecount = 6;
	optional uint32 recvFatigue = 7;
	optional uint32 askBonusTime = 8;
	optional uint32 getCheckInBonusNum = 9;
	repeated uint32 darereward = 10;
	optional bool ishintcard = 11;
	repeated GuildSkill guildskills = 12;
	optional uint64 cardmatchid = 13;
	optional uint32 inheritTeaTime = 14;
	optional uint32 inheritStuTime = 15;
	optional RoleGuildBonusData bonusData = 16;
	optional uint32 guildinheritcdtime = 17;
	optional uint32 teacherinherittime = 18;
	repeated MapKeyValue partyreward = 19;
}

message GuildSkill{
	optional uint32 skillId = 1;
	optional uint32 skillLvl = 2;
}

message RoleGuildBonusData{
	repeated OnlyOnceGuildBonusData sentGuildBonus = 1;
	repeated MapKeyValue gotGuildBonusDayNum = 2;
	repeated MapKeyValue gotGuildBonusTotalNum = 3;
}

message OnlyOnceGuildBonusData{
	optional uint32 bonusType = 1;
	optional uint32 bonusVar = 2;
}

message MapKeyValue{
	optional uint64 key = 1;
	optional uint64 value = 2;
}

message PkRecord{
	optional uint32 point = 1;
	optional uint32 week = 2;
	optional uint32 unused_win = 3;
	optional uint32 unused_lose = 4;
	optional uint32 unused_continuewin = 5;
	optional uint32 honorpoint = 6;
	repeated uint32 boxtaken = 7;
	repeated PkOneRecord records = 8;
	optional uint32 unused_continuelose = 9;
	repeated uint32 prowin = 10;
	repeated uint32 prolose = 11;
	optional uint32 unused_lastwin = 12;
	optional uint32 unused_lastlose = 13;
	repeated uint32 prodraw = 14;
	optional uint32 unused_draw = 15;
	optional uint32 pointlastlose = 16;
	optional uint32 day = 17;
	optional uint32 rewardcounttoday = 18;
	optional uint32 todayplaytime = 19;
	optional PkBaseHist histweek = 20;
	optional PkBaseHist histall = 21;
	optional uint32 pkdaytimes = 22;
	optional uint32 weektimes = 23;
	optional uint32 last7daystime = 24;
	optional PkRecordSubInfo info2v2 = 25;
	optional uint32 oneweekresettime = 26;
	optional uint32 lastweekpoint = 27;
	optional PkBaseHist histday = 28;
}

message PkOneRecord{
	optional uint64 opposer = 1;
	optional uint32 profession = 2;
	optional string name = 3;
	optional int32 point = 4;
	optional uint32 honorpoint = 5;
	optional PkResultType result = 6;
}

message PkBaseHist{
	optional uint32 win = 1;
	optional uint32 lose = 2;
	optional uint32 draw = 3;
	optional uint32 lastwin = 4;
	optional uint32 lastlose = 5;
	optional uint32 continuewin = 6;
	optional uint32 continuelose = 7;
}

message PkRecordSubInfo{
	optional uint32 point = 1;
	optional uint32 rewardcount = 2;
	optional PkBaseHist seasondata = 3;
	repeated PkOneRec recs = 4;
}

message PkOneRec{
	optional PkResultType ret = 1;
	repeated PvpRoleBrief myside = 2;
	repeated PvpRoleBrief opside = 3;
	optional int32 cpoint = 4;
}

message PvpRoleBrief{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 rolelevel = 3;
	optional uint32 roleprofession = 4;
	optional uint32 roleserverid = 5;
}

message RoleConfig{
	repeated string type = 1;
	repeated string value = 2;
}

message TShowVoteRecord{
	optional int32 updateTime = 1;
	repeated TShowRoleDailyVoteData voteData = 2;
	optional bool haveSendRank = 3;
}

message TShowRoleDailyVoteData{
	optional uint64 roleID = 1;
	optional int32 freeCount = 2;
	optional int32 costCount = 3;
}

message CampRoleRecord{
	optional uint32 lastCampID = 1;
	optional CampTaskInfo2DB taskInfo = 2;
}

message CampTaskInfo2DB{
	optional int32 resetTime = 1;
	repeated CampTaskInfo infos = 2;
	optional int32 refreshTimes = 3;
	optional int32 rewardTimes = 4;
	optional int32 rewardTime = 5;
}

message CampTaskInfo{
	optional uint32 taskID = 1;
	optional int32 taskStatus = 2;
}

message RoleFindBackRecord{
	optional int32 openTime = 1;
	optional int32 updateTime = 2;
	optional bool isFoundBack = 3;
	repeated ExpFindBackInfo usedInfos = 4;
	repeated ExpFindBackInfo curUsedInfos = 5;
	optional int32 findBackOpenTime = 6;
	optional int32 itemBackUpdateTime = 7;
	repeated ItemFindBackInfo itemFindBackInfosHis = 8;
	repeated ItemFindBackInfo itemFindBackInfoCur = 9;
	optional uint32 unlockSealTime = 10;
	repeated UnlockSealFindBackData unlockSealData = 11;
	optional int32 notifyBackTime = 12;
}

message ItemFindBackInfo{
	optional ItemFindBackType id = 1;
	optional int32 subtype = 2;
	optional int32 useCount = 3;
	optional int32 towerLevel = 4;
	optional int32 dayTime = 5;
	optional int32 findBackCount = 6;
	optional int32 level = 7;
	repeated MapIntItem onceBackExp = 8;
}

message UnlockSealFindBackData{
	optional bool state = 1;
	optional int32 type = 2;
	optional int32 time = 3;
}

message RoleExtraInfo{
	optional uint32 lastLevelUpTime = 1;
	optional uint32 lastLoginTime = 2;
	optional uint32 lastLogoutTime = 3;
	optional uint32 loginTimes = 4;
	optional uint32 lastFatigueRecoverTime = 5;
	optional string fristchannel = 6;
	optional bool channelmask = 7;
}

message TowerRecord2DB{
	repeated TowerRecord records = 1;
	optional int32 m_updateTime = 2;
	optional int32 useResetCount = 3;
}

message LoginRecord{
	optional uint32 loginDayCount = 1;
	optional uint32 logindayforloginreward = 2;
	optional uint32 lastUpdateDay = 3;
	optional int32 lrostate = 4;
	repeated LoginReward loginRewards = 5;
}

message LoginReward{
	optional int32 day = 1;
	optional uint32 itemID = 2;
	optional LoginRewardState state = 3;
	repeated ItemBrief items = 4;
}

message PvpData{
	repeated PvpOneRec pvprecs = 1;
	optional int32 wincountall = 2;
	optional int32 losecountall = 3;
	optional int32 drawcountall = 4;
	optional int32 joincounttodayint = 5;
	optional int32 wincountthisweek = 6;
	optional uint32 lastdayupt = 7;
	optional uint32 lastweekupt = 8;
	optional bool weekrewardhaveget = 9;
	optional uint32 todayplaytime = 10;
	optional uint32 todayplaytimes = 11;
}

message PvpOneRec{
	optional int32 wincount = 1;
	optional int32 losecount = 2;
	optional int32 drawcount = 3;
	optional uint64 mvpID = 4;
	repeated PvpRoleBrief myside = 5;
	repeated PvpRoleBrief opside = 6;
	optional uint32 military = 7;
}

message SQARecord{
	optional uint32 cur_qa_type = 1;
	repeated MapKeyValue trigger_time = 2;
	repeated MapKeyValue used_count = 3;
	optional uint32 last_reset_time = 4;
	optional uint32 last_end_time = 5;
}

message DragonRecord2DB{
	repeated DragonRecord record = 1;
	optional int32 updateDay = 2;
	optional int32 updateHardDragonDay = 3;
	optional int32 updateSmallDragonDay = 4;
}

message DragonRecord{
	optional int32 dragonType = 1;
	optional int32 hardLevel = 2;
	optional int32 curFloor = 3;
	optional int32 updateTime = 4;
	optional int32 dragonDiamondBoxTimes = 5;
}

message FashionRecord{
	repeated FashionData bodyfashion = 1;
	repeated FashionData bagfashion = 2;
	repeated uint32 collected = 3;
	repeated uint32 display_fashion = 4;
	repeated ActivateFashionCharm own_fashins = 5;
	repeated uint32 own_display_items = 6;
	optional bool conversion = 7;
	optional uint32 hair_color_id = 8;
	repeated ActivateHairColor hair_color_info = 9;
	repeated ItemBrief fashionsynthersis_fail_info = 10;
	optional uint32 fashioncompose_time = 11;
	optional uint32 fashionibshop_buy_time = 12;
	optional uint32 special_effects_id = 13;
	repeated uint32 special_effects_list = 14;
	optional uint32 compose_success_num = 15;
	optional uint32 compose_failed_num = 16;
	repeated MapIntItem quality_num_list = 17;
}

message ActivateFashionCharm{
	optional uint32 suit_id = 1;
	optional uint32 activate_count = 2;
	repeated uint32 items = 3;
}

message ActivateHairColor{
	optional uint32 hair_id = 1;
	repeated uint32 hair_color_id = 2;
}

message LiveRecord{
	optional OneLiveRecordInfo mostViewedRecord = 1;
	optional OneLiveRecordInfo mostCommendedRecord = 2;
	repeated OneLiveRecordInfo recentRecords = 3;
	optional uint32 myTotalCommendedNum = 4;
	optional uint32 myTotalViewedNum = 5;
	optional bool livevisible = 6;
}

message LiveNameInfo{
	optional uint64 guildID = 1;
	optional string guildName = 2;
	optional int32 guildIcon = 3;
	optional RoleBriefInfo roleInfo = 4;
	optional string teamLeaderName = 5;
	optional bool isLeft = 6;
	optional string teamName = 7;
	optional uint64 leagueID = 8;
}

message PayV2Record{
	repeated PayBaseInfo pay = 1;
	repeated PayAileenRecord aileen = 2;
	optional uint32 vipPoint = 3;
	optional uint32 vipLevel = 4;
	optional uint32 totalPay = 5;
	optional uint32 payCardButtonStatus = 6;
	optional uint32 payAileenButtonStatus = 7;
	optional uint32 lastFirstPayAwardTime = 8;
	repeated PayAwardRecord growthFundLevelInfo = 9;
	repeated PayAwardRecord growthFundLoginInfo = 10;
	repeated PayAwardRecord vipLevelGiftInfo = 11;
	optional uint32 payFirstAwardButtonStatus = 12;
	optional uint32 growthFundButtonStatus = 13;
	repeated PayMemberRecord payMemberInfo = 14;
	optional PayMemberPrivilege privilege = 15;
	optional uint32 lastUpdateDay = 16;
	optional bool isEverPay = 17;
	repeated PayconsumeBrief consumelist = 18;
	optional PaytssInfo weekcard = 19;
	optional PaytssInfo monthcard = 20;
	optional PaytssInfo growthfund = 21;
	optional uint32 rewardTime = 22;
	optional uint32 growthfundnotifytime = 23;
	optional PayConsume consume = 24;
	optional PayConsumeRebate rebate = 25;
}

message PayBaseInfo{
	optional string paramID = 1;
	optional bool isPay = 2;
}

message PayAileenRecord{
	optional string paramID = 1;
	optional int32 itemID = 2;
	optional uint32 lastBuyTime = 3;
	optional PaytssInfo detail = 4;
	optional uint32 lastdelivertime = 5;
}

message PaytssInfo{
	optional int32 begintime = 1;
	optional int32 endtime = 2;
	optional int32 lastGetAwardTime = 3;
}

message PayAwardRecord{
	optional int32 id = 1;
	optional uint32 lastGetAwardTime = 2;
}

message PayMemberRecord{
	optional int32 ID = 1;
	optional int32 ExpireTime = 2;
	optional bool isClick = 3;
	optional int32 buttonStatus = 4;
	optional int32 lastDragonFlowerTime = 5;
	optional bool isNotifyExpire = 6;
	optional int32 begintime = 7;
	optional bool isNotifyExpireSoon = 8;
}

message PayPrivilegeShop{
	optional int32 goodsID = 1;
	optional int32 totalCount = 2;
	optional int32 usedCount = 3;
}

message PayconsumeBrief{
	optional uint32 ts = 1;
	optional string billno = 2;
}

message PayConsumeRebate{
	optional uint32 consumenum = 1;
	optional uint32 lastconsumetime = 2;
	optional uint32 rate = 3;
}

message PetSysData{
	optional uint64 fightid = 1;
	optional uint64 followid = 2;
	optional uint32 petseats = 3;
	optional uint64 lastfollowid = 4;
	repeated PetSingle pets = 5;
}

message FirstPassRecord{
	repeated FirstPassStageInfo infos = 1;
}

message FirstPassStageInfo{
	optional int32 firstPassID = 1;
	optional bool isGetReward = 2;
	optional int32 rank = 3;
	optional bool hasCommended = 4;
	optional int32 totalRank = 5;
	repeated uint32 commendedStarLevels = 6;
}

message IBShopAllRecord{
	optional uint32 nLastTime = 1;
	repeated IBShopOneRecord allIBShopItems = 2;
	optional uint32 nVipLv = 3;
	optional bool bLimitHot = 4;
	repeated IBGiftOrder orders = 5;
	optional uint32 paydegree = 6;
	optional uint32 daytime = 7;
}

message IBShopOneRecord{
	optional uint32 nGoodsID = 1;
	optional uint32 activity = 2;
	optional uint32 activitytime = 3;
	optional uint32 nItemCount = 4;
	optional uint32 nUpdateTime = 5;
}

message IBGiftOrder{
	optional string orderid = 1;
	optional uint32 time = 2;
}

message SpriteRecord{
	repeated SpriteInfo SpriteData = 1;
	repeated uint64 InFight = 2;
	repeated bool Books = 3;
	optional SpriteInfo NewAwake = 4;
	optional uint32 version = 5;
}

message SAtlasRecord{
	repeated uint32 atlas = 1;
	repeated atlasdata finishdata = 2;
}

message atlasdata{
	optional uint32 groupid = 1;
	optional uint32 finishid = 2;
}

message RiskInfo2DB{
	optional RiskMapInfos infos = 1;
	optional int32 updatetime = 2;
	optional int32 getDiceTime = 3;
	optional int32 getDiceNum = 4;
	optional RoleRiskInfo riskInfo = 5;
}

message RiskMapInfos{
	repeated RiskOneMapInfo infos = 1;
	optional int32 diceNum = 2;
	optional int32 leftDiceTime = 3;
	repeated RiskBoxInfo boxInfos = 4;
}

message RiskOneMapInfo{
	repeated RiskGridInfo grids = 1;
	optional int32 curX = 2;
	optional int32 curY = 3;
	repeated RiskBoxInfo boxInfos = 4;
	optional int32 mapid = 5;
	optional int32 moveDirection = 6;
}

message RiskGridInfo{
	optional int32 x = 1;
	optional int32 y = 2;
	optional RiskGridType gridType = 3;
	optional ItemBrief rewardItem = 4;
	optional RiskBoxState boxState = 5;
}

message RiskBoxInfo{
	optional RiskBoxState state = 1;
	optional int32 leftTime = 2;
	optional ItemBrief item = 3;
	optional int32 beginTime = 4;
	optional int32 slot = 5;
}

message RoleRiskInfo{
	optional int32 mapID = 1;
	optional int32 gridType = 2;
	optional int32 sceneID = 3;
	optional bool canBuy = 4;
}

message RoleTask{
	repeated TaskInfo tasks = 1;
	repeated uint32 finished = 2;
	optional uint32 lastUpdateTime = 3;
	repeated DailyTaskInfo dailytask = 4;
	optional uint32 daily_count = 5;
	optional uint32 daily_accept_level = 6;
	optional bool daily_rewarded = 7;
	optional uint32 daily_complete_num = 8;
	optional bool daily_red_point = 9;
	optional uint32 daily_askhelp_num = 10;
	optional uint32 today_donate_count = 11;
	optional uint32 total_donate_count = 12;
	optional bool dailyaccept = 13;
	optional WeeklyTaskData weekrecord = 14;
	optional uint32 score = 15;
	optional uint32 luck = 16;
}

message TaskConditionInfo{
	optional TaskConnType type = 1;
	optional uint32 id = 2;
	optional uint32 step = 3;
	optional uint32 max_step = 4;
}

message DailyTaskInfo{
	optional uint32 id = 1;
	optional uint32 step = 2;
	optional bool is_rewarded = 3;
	optional bool ask_help = 4;
}

message WeeklyTaskData{
	repeated WeeklyTaskInfo tasks = 1;
	optional uint32 accept_level = 2;
	optional bool rewarded = 3;
	optional uint32 askhelp_num = 4;
	optional bool accept = 5;
	optional uint32 accept_count = 6;
	optional uint32 score = 7;
	repeated uint32 rewarded_box = 8;
	repeated TaskHelpInfo helpinfo = 9;
	optional uint32 free_refresh_count = 10;
}

message WeeklyTaskInfo{
	optional uint32 index = 1;
	optional uint32 id = 2;
	optional uint32 step = 3;
	optional bool is_rewarded = 4;
	optional bool ask_help = 5;
	optional uint32 refresh_count = 6;
}

message TaskHelpInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 itemid = 3;
	optional uint32 itemcount = 4;
	optional uint32 time = 5;
}

message IdipData{
	optional IdipMessage mess = 1;
	repeated IdipPunishData punishInfo = 2;
	optional uint32 lastSendAntiAddictionTime = 3;
	optional bool isSendAntiAddictionRemind = 4;
	optional string picUrl = 5;
	repeated PlatNotice notice = 6;
	optional bool xinyue_hint = 7;
	repeated IdipHintData hintdata = 8;
	optional uint32 AntiAddictionRemindCount = 9;
	optional int32 AdultType = 10;
	optional int32 hgFlag = 11;
	optional uint32 hgBanTime = 12;
	optional uint32 hgGameTime = 13;
	optional bool isGetHg = 14;
}

message IdipPunishData{
	optional int32 type = 1;
	optional int32 punishTime = 2;
	optional int32 banTime = 3;
	optional string reason = 4;
}

message IdipHintData{
	optional uint32 systemid = 1;
	optional bool ishint = 2;
}

message SpActivity{
	repeated SpActivityOne spActivity = 1;
	optional uint32 lastBackFlowStartTime = 2;
	optional ArgentaPreData argentaPreData = 3;
	optional uint32 lastArgentaStartTime = 4;
	optional BackFlowPreData backflowPreData = 5;
}

message SpActivityOne{
	optional uint32 actid = 1;
	repeated SpActivityTask task = 2;
	optional bool getBigPrize = 3;
	optional uint32 startTime = 4;
	optional uint32 actStage = 5;
	optional ArgentaData argenta = 6;
	optional AncientTimes ancient = 7;
	optional ThemeActivityData theme = 8;
	optional BackFlowData backflow = 9;
}

message SpActivityTask{
	optional uint32 taskid = 1;
	optional uint32 state = 2;
	optional uint32 progress = 3;
}

message ArgentaData{
	optional uint32 argentaStartTime = 1;
	optional uint32 level = 2;
	optional uint32 lastUpdateTime = 3;
	repeated uint32 getDailyRewards = 4;
}

message AncientTimes{
	optional uint32 award = 1;
}

message ThemeActivityData{
	repeated SpFirstCompleteScene firstscene = 1;
	optional bool ishint = 2;
}

message SpFirstCompleteScene{
	optional uint32 scenetype = 1;
	repeated uint32 sceneid = 2;
}

message BackFlowData{
	optional uint32 worldlevel = 1;
	optional uint32 point = 2;
	repeated uint32 alreadyGet = 3;
	repeated string payGiftType = 4;
	repeated uint32 payGiftCount = 5;
	optional uint32 lostDay = 6;
	optional BackFlowShopData shop = 7;
	optional uint32 lastSmallDragonFinishTime = 8;
	optional bool isFinishBackFlowScene = 9;
	optional uint32 lastNestFinishTime = 10;
	optional uint32 nestFinishCount = 11;
}

message BackFlowShopData{
	optional uint32 lastUpdateTime = 1;
	repeated BackFlowShopGood goods = 2;
	optional uint32 freshCount = 3;
}

message BackFlowShopGood{
	optional uint32 GoodID = 1;
	optional bool IsBuy = 2;
	optional uint32 LockTime = 3;
}

message ArgentaPreData{
	optional uint32 lastUpdateTime = 1;
	repeated uint32 activityPoint = 2;
	repeated uint32 finishNestCount = 3;
}

message BackFlowPreData{
	repeated bool isOnline = 1;
	optional uint32 lastUpdateTime = 2;
}

message Designation2DB{
	optional uint32 coverDesignationID = 1;
	optional uint32 abilityDesignationID = 2;
	optional uint32 maxAbilityDesignationID = 3;
	repeated StcDesignationInfo designationData = 4;
}

message LevelSealRecord{
	optional uint32 type = 1;
	optional uint32 selfCollectCount = 2;
	optional int32 selfAwardCountIndex = 3;
	optional uint32 LevelSealButtonStatus = 4;
	optional bool lastLevelSealStatus = 5;
}

message SBuffRecord{
	repeated Buff buffs = 1;
	repeated BuffItem items = 2;
	optional STransformBuff transbuff = 3;
	optional STransformBuff smallbuff = 4;
}

message Buff{
	optional int32 buffID = 1;
	optional int32 buffLevel = 2;
	optional uint32 effecttime = 3;
	optional uint32 skillID = 4;
}

message BuffItem{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 expiretime = 3;
}

message STransformBuff{
	optional bool ispassive = 1;
	optional bool iseffecting = 2;
	optional Buff buff = 3;
}

message RolePushInfo{
	repeated PushInfo infos = 1;
	repeated PushConfig configs = 2;
}

message PushInfo{
	optional uint32 type = 1;
	optional uint32 sub_type = 2;
	optional uint32 time = 3;
}

message PushConfig{
	optional uint32 type = 1;
	optional bool forbid = 2;
}

message QQVipInfo{
	optional bool is_vip = 1;
	optional bool is_svip = 2;
	optional bool is_year_vip = 3;
	optional uint32 qq_vip_start = 4;
	optional uint32 qq_vip_end = 5;
	optional uint32 qq_svip_start = 6;
	optional uint32 qq_svip_end = 7;
	optional uint32 qq_year_vip_start = 8;
	optional uint32 qq_year_vip_end = 9;
	optional bool vip_newbie_rewarded = 10;
	optional bool svip_newbie_rewarded = 11;
	optional bool is_xinyue_vip = 12;
}

message TeamRecord{
	optional uint32 lastdayuptime = 1;
	optional uint32 lastweekuptime = 2;
	optional uint32 goddessGetRewardToday = 3;
	repeated TeamCountInfo teamcountins = 4;
	optional RoleTeamCostInfo teamcost = 5;
	optional uint32 weeknestrewardcount = 6;
	optional uint32 diamondcostcount = 7;
	optional uint32 useticketcount = 8;
	repeated int32 dragonhelpfetchedrew = 9;
	optional bool wantdragonhelp = 10;
}

message TeamCountInfo{
	optional int32 teamType = 1;
	optional int32 finishCountToday = 2;
	optional int32 buyCountToday = 3;
	optional int32 extraAddCount = 4;
	optional uint32 helpcount = 5;
}

message RoleTeamCostInfo{
	optional uint32 expid = 1;
	optional uint32 costindex = 2;
	optional uint32 dragoncount = 3;
	optional uint32 updateday = 4;
	optional uint32 getgiftvalue = 5;
}

message RoleMiscData{
	optional uint32 dummy = 1;
	optional uint32 lastpush = 2;
	optional uint32 pushflag = 3;
	optional uint32 laddertime = 4;
	optional uint32 answersindex = 5;
	optional uint32 answersversion = 6;
	optional uint32 hintflag = 7;
	optional uint32 lastchangeprotime = 8;
	optional uint32 changeprocount = 9;
	optional uint32 daily_lb_num = 10;
	optional uint32 updatetime = 11;
	optional string declaration = 12;
	optional bool qqvip_hint = 13;
	optional uint32 qqvip_hint_read_time = 14;
	optional bool egame_hint = 15;
	optional uint32 egame_hint_readtime = 16;
	optional bool xinyue_hint = 17;
	optional uint32 xinyue_readtime = 18;
	optional uint32 last_level = 19;
	optional uint32 loginacttime = 20;
	optional bool loginactstatus = 21;
	optional uint32 daygiftitems = 22;
	optional uint32 hardestNestExpID = 23;
	optional StartUpType startuptype = 24;
	optional uint32 startuptime = 25;
	optional uint32 weddingflow_count = 26;
	optional uint32 weddingfireworks_count = 27;
	optional uint32 weddingcandy_count = 28;
	repeated AttributeInfo gmattrs = 29;
	optional SurviveRecord surviverec = 30;
	optional LuckyActivity turntable = 31;
	optional uint32 freeflow_hinttime = 32;
	optional uint32 kingbackrewardcount = 33;
	optional uint32 chare_back_rewardlevel = 34;
	optional uint32 charge_back_total = 35;
}

message SurviveRecord{
	optional uint32 lastweekuptime = 1;
	optional uint32 point = 2;
	optional uint32 topcount = 3;
	optional bool givereward = 4;
}

message LuckyActivity{
	repeated ItemRecord itemrecord = 1;
	optional uint32 state = 2;
	optional bool ispay = 3;
}

message ItemRecord{
	optional uint32 itemID = 1;
	optional uint32 itemCount = 2;
	optional bool isreceive = 3;
}

message RolePartnerData{
	optional uint64 partnerid = 1;
	optional uint32 last_leave_partner_time = 2;
	optional uint32 taked_chest = 3;
	optional uint32 open_shop_time = 4;
	optional uint32 apply_leave_time = 5;
	optional bool chest_redpoint = 6;
	optional uint32 last_update_time = 7;
	optional uint32 compenstateTime = 8;
}

message AchieveDbInfo{
	repeated StcAchieveInfo achieveData = 1;
	repeated STC_ACHIEVE_POINT_REWARD achieveAward = 2;
	repeated StcAchieveInfo oldachievement = 3;
}

message STC_ACHIEVE_POINT_REWARD{
	optional uint32 rewardId = 1;
	optional uint32 rewardStatus = 2;
}

message SkillRecord{
	repeated SkillInfo Skills = 1;
	repeated uint32 SkillSlot = 2;
	optional bool freeresetskill = 3;
	optional uint32 index = 4;
	repeated SkillInfo SkillsTwo = 5;
	repeated uint32 SkillSlotTwo = 6;
}

message SChatRecord{
	optional uint32 lastupdatetime = 1;
	optional uint32 worldchattimes = 2;
}

message HeroBattleRecord{
	repeated uint32 havehero = 1;
	optional bool cangetprize = 2;
	optional bool alreadygetprize = 3;
	optional uint32 totalnum = 4;
	optional uint32 winnum = 5;
	optional uint32 losenum = 6;
	optional uint32 winthisweek = 7;
	optional uint32 lastupdatetime = 8;
	repeated HeroBattleOneGame gamerecord = 9;
	optional uint32 todayspcount = 10;
	repeated uint32 freeweekhero = 11;
	optional uint32 bigrewardcount = 12;
	optional uint32 weekprize = 13;
	optional double elopoint = 14;
	optional uint32 daytime = 15;
	optional uint32 daytimes = 16;
	repeated uint32 experiencehero = 17;
	repeated uint32 experienceherotime = 18;
	optional uint32 continuewinnum = 19;
	optional uint32 maxkillnum = 20;
}

message HeroBattleOneGame{
	repeated RoleSmallInfo team1 = 1;
	repeated RoleSmallInfo team2 = 2;
	optional HeroBattleOver over = 3;
	optional uint64 mvpid = 4;
	optional uint32 exploit = 5;
}

message ReportDataRecord{
	optional uint32 weeklogindays = 1;
	optional uint32 within20minsdays = 2;
	optional uint32 lastdayonlinetime = 3;
	optional uint32 lastdayupdate = 4;
	optional uint32 lastweekupdate = 5;
	optional uint32 weeknestfasttime = 6;
	optional uint32 weekactivedays = 7;
	optional uint32 weeknestdaytimes = 8;
	repeated WeekReportData wxdata = 9;
	optional uint32 lastrecommondtime = 10;
	optional uint32 abyssdaycount = 11;
	optional uint32 superrisktodaycount = 12;
	optional uint32 buyibshopcount = 13;
	optional uint32 pokercount = 14;
	optional uint32 lastpokertime = 15;
	optional uint32 horsemacthcount = 16;
}

message WeekReportData{
	optional WeekReportDataType type = 1;
	optional int32 joincount = 2;
	optional uint32 lastjointime = 3;
}

message RoleSystem{
	optional bytes system = 1;
	optional bytes firsttime = 2;
	repeated SysOpenTime opentime = 3;
}

message SysOpenTime{
	optional int32 id = 1;
	optional int32 time = 2;
}

message PlatformShareResult{
	optional uint32 last_update_time = 1;
	repeated MapIntItem firstpass_share_list = 2;
	optional uint32 weekly_share_number = 3;
	optional bool weekly_award = 4;
	optional bool disappear_redpoint = 5;
	repeated uint32 have_notify_scene = 6;
	optional uint64 consume_dragoncoins_now = 7;
	optional uint64 consume_dragoncoins_before_1 = 8;
	optional uint64 consume_dragoncoins_before_2 = 9;
	optional uint64 consume_dragoncoins_before_3 = 10;
	optional uint64 consume_dragoncoins_before_4 = 11;
	optional uint64 consume_dragoncoins_before_5 = 12;
	optional uint64 consume_dragoncoins_before_6 = 13;
	optional uint64 consume_dragoncoins_before_7 = 14;
	optional uint32 last_update_consume = 15;
}

message WeekEnd4v4Data{
	optional uint32 indexWeekEnd = 1;
	optional uint32 activityID = 2;
	optional uint32 count = 3;
}

message TajieHelp2DB{
	repeated TajieHelpSceneData taJieHelpSceneData = 1;
	optional int32 updateTime = 2;
}

message TajieHelpSceneData{
	optional int32 sceneID = 1;
	optional int32 intervalContinueFailTimes = 2;
	optional int32 intervalFailNoticeTimes = 3;
}

message DragonGroupDB{
	optional DragonGroupRecordS2C record = 1;
	optional DragonGroupRoleListS2C rolelist = 2;
}

message DragonGroupRecordInfoList{
	optional uint32 stageid = 1;
	optional uint32 time = 2;
	optional uint32 costtime = 3;
	repeated DragonGroupRoleInfo roleinfo = 4;
	optional bool iswin = 5;
	optional bool isFirstPass = 6;
	optional bool isServerFirstPass = 7;
	optional uint32 commendnum = 8;
	optional uint32 watchnum = 9;
	optional bool ismostcommendnum = 10;
	optional bool ismostwatchnum = 11;
}

message DragonGroupRoleInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 profession = 3;
	optional uint32 title = 4;
	optional uint32 level = 5;
	optional uint32 fighting = 6;
	optional string guild = 7;
	optional uint32 uid = 8;
	optional uint32 stageID = 9;
	optional uint32 stageTime = 10;
	optional uint32 stageCount = 11;
}

message BattleFieldData{
	optional uint32 firstrankcount = 1;
	optional uint32 totalkillcount = 2;
	repeated BattleFieldPoint point = 3;
	optional uint32 lastupdatetime = 4;
	optional HellDropInfoAll hell = 5;
	optional uint32 weekpoint = 6;
	optional uint32 dayupdatetime = 7;
	optional uint32 version = 8;
}

message BattleFieldPoint{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message HellDropInfoAll{
	repeated HellDropInfo all = 1;
	optional uint32 version = 2;
}

message HellDropInfo{
	optional uint32 id = 1;
	optional uint32 common = 2;
	optional uint32 count = 3;
	optional uint32 time = 4;
	optional uint32 worse = 5;
	optional uint32 worst = 6;
}

message NpcFeelingRecord{
	optional uint32 lastupdaytime = 1;
	repeated NpcFeelingOneNpc npclist = 2;
	repeated NpcFeelingUnite unitelist = 3;
	optional uint32 exchangecount = 4;
	optional uint32 returncount = 5;
	optional uint32 givecount = 6;
	repeated ItemBrief nouse = 7;
	repeated NpcFlReturn returndrop = 8;
	optional uint32 buycount = 9;
	optional uint32 triggerfavorcount = 10;
	optional uint32 giveleftaddcount = 11;
}

message NpcFeelingOneNpc{
	optional uint32 npcid = 1;
	optional uint32 level = 2;
	optional uint32 exp = 3;
	repeated NpcLikeItem likeitem = 4;
	repeated ItemBrief exchange = 5;
	optional bool isnew = 6;
}

message NpcLikeItem{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 addexp = 3;
	optional NpcFlItemType type = 4;
}

message NpcFeelingUnite{
	optional uint32 id = 1;
	optional uint32 level = 2;
}

message NpcFlReturn{
	optional uint32 dropid = 1;
	optional uint32 gtime = 2;
	optional uint32 mailconfid = 3;
}

message CompeteDragonInfo2DB{
	optional int32 updateDay = 1;
	optional uint32 throughCount = 2;
	optional uint32 getRewardCount = 3;
}

message DragonGuildRecordData{
	optional uint64 dragonguildid = 1;
	optional uint32 taked_chest = 2;
	optional bool chest_redpoint = 3;
	optional uint32 last_update_time = 4;
	repeated DragonGuildRoleTaskItem tasks = 5;
	repeated DragonGuildRoleTaskItem achivements = 6;
	optional uint32 ReceiveCount = 7;
	optional uint32 taskRefreshTime = 8;
}

message DragonGuildRoleTaskItem{
	optional uint32 taskid = 1;
	optional bool received = 2;
}

message ReconnectScene{
	optional uint32 sceneid = 1;
	optional bool isready = 2;
}

message StepSyncData{
	optional int32 PosXZ = 1;
	optional uint64 EntityID = 2;
	optional int32 Skillid = 3;
	optional int32 HitIdx = 4;
	optional uint64 OpposerID = 5;
	optional bool HitForceToFly = 6;
	optional int32 HitParalyzeFactor = 7;
	optional bool PresentInFreezed = 8;
	optional bool FreezedFromHit = 9;
	optional bool Passive = 10;
	optional int32 Common = 11;
	optional int32 Velocity = 12;
	optional int32 SkillCommon = 13;
}

message PvpBaseData{
	optional int32 wincountall = 1;
	optional int32 losecountall = 2;
	optional int32 drawcountall = 3;
	optional int32 wincountthisweek = 4;
	optional int32 wincountweekmax = 5;
	optional int32 jointodayintime = 6;
	optional int32 jointodayintimemax = 7;
	optional int32 matchingcount = 8;
	optional bool weekRewardHaveGet = 9;
}

message PvpHistory{
	repeated PvpOneRec recs = 1;
}

message FriendGift{
	optional uint32 SendLeft = 1;
	optional uint32 ReceiveLeft = 2;
}

message AudioBrief{
	optional uint64 audioUid = 1;
	optional bytes audio = 2;
	optional bytes text = 3;
}

message PvpNowUnitData{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional uint32 roleLevel = 3;
	optional uint32 roleProfession = 4;
	optional int32 killCount = 5;
	optional int32 dieCount = 6;
	optional int32 groupid = 7;
}

message QARoomRankData{
	optional uint64 uuid = 1;
	optional uint32 score = 2;
}

message GuildSkillData{
	optional int32 SkillId = 1;
	optional int32 MaxLvl = 2;
}

message DragonInfo2Client{
	optional int32 dragonType = 1;
	optional int32 hardLevel = 2;
	optional int32 curFloor = 3;
	optional int32 refreshTimes = 4;
	optional DragonWeakType weakType = 5;
}

message TeamInvRoleInfo{
	optional uint64 userID = 1;
	optional string userName = 2;
	optional uint32 userLevel = 3;
	optional uint32 userVip = 4;
	optional uint32 userPowerPoint = 5;
	optional string guildName = 6;
	optional uint32 degree = 7;
	optional int32 profession = 8;
	optional uint64 teamguildid = 9;
	optional uint64 roleguildid = 10;
	optional uint64 roledragonguildid = 11;
	optional TeamInvRoleState state = 12;
	optional bool wanthelp = 13;
}

message MulActivitInfo{
	optional int32 id = 1;
	optional MulActivityTimeState openstate = 2;
	optional uint32 lefttime = 3;
	optional int32 dayjoincount = 4;
	optional uint32 beginmin = 5;
	optional uint32 endmin = 6;
	optional ActOpenState real_open_state = 7;
	optional bool is_playing = 8;
}

message BossRushData{
	optional int32 confid = 1;
	optional int32 buffid1 = 2;
	optional int32 buffid2 = 3;
	optional int32 currank = 4;
	optional int32 maxrank = 5;
	optional int32 currefreshcount = 6;
	optional int32 maxrefreshcount = 7;
	optional int32 joincounttoday = 8;
	optional int32 joincountmax = 9;
}

message SSceneState{
	optional bool isready = 1;
	optional uint32 runstate = 2;
}

message LoginReconnectEnterSceneData{
	optional UnitAppearance selfAppearance = 1;
	optional DeathInfo deathinfo = 2;
	optional bool isautofight = 3;
}

message guildArenaWarData{
	optional uint32 warType = 1;
	repeated GuildArenaGroupData guildArenaGroupData = 2;
}

message GuildArenaGroupData{
	optional uint32 battleId = 1;
	optional uint64 guildOneId = 2;
	optional uint64 guildTwoId = 3;
	optional uint64 winerId = 4;
	optional uint32 warstate = 5;
	optional uint32 watchId = 6;
	optional uint32 state = 7;
}

message GuildDarenaUnit{
	optional uint64 roleId = 1;
	optional uint32 state = 2;
}

message GmfRoleBrief{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 profession = 3;
}

message GmfGuildBrief{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint32 guildicon = 3;
}

message GmfHalfRoles{
	repeated GmfRole roles = 1;
	optional GmfGuildBrief guildb = 2;
	optional uint32 inspire = 3;
}

message GmfRole{
	optional uint64 roleID = 1;
	optional string rolename = 2;
	optional uint32 pkpoint = 3;
	optional int32 index = 4;
	optional GuildMatchFightState state = 5;
	optional int32 guildpos = 6;
	optional int32 profession = 7;
}

message BattleStatisticsData{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 type = 3;
	optional uint32 profession = 4;
	optional double damageall = 5;
	optional uint32 deadcount = 6;
	optional uint32 killcount = 7;
	optional uint32 killcontinue = 8;
	optional uint32 treatcount = 9;
	optional uint32 combomax = 10;
	optional uint32 assitnum = 11;
}

message BattleStarData{
	optional uint64 roleid = 1;
	optional uint32 star = 2;
}

message VoipRoomMember{
	optional int32 memberID = 1;
	optional uint64 roleID = 2;
	optional string name = 3;
	optional uint32 state = 4;
}

message PayCard{
	optional uint32 type = 1;
	optional uint32 remainedCount = 2;
	optional bool isGet = 3;
}

message PayAileen{
	optional uint32 remainedTime = 1;
	repeated PayAileenInfo AileenInfo = 2;
	optional uint32 weekDays = 3;
}

message PayAileenInfo{
	optional string paramID = 1;
	optional int32 itemID = 2;
	optional bool isBuy = 3;
}

message PayMember{
	optional int32 ID = 1;
	optional int32 ExpireTime = 2;
	optional bool isClick = 3;
}

message FirstPassStageInfo2Client{
	optional int32 firstPassID = 1;
	optional bool isGetReward = 2;
	optional int32 myRank = 3;
	required int32 totalRank = 4;
	optional bool hasCommended = 5;
}

message QueryPkInfoRes{
	optional uint32 rank1v1 = 1;
	optional uint32 rewardcount = 2;
	optional PkRecord info = 3;
	optional uint32 timelimit = 4;
	optional uint32 rankrewardleftT = 5;
	optional uint32 rank2v2 = 6;
}

message QAIDName{
	optional uint64 uuid = 1;
	optional string name = 2;
}

message ItemFindBackInfo2Client{
	optional ItemFindBackType id = 1;
	optional int32 findBackCount = 2;
	optional int32 dragonCoinCost = 3;
	repeated ItemBrief dragonCoinFindBackItems = 4;
	optional int32 goldCoinCost = 5;
	repeated ItemBrief goldCoinFindBackItems = 6;
	optional int32 dayTime = 7;
	optional int32 roleLevel = 8;
}

message IBShopItemInfo{
	optional uint32 goodsid = 1;
	optional uint32 itemid = 2;
	optional uint32 nlimittime = 3;
	optional uint32 nlimitcount = 4;
	optional uint32 nbuycount = 5;
	optional bool gift = 6;
}

message SynCardAttr{
	repeated CardAttr addAttr = 1;
	repeated CardAttr addper = 2;
	repeated CardAttr allAttr = 3;
	optional uint32 groupId = 4;
}

message CardAttr{
	optional uint32 id = 1;
	optional uint32 num = 2;
}

message DEProgress{
	optional uint32 sceneID = 1;
	optional int32 bossavghppercent = 2;
	optional DEProgressState state = 3;
}

message DERank{
	optional int32 rank = 1;
	optional uint64 roleID = 2;
	optional string rolename = 3;
	optional DEProgress progress = 4;
	repeated ItemBrief reward = 5;
}

message WorldBossDamageInfo{
	optional string rolename = 1;
	optional float damage = 2;
	optional uint32 rank = 3;
}

message AuctItemBrief{
	optional uint32 itemid = 1;
	optional uint32 count = 2;
}

message AuctOverlapData{
	optional uint64 overlapid = 1;
	optional uint32 perprice = 2;
	optional Item itemdata = 3;
}

message AuctionSaleData{
	optional uint64 uid = 1;
	optional uint32 perprice = 2;
	optional uint32 duelefttime = 3;
	optional Item itemdata = 4;
}

message LiveIconData{
	optional int32 liveType = 1;
	optional int32 liveID = 2;
	optional OneLiveRecordInfo liveInfo = 3;
}

message SkyCityEstimateBaseInfo{
	optional uint32 teamid = 1;
	optional uint32 job = 2;
	optional string name = 3;
	optional uint32 killer = 4;
	optional uint64 damage = 5;
	optional uint32 lv = 6;
	optional uint64 roleid = 7;
}

message SkyCityTeamScore{
	optional uint32 teamid = 1;
	optional uint32 score = 2;
}

message SkyCityTeamBaseInfo{
	optional int32 teamid = 1;
	optional uint64 uid = 2;
	optional string name = 3;
	optional uint32 lv = 4;
	optional uint32 ppt = 5;
	optional uint32 job = 6;
	optional bool online = 7;
}

message GuildLadderRoleRank{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 wintimes = 3;
	optional uint64 guildid = 4;
}

message GuildLadderRank{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint32 wintimes = 3;
	optional uint32 icon = 4;
}

message PlantInfo{
	optional uint32 farmland_id = 1;
	optional uint32 seed_id = 2;
	optional PlantGrowState plant_grow_state = 3;
	optional uint32 grow_times = 4;
	optional float growup_amount = 5;
	optional uint32 mature_duration = 6;
	optional uint32 start_time = 7;
	optional uint32 stealed_times = 8;
	optional uint32 growup_cd = 9;
	repeated GardenEventLog event_log = 10;
	optional uint32 notice_times = 11;
	optional uint64 owner = 12;
}

message GardenEventLog{
	optional uint64 role_id = 1;
	optional string role_name = 2;
	optional uint32 occur_time = 3;
	optional uint32 event_type = 4;
	optional uint32 target = 5;
	optional bool result = 6;
}

message SkyCityGroupData{
	optional uint32 teamid = 1;
	optional uint32 killcount = 2;
	optional double totaldamage = 3;
}

message FriendPlantLog{
	optional uint64 role_id = 1;
	optional string role_name = 2;
	optional uint32 profession_id = 3;
	optional bool exist_sprite = 4;
	optional bool mature = 5;
	optional bool abnormal_state = 6;
	optional uint32 help_times = 7;
}

message GuildActivityRole{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 score = 3;
}

message PlatFriend{
	optional string openid = 1;
	optional string nickname = 2;
	optional string bigpic = 3;
	optional string midpic = 4;
	optional string smallpic = 5;
}

message PlatFriendRankInfo2Client{
	optional PlatFriend platfriendBaseInfo = 1;
	optional uint32 rank = 2;
	optional bool hasGiveGift = 3;
	optional uint32 maxAbility = 4;
	optional uint32 vipLevel = 5;
	optional uint32 level = 6;
	optional bool isOnline = 7;
	optional int32 startType = 8;
	optional int32 profession = 9;
}

message GmfGuildCombat{
	optional GmfGuildBrief gmfguild = 1;
	optional GmfCombat combat = 2;
	optional uint32 score = 3;
}

message GmfCombat{
	optional uint32 killcount = 1;
	optional double damage = 2;
}

message GmfRoleCombat{
	optional GmfRoleBrief gmfrole = 1;
	optional GmfCombat combat = 2;
}

message GuildBuffItem{
	optional uint32 itemid = 1;
	optional uint32 count = 2;
	optional uint64 roleid = 3;
}

message GuildBuffRecord{
	optional uint32 id = 1;
	optional uint32 time = 2;
}

message ResWarRank{
	optional uint64 id = 1;
	optional string name = 2;
	optional uint32 value = 3;
	optional uint32 icon = 4;
}

message GuildBuffSimpleInfo{
	optional uint64 guildid = 1;
	repeated GuildBuff buff = 2;
}

message GuildBuff{
	optional uint32 id = 1;
	optional uint32 time = 2;
}

message ResWarFinalAll{
	repeated ResWarFinal data = 1;
}

message ResWarFinal{
	optional string guildname = 1;
	optional uint32 res = 2;
	repeated ItemBrief brief = 3;
	optional uint32 guildicon = 4;
	optional uint64 guildid = 5;
}

message ResWarGroupData{
	optional uint32 teamid = 1;
	optional uint32 killcount = 2;
	optional uint32 totaldamage = 3;
}

message GASaleItem{
	optional uint64 uid = 1;
	optional int32 acttype = 2;
	optional uint32 itemid = 3;
	optional uint64 auctroleid = 4;
	optional uint32 curauctprice = 5;
	optional uint32 maxprice = 6;
	optional uint32 lefttime = 7;
	optional bool display = 8;
}

message GASaleHistory{
	optional int32 acttype = 1;
	optional uint32 saletime = 2;
	optional uint32 itemid = 3;
	optional uint32 saleprice = 4;
	optional GuildAuctResultType auctresult = 5;
}

message ResWarTeamBaseInfo{
	optional uint32 teamid = 1;
	optional uint64 uid = 2;
	optional string name = 3;
	optional uint32 lv = 4;
	optional uint32 ppt = 5;
	optional uint32 job = 6;
	optional bool online = 7;
	optional uint64 guildid = 8;
	optional string guildname = 9;
}

message Integralunit{
	optional uint64 guildid = 1;
	optional uint32 guildscore = 2;
	optional string name = 3;
	optional uint32 guildicon = 4;
}

message IntegralBattle{
	optional uint64 guildone = 1;
	optional uint64 guildtwo = 2;
	optional bool isdo = 3;
	optional uint32 guildonescore = 4;
	optional uint32 guildtwoscore = 5;
	optional string nameone = 6;
	optional string nametwo = 7;
	optional uint32 iconone = 8;
	optional uint32 icontwo = 9;
	optional uint32 wartime = 10;
	optional IntegralState state = 11;
}

message GuildCampRankInfo{
	optional int32 rank = 1;
	optional int32 rankVar = 2;
	repeated RoleBriefInfo roles = 3;
}

message ResWarRoleRank{
	optional string rolename = 1;
	optional string guildname = 2;
	optional uint32 res = 3;
	optional uint64 roleid = 4;
	optional uint64 guild = 5;
}

message GuildArenaHistory{
	optional string first = 1;
	optional string second = 2;
}

message GuildMemberAskInfo{
	optional GuildMemberAskItem item = 1;
	optional string name = 2;
	optional uint32 profession = 3;
}

message GuildMemberAskItem{
	optional uint32 id = 1;
	optional uint64 roleid = 2;
	optional uint32 publishtime = 3;
	optional uint32 itemid = 4;
	optional uint32 needCount = 5;
	optional uint32 getCount = 6;
	optional uint32 level = 7;
	optional uint32 quality = 8;
	optional uint32 taskid = 9;
	optional PeriodTaskType tasktype = 10;
	optional uint32 itemtype = 11;
	optional uint32 itemquality = 12;
	optional uint32 index = 13;
}

message GuildMemberDonateRankItem{
	optional uint64 roleid = 1;
	optional uint32 todaycount = 2;
	optional uint32 totalcount = 3;
	optional uint32 lasttime = 4;
	optional string name = 5;
	optional uint32 level = 6;
	optional uint32 profession = 7;
}

message InheritData{
	optional string name = 1;
	optional uint32 lvl = 2;
	optional uint32 time = 3;
	optional uint64 roleId = 4;
}

message QQVipInfoClient{
	optional bool is_vip = 1;
	optional bool is_svip = 2;
	optional uint32 qq_vip_end = 3;
	optional uint32 qq_svip_end = 4;
	optional bool is_bigger_one_month = 5;
}

message JoinLargeRoomReply{
	optional string url = 1;
	optional uint32 key = 2;
	optional uint32 bussniessid = 3;
	optional uint64 roomid = 4;
	optional uint64 roomkey = 5;
	optional uint32 memberid = 6;
	optional uint64 roleid = 7;
	optional uint32 param = 8;
}

message FriendVipInfo{
	optional string openid = 1;
	optional bool is_vip = 2;
	optional bool is_svip = 3;
}

message OneMentorRelationInfo2Client{
	optional RoleBriefInfo roleInfo = 1;
	repeated MentorRelationStatusData relationlist = 2;
	optional int32 pos = 3;
	repeated OneMentorTaskInfo studentTaskList = 4;
	optional EMentorTaskStatus inheritStatus = 5;
	optional uint64 inheritApplyRoleID = 6;
	optional MentorRelationStatus curStatus = 7;
	optional uint64 breakApplyRoleID = 8;
}

message MentorRelationStatusData{
	optional uint32 status = 1;
	optional uint32 time = 2;
}

message OneMentorTaskInfo{
	optional int32 taskID = 1;
	optional int32 completeProgress = 2;
	optional int32 completeTime = 3;
	repeated MapIntItem taskApplyStatus = 4;
	optional uint32 taskType = 5;
	optional uint64 taskVar = 6;
}

message MentorSelfInfo{
	repeated OneMentorTaskInfo selfTaskList = 1;
}

message OneMentorApplyStudentShow{
	optional RoleBriefInfo oneStudent = 1;
	optional bool hasApply = 2;
	optional string applyWords = 3;
}

message OneMentorApplyMasterShow{
	optional RoleBriefInfo oneMaster = 1;
	optional uint64 audioID = 2;
	optional string applyWords = 3;
	optional bool hasApply = 4;
}

message OneMentorBeAppliedMsg{
	optional MentorMsgApplyType type = 1;
	optional int32 time = 2;
	optional RoleBriefInfo roleBrief = 3;
	optional int32 reportTaskID = 4;
}

message MentorBreakApplyInfo{
	optional EMentorRelationPosition pos = 1;
	optional int32 breakTime = 2;
	optional uint64 roleID = 3;
	optional string roleName = 4;
}

message PartnerMemberDetail{
	optional uint64 memberid = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	repeated uint32 fashion = 6;
	optional OutLook outlook = 7;
	optional uint32 viplevel = 8;
	optional uint32 paymemberid = 9;
	optional bool is_apply_leave = 10;
	optional uint32 left_leave_time = 11;
}

message PartnerLivenessItem{
	optional uint64 roleid = 1;
	optional uint32 actid = 2;
	optional uint32 value = 3;
	optional uint32 time = 4;
	optional string name = 5;
}

message InvFightRoleBrief{
	optional uint64 invID = 1;
	optional uint32 title = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 profession = 5;
	optional uint32 ctime = 6;
	optional bool isplatfriend = 7;
}

message GCFJvDianInfo{
	optional GCFJvDianType type = 1;
	optional string guildname = 2;
}

message GCFGuildBrief{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint32 guildicon = 3;
	optional uint32 point = 4;
	optional int32 group = 5;
}

message GCFRoleBrief{
	optional uint32 rank = 1;
	optional uint64 roleID = 2;
	optional string rolename = 3;
	optional uint32 killcount = 4;
	optional uint32 occupycount = 5;
	optional uint32 feats = 6;
}

message GCFBattleField{
	optional uint32 mapid = 1;
	repeated GCFJvDianInfo jvdians = 2;
	optional GCFZhanChBriefInfo zhanchinfo = 3;
}

message GCFZhanChBriefInfo{
	optional uint32 mapid = 1;
	optional uint32 multipoint = 2;
	optional uint32 curusercount = 3;
	optional uint32 maxusercount = 4;
	optional bool isopen = 5;
}

message PartnerShopItemClient{
	optional uint32 id = 1;
	optional uint32 itemid = 2;
	optional uint32 buy_count = 3;
}

message HeroBattleGroupData{
	optional uint32 teamid = 1;
	optional uint32 headcount = 2;
	optional uint32 point = 3;
}

message CityData{
	optional uint32 id = 1;
	optional uint64 guildid = 2;
	optional string guildname = 3;
	optional uint32 time = 4;
	optional bool isGetToday = 5;
	optional GUILDTERRTYPE type = 6;
}

message GuildTerrChallInfo{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint64 allianceid = 3;
	repeated uint64 tryallianceid = 4;
}

message GuildTerrAllianceInfo{
	optional string guildname = 1;
	optional uint32 guildlvl = 2;
	optional uint32 guildRoleNum = 3;
	optional uint32 time = 4;
	optional uint64 guildId = 5;
}

message PartnerShopRecordItem{
	optional uint64 roleid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 time = 4;
	optional string name = 5;
	optional uint32 titleid = 6;
}

message HeroBattleTeamData{
	optional uint32 teamid = 1;
	optional uint32 headcount = 2;
	optional uint32 point = 3;
}

message HeroBattleTeamMember{
	optional uint64 uid = 1;
	optional uint32 heroid = 2;
	optional string name = 3;
	optional uint32 killnum = 4;
	optional uint32 deathnum = 5;
	optional uint32 assitnum = 6;
}

message GuildBonusBriefInfo{
	optional uint32 bonusID = 1;
	optional int32 sendTime = 2;
}

message DoorState{
	optional string name = 1;
	optional bool isOn = 2;
}

message LeagueTeamMemberDetail{
	optional RoleOutLookBrief brief = 1;
	optional uint32 pkpoint = 2;
}

message RoleOutLookBrief{
	optional uint64 roleid = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	repeated uint32 fashion = 6;
	optional OutLook outlook = 7;
	optional uint32 viplevel = 8;
	optional uint32 paymemberid = 9;
}

message LeagueTeamDetail{
	optional uint64 league_teamid = 1;
	optional string teamname = 2;
	optional uint32 serverid = 3;
	optional string zonename = 4;
	optional string servername = 5;
	repeated LeagueTeamMemberDetail members = 6;
	optional uint32 score = 7;
}

message LeagueBattleTeamData{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional string servername = 4;
	optional uint32 score = 5;
	optional uint32 rank = 6;
	optional uint32 total_num = 7;
	optional uint32 total_win = 8;
	repeated LeagueBattleRoleBrief members = 9;
}

message LeagueBattleRoleBrief{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 level = 3;
	optional uint32 serverid = 4;
	optional uint32 profession = 5;
	optional uint32 ppt = 6;
	optional uint32 pkpoint = 7;
	optional string account = 8;
}

message LeagueBattleOneTeam{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional uint32 score = 4;
	repeated LeagueBattleOneRole members = 5;
}

message LeagueBattleOneRole{
	optional LeagueBattleRoleBrief basedata = 1;
	optional LeagueBattleRoleState state = 2;
	optional int32 index = 3;
}

message LeagueBattleResultTeam{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional string servername = 4;
	repeated LeagueBattleResultRole members = 5;
	optional uint32 rank = 6;
	optional uint32 score = 7;
	optional int32 score_change = 8;
	optional uint32 honorpoint = 9;
	optional int32 rank_change = 10;
}

message LeagueBattleResultRole{
	optional LeagueBattleRoleBrief basedata = 1;
	optional uint32 killnum = 2;
	optional bool is_up = 3;
}

message SubScribe{
	optional uint32 id = 1;
	optional string title = 2;
	optional bool status = 3;
}

message LeagueBattleOneRecord{
	optional uint64 other_teamid = 1;
	optional string other_teamname = 2;
	optional string servername = 3;
	optional uint32 serverid = 4;
	optional int32 score_change = 5;
	optional PkResultType result = 6;
	optional uint32 time = 7;
	optional LeagueBattleType type = 8;
}

message LBEleRoundInfo{
	optional uint32 round = 1;
	repeated LBEleRoomInfo rooms = 2;
}

message LBEleRoomInfo{
	optional uint32 roomid = 1;
	optional LBEleTeamInfo team1 = 2;
	optional LBEleTeamInfo team2 = 3;
	optional LBEleRoomState state = 4;
	optional uint64 winleagueid = 5;
	optional uint32 liveid = 6;
}

message LBEleTeamInfo{
	optional uint64 leagueid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional string servername = 4;
	optional string zonename = 5;
}

message PersonalHomePage{
	optional uint32 qq_vip = 1;
	optional uint32 paymember_id = 2;
	optional string play_name = 3;
	optional uint32 uid = 4;
	optional string declaration = 5;
	optional string server_name = 6;
	optional uint32 level = 7;
	optional uint32 profession_id = 8;
	optional string guild_name = 9;
	optional double power = 10;
	optional uint32 continue_login_time = 11;
	optional uint32 online_time = 12;
	repeated CareerData carrer_data = 13;
}

message CareerData{
	optional CarrerDataType type = 1;
	optional uint32 time = 2;
	optional uint32 para1 = 3;
}

message PVPInformation{
	optional PKInformation pk_info = 1;
}

message PKInformation{
	optional PkRecord pk_record = 1;
	optional uint32 pk_rank = 2;
	optional uint32 pk_profession_rank = 3;
	optional uint32 pk_max_score = 4;
	optional string pk_all_roles_rate = 5;
	optional string pk_warrior_rate = 6;
	optional string pk_archer_rate = 7;
	optional string pk_minister_rate = 8;
	optional string pk_master_rate = 9;
}

message TerrData{
	optional uint32 id = 1;
	optional uint64 guildid = 2;
	optional uint32 icon = 3;
	optional string name = 4;
}

message GiftIbItem{
	optional string openid = 1;
	optional string name = 2;
	optional ItemBrief item = 3;
	optional string text = 4;
	optional string orderid = 5;
}

message IBGiftHistAllItem{
	repeated IBGiftHistItem allitem = 1;
}

message IBGiftHistItem{
	optional string name = 1;
	optional ItemBrief item = 2;
	optional uint32 time = 3;
}

message ArenaStarTopRoleData{
	optional ArenaStarHistData historydata = 1;
	optional RoleOutLookBrief outlook = 2;
	optional uint32 rank = 3;
	optional uint32 season = 4;
}

message ArenaStarHistData{
	optional uint32 rankOneNum = 1;
	optional uint32 rankTenNum = 2;
	repeated RankOnce rankRecent = 3;
}

message RankOnce{
	optional uint32 season = 1;
	optional uint32 rank = 2;
}

message CustomBattleConfig{
	optional uint32 tagtype = 1;
	optional uint32 configid = 2;
	optional uint32 scalemask = 3;
	optional string name = 4;
	optional string desc = 5;
	optional bool haspassword = 6;
	optional string password = 7;
	optional bool isfair = 8;
	optional uint32 battletime = 9;
	optional uint32 canjoincount = 10;
	optional uint64 creator = 11;
	optional string creatorname = 12;
	optional CustomBattleState state = 13;
	optional uint32 readytime = 14;
	optional bool issystem = 15;
	optional uint32 hasjoincount = 16;
	optional string token = 17;
	optional uint32 battletimeconf = 18;
	optional uint32 tagmask = 19;
	optional CustomBattleType fighttype = 20;
}

message CustomBattleClientInfo{
	optional CustomBattleQueryInfo queryinfo = 1;
	optional CustomBattleDataRole createinfo = 2;
	optional CustomBattleDataRole joininfo = 3;
	optional uint32 rank = 4;
	repeated CustomBattleDataRole searchinfo = 5;
}

message CustomBattleQueryInfo{
	repeated CustomBattleDataRole battlesystem = 1;
	repeated CustomBattleDataRole battlerandom = 2;
	optional CustomBattleDataRole battleone = 3;
}

message CustomBattleDataRole{
	optional CustomBattleData data = 1;
	optional CustomBattleRole role = 2;
}

message CustomBattleData{
	optional uint64 uid = 1;
	optional CustomBattleConfig config = 2;
	repeated CustomBattleRank rank = 3;
}

message CustomBattleRank{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 point = 3;
	optional uint32 rewardcd = 4;
	optional bool istakenreward = 5;
	optional uint32 timestamp = 6;
}

message CustomBattleRole{
	optional uint64 uid = 1;
	optional uint32 configid = 2;
	optional uint32 lose = 3;
	optional uint32 win = 4;
	optional uint32 point = 5;
	optional uint32 rank = 6;
	optional CustomBattleRoleState state = 7;
	optional uint32 rewardcd = 8;
	repeated uint32 records = 9;
	optional uint32 draw = 10;
}

message SCEliRoomInfo{
	optional uint32 roomid = 1;
	optional SCEliTeamInfo team1 = 2;
	optional SCEliTeamInfo team2 = 3;
	optional LBEleRoomState state = 4;
	optional uint64 win_stid = 5;
	optional uint32 liveid = 6;
}

message SCEliTeamInfo{
	optional uint64 stid = 1;
	optional string name = 2;
}

message SkyTeamMemberInfo{
	optional RoleOutLookBrief brief = 1;
}

message SkyCraftBattleRecord{
	optional uint64 other_teamid = 1;
	optional string other_name = 2;
	optional int32 score_change = 3;
	optional PkResultType result = 4;
	optional uint32 time = 5;
	optional SkyCraftType type = 6;
}

message SCEliRoundInfo{
	optional SCEliRoundType round = 1;
	repeated SCEliRoomInfo rooms = 2;
}

message SkyTeamDetail{
	optional uint64 stid = 1;
	optional string name = 2;
	repeated SkyTeamMemberInfo members = 3;
	optional uint32 score = 4;
}

message GuildCampSpriteInfo{
	optional uint32 sprite_id = 1;
	optional int32 position = 2;
	optional string summoner = 3;
}

message PartyExchangeItemInfo{
	optional uint64 role_id = 1;
	optional uint32 time = 2;
	optional uint32 level = 3;
	optional string name = 4;
	optional uint32 profession_id = 5;
}

message GuildCampChatInfo{
	optional uint64 audio_id = 1;
	optional uint32 audio_time = 2;
	optional string chat_text = 3;
}

message CustomBattleMatchRoleInfo{
	optional uint64 roleid = 1;
	optional uint32 profession = 2;
	optional string rolename = 3;
	optional uint32 serverid = 4;
	optional uint32 win = 5;
	optional uint32 lose = 6;
	optional uint32 draw = 7;
	repeated uint32 records = 8;
	optional uint32 timestamp = 9;
	repeated PkMatchStage stages = 10;
	optional uint32 point = 11;
}

message PkMatchStage{
	optional uint32 ctime = 1;
	optional uint32 span = 2;
	optional uint32 robotpercent = 3;
	optional int32 lookupid = 4;
}

message HeroKillUnit{
	optional HeroKillUnitType type = 1;
	optional uint32 id = 2;
	optional uint32 teamid = 3;
	optional uint32 continueCounts = 4;
}

message MobaRoleData{
	optional uint64 uid = 1;
	optional string name = 2;
	optional double exp = 3;
	optional uint32 level = 4;
	optional uint32 upgradeNum = 5;
	optional uint32 heroid = 6;
	optional uint32 killNum = 7;
	optional uint32 deathNum = 8;
	optional uint32 assistNum = 9;
	optional uint32 attackLevel = 10;
	optional uint32 defenseLevel = 11;
	optional uint32 reviveTime = 12;
}

message MobaBattleTeamData{
	optional uint32 teamid = 1;
	optional uint32 grouplevel = 2;
	optional uint32 headcount = 3;
}

message DHRewrad2State{
	optional int32 id = 1;
	optional DHRState state = 2;
}

message MobaBattleOneGame{
	repeated MobaBattleOneGameRole team1 = 1;
	repeated MobaBattleOneGameRole team2 = 2;
	optional uint32 tag = 3;
	optional uint32 date = 4;
	optional uint32 timeSpan = 5;
	optional uint32 winteamid = 6;
	optional uint64 mvpid = 7;
	optional uint64 losemvpid = 8;
	optional uint64 damagemaxid = 9;
	optional uint64 behitdamagemaxid = 10;
}

message MobaBattleOneGameRole{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 heroid = 3;
	optional uint32 killcount = 4;
	optional uint32 deathcount = 5;
	optional uint32 assistcount = 6;
	optional uint32 multikillcount = 7;
	optional float kda = 8;
	optional bool isescape = 9;
}

message MobaBattleOneGameBrief{
	optional uint32 tag = 1;
	optional uint32 date = 2;
	optional uint32 heroid = 3;
	optional bool iswin = 4;
	optional bool isescape = 5;
	optional bool ismvp = 6;
	optional bool islosemvp = 7;
}

message MayhemRankInfo{
	optional uint64 roleid = 1;
	optional uint32 point = 2;
	optional uint32 killcount = 3;
	optional uint32 time = 4;
	optional uint32 serverid = 5;
	optional string name = 6;
	optional string svrname = 7;
	optional uint32 pro = 8;
}

message BMRoleEnter{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 sceneid = 3;
	optional uint32 gsline = 4;
	optional uint32 level = 5;
	optional uint32 score = 6;
}

message GroupChatFindTeamInfo{
	optional uint64 groupchatID = 1;
	optional string groupchatName = 2;
	optional uint64 issueIndex = 3;
	optional uint32 stageID = 4;
	optional uint32 fighting = 5;
	optional uint32 type = 6;
	optional uint32 time = 7;
	optional uint32 state = 8;
	optional uint32 issuetime = 9;
	optional uint64 leaderroleid = 10;
	optional bool isselfingroup = 11;
}

message GroupChatFindRoleInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint64 groupchatID = 3;
	optional string groupchatName = 4;
	optional uint64 issueIndex = 5;
	optional uint32 stageID = 6;
	optional uint32 fighting = 7;
	optional uint32 type = 8;
	optional uint32 time = 9;
	optional uint32 state = 10;
	optional uint32 issuetime = 11;
	optional uint32 roleprofession = 12;
}

message GroupChatPlayerInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 profession = 3;
	optional uint32 title = 4;
	optional uint32 level = 5;
	optional uint32 fighting = 6;
	optional string guild = 7;
	optional uint32 joingrouptime = 8;
	optional uint32 uid = 9;
}

message WeddingBrief{
	optional uint64 weddingid = 1;
	optional WeddingType type = 2;
	optional WeddingRoleBrief role1 = 3;
	optional WeddingRoleBrief role2 = 4;
	optional WeddingState state = 5;
	optional uint32 lefttime = 6;
}

message WeddingRoleBrief{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 profession = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	optional string guildname = 6;
}

message MarriageApplyInfo{
	optional uint64 applyRoleID = 1;
	optional string applyName = 2;
	optional WeddingType type = 3;
}

message MarriageApplyResponse{
	optional bool isAgree = 1;
	optional uint64 roleID = 2;
	optional string roleName = 3;
}

message WarningItemSet{
	repeated WarningPackage WarningItem = 1;
}

message WarningPackage{
	repeated uint32 WarningPos = 1;
	required uint64 ID = 2;
}

message CreateCrossBattleSceneArg{
	optional uint32 mapID = 1;
	repeated CreateCrossBattleSceneData createInfos = 2;
	optional InvFightBefESpara smallInfo = 3;
}

message CreateCrossBattleSceneData{
	optional uint64 roleid = 1;
	optional uint32 serverid = 2;
}

message DragonGuildMembersInfo{
	optional string name = 1;
	optional uint64 roleid = 2;
	optional int32 position = 3;
	optional uint32 contribute = 4;
	optional uint32 ppt = 5;
	optional uint32 flag = 6;
	optional uint32 level = 7;
	optional RoleType profession = 8;
	optional uint32 lastlogin = 9;
	optional uint32 vip = 10;
	optional bool isonline = 11;
	optional uint32 activity = 12;
	optional uint32 paymemberid = 13;
	optional uint32 title = 14;
}

message DragonGuildInfo{
	optional string name = 1;
	optional uint64 leaderId = 2;
	optional string leadername = 3;
	optional uint32 level = 4;
	optional uint32 membercounts = 5;
	optional bool isSendApplication = 6;
	optional uint64 id = 7;
	optional uint32 recruitppt = 8;
	optional bool needapproval = 9;
	optional uint32 capacity = 10;
	optional string announcement = 11;
	optional uint32 guildExp = 12;
	optional uint64 totalPPT = 13;
	optional uint32 sceneId = 14;
	optional uint32 sceneCnt = 15;
}

message DragonGuildTaskInfo{
	optional uint32 taskID = 1;
	optional uint32 finishCount = 2;
	optional uint32 receiveCount = 3;
}

message DragonGuildShopItemClient{
	optional uint32 id = 1;
	optional uint32 itemid = 2;
	optional uint32 buy_count = 3;
}

message DragonGuildShopRecordItem{
	optional uint64 roleid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 time = 4;
	optional string name = 5;
	optional uint32 titleId = 6;
}

message GoalAwardsInfo{
	optional uint32 goalAwardsID = 1;
	optional uint32 doneIndex = 2;
	optional uint32 gottenAwardsIndex = 3;
	optional double totalvalue = 4;
	repeated GoalAwardsValue gkidvalue = 5;
}

message GoalAwardsValue{
	optional uint32 gkid = 1;
	optional double gkvalue = 2;
}

message BattleFieldLeftAward{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message BattleFieldRank{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 point = 3;
}

message BattleFieldRoleSimpleInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
}

message NpcFlNpc2Role{
	optional uint32 npcid = 1;
	optional NpcFlRoleExp role = 2;
	optional string rolename = 3;
}

message NpcFlRoleExp{
	optional uint64 roleid = 1;
	optional uint32 exp = 2;
}

message DailyTaskRefreshRoleInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional RoleType profession = 3;
	optional uint32 luck = 4;
	optional uint32 refresh_num = 5;
	optional bool already_ask = 6;
	optional bool already_refused = 7;
	optional bool already_helped = 8;
	optional uint32 score = 9;
	optional uint32 time = 10;
	optional bool is_online = 11;
}

message DailyTaskRefreshInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 score = 3;
	optional bool isnew = 4;
	optional uint32 time = 5;
	optional uint32 old_score = 6;
}

message DoodadItemSkill{
	optional uint32 index = 1;
	optional uint32 itemid = 2;
	optional uint32 count = 3;
}

message BoxInfos{
	repeated ItemBrief items = 1;
	optional uint32 index = 2;
	optional uint64 roleid = 3;
	repeated uint32 type = 4;
}

message ZoneRoleInfo{
	optional uint32 serverid = 1;
	optional string servername = 2;
	optional uint64 roleid = 3;
	optional string rolename = 4;
	optional RoleType roleprofession = 5;
	optional uint32 rolelevel = 6;
	optional uint32 paycnt = 7;
	optional uint32 opentime = 8;
}

message RoleGuildContribute{
	optional uint64 roleId = 1;
	optional string RoleName = 2;
	optional int32 contribute = 3;
	optional uint32 updateTime = 4;
}

